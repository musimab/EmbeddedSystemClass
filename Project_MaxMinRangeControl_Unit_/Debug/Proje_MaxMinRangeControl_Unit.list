
Proje_MaxMinRangeControl_Unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d78  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08004f08  08004f08  00014f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f78  08004f78  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f78  08004f78  00014f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f80  08004f80  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f80  08004f80  00014f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f84  08004f84  00014f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08004f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000190  2000007c  08005004  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08005004  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4b8  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d90  00000000  00000000  0002e564  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000dd8  00000000  00000000  000302f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d08  00000000  00000000  000310d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002035  00000000  00000000  00031dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a6b5  00000000  00000000  00033e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cc361  00000000  00000000  0003e4c2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010a823  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003edc  00000000  00000000  0010a8a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004ef0 	.word	0x08004ef0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	08004ef0 	.word	0x08004ef0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_uldivmod>:
 8000a4c:	b953      	cbnz	r3, 8000a64 <__aeabi_uldivmod+0x18>
 8000a4e:	b94a      	cbnz	r2, 8000a64 <__aeabi_uldivmod+0x18>
 8000a50:	2900      	cmp	r1, #0
 8000a52:	bf08      	it	eq
 8000a54:	2800      	cmpeq	r0, #0
 8000a56:	bf1c      	itt	ne
 8000a58:	f04f 31ff 	movne.w	r1, #4294967295
 8000a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a60:	f000 b972 	b.w	8000d48 <__aeabi_idiv0>
 8000a64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a6c:	f000 f806 	bl	8000a7c <__udivmoddi4>
 8000a70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a78:	b004      	add	sp, #16
 8000a7a:	4770      	bx	lr

08000a7c <__udivmoddi4>:
 8000a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a80:	9e08      	ldr	r6, [sp, #32]
 8000a82:	4604      	mov	r4, r0
 8000a84:	4688      	mov	r8, r1
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d14b      	bne.n	8000b22 <__udivmoddi4+0xa6>
 8000a8a:	428a      	cmp	r2, r1
 8000a8c:	4615      	mov	r5, r2
 8000a8e:	d967      	bls.n	8000b60 <__udivmoddi4+0xe4>
 8000a90:	fab2 f282 	clz	r2, r2
 8000a94:	b14a      	cbz	r2, 8000aaa <__udivmoddi4+0x2e>
 8000a96:	f1c2 0720 	rsb	r7, r2, #32
 8000a9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000aa2:	4095      	lsls	r5, r2
 8000aa4:	ea47 0803 	orr.w	r8, r7, r3
 8000aa8:	4094      	lsls	r4, r2
 8000aaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000aae:	0c23      	lsrs	r3, r4, #16
 8000ab0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000ab4:	fa1f fc85 	uxth.w	ip, r5
 8000ab8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000abc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac0:	fb07 f10c 	mul.w	r1, r7, ip
 8000ac4:	4299      	cmp	r1, r3
 8000ac6:	d909      	bls.n	8000adc <__udivmoddi4+0x60>
 8000ac8:	18eb      	adds	r3, r5, r3
 8000aca:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ace:	f080 811b 	bcs.w	8000d08 <__udivmoddi4+0x28c>
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	f240 8118 	bls.w	8000d08 <__udivmoddi4+0x28c>
 8000ad8:	3f02      	subs	r7, #2
 8000ada:	442b      	add	r3, r5
 8000adc:	1a5b      	subs	r3, r3, r1
 8000ade:	b2a4      	uxth	r4, r4
 8000ae0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ae4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ae8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af0:	45a4      	cmp	ip, r4
 8000af2:	d909      	bls.n	8000b08 <__udivmoddi4+0x8c>
 8000af4:	192c      	adds	r4, r5, r4
 8000af6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000afa:	f080 8107 	bcs.w	8000d0c <__udivmoddi4+0x290>
 8000afe:	45a4      	cmp	ip, r4
 8000b00:	f240 8104 	bls.w	8000d0c <__udivmoddi4+0x290>
 8000b04:	3802      	subs	r0, #2
 8000b06:	442c      	add	r4, r5
 8000b08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b0c:	eba4 040c 	sub.w	r4, r4, ip
 8000b10:	2700      	movs	r7, #0
 8000b12:	b11e      	cbz	r6, 8000b1c <__udivmoddi4+0xa0>
 8000b14:	40d4      	lsrs	r4, r2
 8000b16:	2300      	movs	r3, #0
 8000b18:	e9c6 4300 	strd	r4, r3, [r6]
 8000b1c:	4639      	mov	r1, r7
 8000b1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b22:	428b      	cmp	r3, r1
 8000b24:	d909      	bls.n	8000b3a <__udivmoddi4+0xbe>
 8000b26:	2e00      	cmp	r6, #0
 8000b28:	f000 80eb 	beq.w	8000d02 <__udivmoddi4+0x286>
 8000b2c:	2700      	movs	r7, #0
 8000b2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000b32:	4638      	mov	r0, r7
 8000b34:	4639      	mov	r1, r7
 8000b36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b3a:	fab3 f783 	clz	r7, r3
 8000b3e:	2f00      	cmp	r7, #0
 8000b40:	d147      	bne.n	8000bd2 <__udivmoddi4+0x156>
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d302      	bcc.n	8000b4c <__udivmoddi4+0xd0>
 8000b46:	4282      	cmp	r2, r0
 8000b48:	f200 80fa 	bhi.w	8000d40 <__udivmoddi4+0x2c4>
 8000b4c:	1a84      	subs	r4, r0, r2
 8000b4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000b52:	2001      	movs	r0, #1
 8000b54:	4698      	mov	r8, r3
 8000b56:	2e00      	cmp	r6, #0
 8000b58:	d0e0      	beq.n	8000b1c <__udivmoddi4+0xa0>
 8000b5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000b5e:	e7dd      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000b60:	b902      	cbnz	r2, 8000b64 <__udivmoddi4+0xe8>
 8000b62:	deff      	udf	#255	; 0xff
 8000b64:	fab2 f282 	clz	r2, r2
 8000b68:	2a00      	cmp	r2, #0
 8000b6a:	f040 808f 	bne.w	8000c8c <__udivmoddi4+0x210>
 8000b6e:	1b49      	subs	r1, r1, r5
 8000b70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b74:	fa1f f885 	uxth.w	r8, r5
 8000b78:	2701      	movs	r7, #1
 8000b7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b88:	fb08 f10c 	mul.w	r1, r8, ip
 8000b8c:	4299      	cmp	r1, r3
 8000b8e:	d907      	bls.n	8000ba0 <__udivmoddi4+0x124>
 8000b90:	18eb      	adds	r3, r5, r3
 8000b92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b96:	d202      	bcs.n	8000b9e <__udivmoddi4+0x122>
 8000b98:	4299      	cmp	r1, r3
 8000b9a:	f200 80cd 	bhi.w	8000d38 <__udivmoddi4+0x2bc>
 8000b9e:	4684      	mov	ip, r0
 8000ba0:	1a59      	subs	r1, r3, r1
 8000ba2:	b2a3      	uxth	r3, r4
 8000ba4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ba8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb0:	fb08 f800 	mul.w	r8, r8, r0
 8000bb4:	45a0      	cmp	r8, r4
 8000bb6:	d907      	bls.n	8000bc8 <__udivmoddi4+0x14c>
 8000bb8:	192c      	adds	r4, r5, r4
 8000bba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x14a>
 8000bc0:	45a0      	cmp	r8, r4
 8000bc2:	f200 80b6 	bhi.w	8000d32 <__udivmoddi4+0x2b6>
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	eba4 0408 	sub.w	r4, r4, r8
 8000bcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd0:	e79f      	b.n	8000b12 <__udivmoddi4+0x96>
 8000bd2:	f1c7 0c20 	rsb	ip, r7, #32
 8000bd6:	40bb      	lsls	r3, r7
 8000bd8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000bdc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be0:	fa01 f407 	lsl.w	r4, r1, r7
 8000be4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000be8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf0:	4325      	orrs	r5, r4
 8000bf2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bf6:	0c2c      	lsrs	r4, r5, #16
 8000bf8:	fb08 3319 	mls	r3, r8, r9, r3
 8000bfc:	fa1f fa8e 	uxth.w	sl, lr
 8000c00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c04:	fb09 f40a 	mul.w	r4, r9, sl
 8000c08:	429c      	cmp	r4, r3
 8000c0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000c0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000c12:	d90b      	bls.n	8000c2c <__udivmoddi4+0x1b0>
 8000c14:	eb1e 0303 	adds.w	r3, lr, r3
 8000c18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c1c:	f080 8087 	bcs.w	8000d2e <__udivmoddi4+0x2b2>
 8000c20:	429c      	cmp	r4, r3
 8000c22:	f240 8084 	bls.w	8000d2e <__udivmoddi4+0x2b2>
 8000c26:	f1a9 0902 	sub.w	r9, r9, #2
 8000c2a:	4473      	add	r3, lr
 8000c2c:	1b1b      	subs	r3, r3, r4
 8000c2e:	b2ad      	uxth	r5, r5
 8000c30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c34:	fb08 3310 	mls	r3, r8, r0, r3
 8000c38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c40:	45a2      	cmp	sl, r4
 8000c42:	d908      	bls.n	8000c56 <__udivmoddi4+0x1da>
 8000c44:	eb1e 0404 	adds.w	r4, lr, r4
 8000c48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4c:	d26b      	bcs.n	8000d26 <__udivmoddi4+0x2aa>
 8000c4e:	45a2      	cmp	sl, r4
 8000c50:	d969      	bls.n	8000d26 <__udivmoddi4+0x2aa>
 8000c52:	3802      	subs	r0, #2
 8000c54:	4474      	add	r4, lr
 8000c56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000c5e:	eba4 040a 	sub.w	r4, r4, sl
 8000c62:	454c      	cmp	r4, r9
 8000c64:	46c2      	mov	sl, r8
 8000c66:	464b      	mov	r3, r9
 8000c68:	d354      	bcc.n	8000d14 <__udivmoddi4+0x298>
 8000c6a:	d051      	beq.n	8000d10 <__udivmoddi4+0x294>
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d069      	beq.n	8000d44 <__udivmoddi4+0x2c8>
 8000c70:	ebb1 050a 	subs.w	r5, r1, sl
 8000c74:	eb64 0403 	sbc.w	r4, r4, r3
 8000c78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c7c:	40fd      	lsrs	r5, r7
 8000c7e:	40fc      	lsrs	r4, r7
 8000c80:	ea4c 0505 	orr.w	r5, ip, r5
 8000c84:	e9c6 5400 	strd	r5, r4, [r6]
 8000c88:	2700      	movs	r7, #0
 8000c8a:	e747      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000c8c:	f1c2 0320 	rsb	r3, r2, #32
 8000c90:	fa20 f703 	lsr.w	r7, r0, r3
 8000c94:	4095      	lsls	r5, r2
 8000c96:	fa01 f002 	lsl.w	r0, r1, r2
 8000c9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000c9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ca2:	4338      	orrs	r0, r7
 8000ca4:	0c01      	lsrs	r1, r0, #16
 8000ca6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000caa:	fa1f f885 	uxth.w	r8, r5
 8000cae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb6:	fb07 f308 	mul.w	r3, r7, r8
 8000cba:	428b      	cmp	r3, r1
 8000cbc:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc0:	d907      	bls.n	8000cd2 <__udivmoddi4+0x256>
 8000cc2:	1869      	adds	r1, r5, r1
 8000cc4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cc8:	d22f      	bcs.n	8000d2a <__udivmoddi4+0x2ae>
 8000cca:	428b      	cmp	r3, r1
 8000ccc:	d92d      	bls.n	8000d2a <__udivmoddi4+0x2ae>
 8000cce:	3f02      	subs	r7, #2
 8000cd0:	4429      	add	r1, r5
 8000cd2:	1acb      	subs	r3, r1, r3
 8000cd4:	b281      	uxth	r1, r0
 8000cd6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000cda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000cde:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ce2:	fb00 f308 	mul.w	r3, r0, r8
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d907      	bls.n	8000cfa <__udivmoddi4+0x27e>
 8000cea:	1869      	adds	r1, r5, r1
 8000cec:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf0:	d217      	bcs.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d915      	bls.n	8000d22 <__udivmoddi4+0x2a6>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4429      	add	r1, r5
 8000cfa:	1ac9      	subs	r1, r1, r3
 8000cfc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d00:	e73b      	b.n	8000b7a <__udivmoddi4+0xfe>
 8000d02:	4637      	mov	r7, r6
 8000d04:	4630      	mov	r0, r6
 8000d06:	e709      	b.n	8000b1c <__udivmoddi4+0xa0>
 8000d08:	4607      	mov	r7, r0
 8000d0a:	e6e7      	b.n	8000adc <__udivmoddi4+0x60>
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	e6fb      	b.n	8000b08 <__udivmoddi4+0x8c>
 8000d10:	4541      	cmp	r1, r8
 8000d12:	d2ab      	bcs.n	8000c6c <__udivmoddi4+0x1f0>
 8000d14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d18:	eb69 020e 	sbc.w	r2, r9, lr
 8000d1c:	3801      	subs	r0, #1
 8000d1e:	4613      	mov	r3, r2
 8000d20:	e7a4      	b.n	8000c6c <__udivmoddi4+0x1f0>
 8000d22:	4660      	mov	r0, ip
 8000d24:	e7e9      	b.n	8000cfa <__udivmoddi4+0x27e>
 8000d26:	4618      	mov	r0, r3
 8000d28:	e795      	b.n	8000c56 <__udivmoddi4+0x1da>
 8000d2a:	4667      	mov	r7, ip
 8000d2c:	e7d1      	b.n	8000cd2 <__udivmoddi4+0x256>
 8000d2e:	4681      	mov	r9, r0
 8000d30:	e77c      	b.n	8000c2c <__udivmoddi4+0x1b0>
 8000d32:	3802      	subs	r0, #2
 8000d34:	442c      	add	r4, r5
 8000d36:	e747      	b.n	8000bc8 <__udivmoddi4+0x14c>
 8000d38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d3c:	442b      	add	r3, r5
 8000d3e:	e72f      	b.n	8000ba0 <__udivmoddi4+0x124>
 8000d40:	4638      	mov	r0, r7
 8000d42:	e708      	b.n	8000b56 <__udivmoddi4+0xda>
 8000d44:	4637      	mov	r7, r6
 8000d46:	e6e9      	b.n	8000b1c <__udivmoddi4+0xa0>

08000d48 <__aeabi_idiv0>:
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop

08000d4c <DWT_Delay_Init>:
 * @brief  Initializes DWT_Clock_Cycle_Count for DWT_Delay_us function
 * @return Error DWT counter
 *         1: clock cycle counter not started
 *         0: clock cycle counter works
 */
uint32_t DWT_Delay_Init(void) {
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* Disable TRC */
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk; // ~0x01000000;
 8000d50:	4b14      	ldr	r3, [pc, #80]	; (8000da4 <DWT_Delay_Init+0x58>)
 8000d52:	68db      	ldr	r3, [r3, #12]
 8000d54:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <DWT_Delay_Init+0x58>)
 8000d56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000d5a:	60d3      	str	r3, [r2, #12]
  /* Enable TRC */
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk; // 0x01000000;
 8000d5c:	4b11      	ldr	r3, [pc, #68]	; (8000da4 <DWT_Delay_Init+0x58>)
 8000d5e:	68db      	ldr	r3, [r3, #12]
 8000d60:	4a10      	ldr	r2, [pc, #64]	; (8000da4 <DWT_Delay_Init+0x58>)
 8000d62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d66:	60d3      	str	r3, [r2, #12]

  /* Disable clock cycle counter */
  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 8000d68:	4b0f      	ldr	r3, [pc, #60]	; (8000da8 <DWT_Delay_Init+0x5c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a0e      	ldr	r2, [pc, #56]	; (8000da8 <DWT_Delay_Init+0x5c>)
 8000d6e:	f023 0301 	bic.w	r3, r3, #1
 8000d72:	6013      	str	r3, [r2, #0]
  /* Enable  clock cycle counter */
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <DWT_Delay_Init+0x5c>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0b      	ldr	r2, [pc, #44]	; (8000da8 <DWT_Delay_Init+0x5c>)
 8000d7a:	f043 0301 	orr.w	r3, r3, #1
 8000d7e:	6013      	str	r3, [r2, #0]

  /* Reset the clock cycle counter value */
  DWT->CYCCNT = 0;
 8000d80:	4b09      	ldr	r3, [pc, #36]	; (8000da8 <DWT_Delay_Init+0x5c>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	605a      	str	r2, [r3, #4]

     /* 3 NO OPERATION instructions */
     __ASM volatile ("NOP");
 8000d86:	bf00      	nop
     __ASM volatile ("NOP");
 8000d88:	bf00      	nop
  __ASM volatile ("NOP");
 8000d8a:	bf00      	nop

  /* Check if clock cycle counter has started */
     if(DWT->CYCCNT)
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <DWT_Delay_Init+0x5c>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <DWT_Delay_Init+0x4c>
     {
       return 0; /*clock cycle counter started*/
 8000d94:	2300      	movs	r3, #0
 8000d96:	e000      	b.n	8000d9a <DWT_Delay_Init+0x4e>
     }
     else
  {
    return 1; /*clock cycle counter not started*/
 8000d98:	2301      	movs	r3, #1
  }
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000edf0 	.word	0xe000edf0
 8000da8:	e0001000 	.word	0xe0001000

08000dac <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup for blue lcd: 0x4E or for green lcd :0x7E

void lcd_send_cmd (char cmd)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000db6:	79fb      	ldrb	r3, [r7, #7]
 8000db8:	f023 030f 	bic.w	r3, r3, #15
 8000dbc:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000dbe:	79fb      	ldrb	r3, [r7, #7]
 8000dc0:	011b      	lsls	r3, r3, #4
 8000dc2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000dc4:	7bfb      	ldrb	r3, [r7, #15]
 8000dc6:	f043 030c 	orr.w	r3, r3, #12
 8000dca:	b2db      	uxtb	r3, r3
 8000dcc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	f043 0308 	orr.w	r3, r3, #8
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000dd8:	7bbb      	ldrb	r3, [r7, #14]
 8000dda:	f043 030c 	orr.w	r3, r3, #12
 8000dde:	b2db      	uxtb	r3, r3
 8000de0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000de2:	7bbb      	ldrb	r3, [r7, #14]
 8000de4:	f043 0308 	orr.w	r3, r3, #8
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000dec:	f107 0208 	add.w	r2, r7, #8
 8000df0:	2364      	movs	r3, #100	; 0x64
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	2304      	movs	r3, #4
 8000df6:	214e      	movs	r1, #78	; 0x4e
 8000df8:	4803      	ldr	r0, [pc, #12]	; (8000e08 <lcd_send_cmd+0x5c>)
 8000dfa:	f002 f8eb 	bl	8002fd4 <HAL_I2C_Master_Transmit>
}
 8000dfe:	bf00      	nop
 8000e00:	3710      	adds	r7, #16
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	200000dc 	.word	0x200000dc

08000e0c <lcd_send_data>:

void lcd_send_data (char data)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b086      	sub	sp, #24
 8000e10:	af02      	add	r7, sp, #8
 8000e12:	4603      	mov	r3, r0
 8000e14:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	f023 030f 	bic.w	r3, r3, #15
 8000e1c:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000e1e:	79fb      	ldrb	r3, [r7, #7]
 8000e20:	011b      	lsls	r3, r3, #4
 8000e22:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000e24:	7bfb      	ldrb	r3, [r7, #15]
 8000e26:	f043 030d 	orr.w	r3, r3, #13
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000e2e:	7bfb      	ldrb	r3, [r7, #15]
 8000e30:	f043 0309 	orr.w	r3, r3, #9
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
 8000e3a:	f043 030d 	orr.w	r3, r3, #13
 8000e3e:	b2db      	uxtb	r3, r3
 8000e40:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000e42:	7bbb      	ldrb	r3, [r7, #14]
 8000e44:	f043 0309 	orr.w	r3, r3, #9
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e4c:	f107 0208 	add.w	r2, r7, #8
 8000e50:	2364      	movs	r3, #100	; 0x64
 8000e52:	9300      	str	r3, [sp, #0]
 8000e54:	2304      	movs	r3, #4
 8000e56:	214e      	movs	r1, #78	; 0x4e
 8000e58:	4803      	ldr	r0, [pc, #12]	; (8000e68 <lcd_send_data+0x5c>)
 8000e5a:	f002 f8bb 	bl	8002fd4 <HAL_I2C_Master_Transmit>
}
 8000e5e:	bf00      	nop
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200000dc 	.word	0x200000dc

08000e6c <lcd_clear>:

void lcd_clear (void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000e72:	2080      	movs	r0, #128	; 0x80
 8000e74:	f7ff ff9a 	bl	8000dac <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	e005      	b.n	8000e8a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000e7e:	2020      	movs	r0, #32
 8000e80:	f7ff ffc4 	bl	8000e0c <lcd_send_data>
	for (int i=0; i<70; i++)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3301      	adds	r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2b45      	cmp	r3, #69	; 0x45
 8000e8e:	ddf6      	ble.n	8000e7e <lcd_clear+0x12>
	}
}
 8000e90:	bf00      	nop
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
    switch (row)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d002      	beq.n	8000eae <lcd_put_cur+0x16>
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	d005      	beq.n	8000eb8 <lcd_put_cur+0x20>
 8000eac:	e009      	b.n	8000ec2 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eb4:	603b      	str	r3, [r7, #0]
            break;
 8000eb6:	e004      	b.n	8000ec2 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000ebe:	603b      	str	r3, [r7, #0]
            break;
 8000ec0:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff70 	bl	8000dac <lcd_send_cmd>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <lcd_init>:


void lcd_init (void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000ed8:	2032      	movs	r0, #50	; 0x32
 8000eda:	f000 fdb9 	bl	8001a50 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ede:	2030      	movs	r0, #48	; 0x30
 8000ee0:	f7ff ff64 	bl	8000dac <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000ee4:	2005      	movs	r0, #5
 8000ee6:	f000 fdb3 	bl	8001a50 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000eea:	2030      	movs	r0, #48	; 0x30
 8000eec:	f7ff ff5e 	bl	8000dac <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f000 fdad 	bl	8001a50 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000ef6:	2030      	movs	r0, #48	; 0x30
 8000ef8:	f7ff ff58 	bl	8000dac <lcd_send_cmd>
	HAL_Delay(10);
 8000efc:	200a      	movs	r0, #10
 8000efe:	f000 fda7 	bl	8001a50 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000f02:	2020      	movs	r0, #32
 8000f04:	f7ff ff52 	bl	8000dac <lcd_send_cmd>
	HAL_Delay(10);
 8000f08:	200a      	movs	r0, #10
 8000f0a:	f000 fda1 	bl	8001a50 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000f0e:	2028      	movs	r0, #40	; 0x28
 8000f10:	f7ff ff4c 	bl	8000dac <lcd_send_cmd>
	HAL_Delay(1);
 8000f14:	2001      	movs	r0, #1
 8000f16:	f000 fd9b 	bl	8001a50 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000f1a:	2008      	movs	r0, #8
 8000f1c:	f7ff ff46 	bl	8000dac <lcd_send_cmd>
	HAL_Delay(1);
 8000f20:	2001      	movs	r0, #1
 8000f22:	f000 fd95 	bl	8001a50 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000f26:	2001      	movs	r0, #1
 8000f28:	f7ff ff40 	bl	8000dac <lcd_send_cmd>
	HAL_Delay(1);
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	f000 fd8f 	bl	8001a50 <HAL_Delay>
	HAL_Delay(1);
 8000f32:	2001      	movs	r0, #1
 8000f34:	f000 fd8c 	bl	8001a50 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000f38:	2006      	movs	r0, #6
 8000f3a:	f7ff ff37 	bl	8000dac <lcd_send_cmd>
	HAL_Delay(1);
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f000 fd86 	bl	8001a50 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000f44:	200c      	movs	r0, #12
 8000f46:	f7ff ff31 	bl	8000dac <lcd_send_cmd>
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000f56:	e006      	b.n	8000f66 <lcd_send_string+0x18>
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	1c5a      	adds	r2, r3, #1
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff ff53 	bl	8000e0c <lcd_send_data>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d1f4      	bne.n	8000f58 <lcd_send_string+0xa>
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
	...

08000f78 <DWT_Delay_us>:
/**
 * @brief  This function provides a delay (in microseconds)
 * @param  microseconds: delay in microseconds
 */
__STATIC_INLINE void DWT_Delay_us(volatile uint32_t microseconds)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b084      	sub	sp, #16
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
  uint32_t clk_cycle_start = DWT->CYCCNT;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <DWT_Delay_us+0x3c>)
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	60fb      	str	r3, [r7, #12]

  /* Go to number of cycles for system */
  microseconds *= (HAL_RCC_GetHCLKFreq() / 1000000);
 8000f86:	f002 ff5b 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8000f8a:	4602      	mov	r2, r0
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <DWT_Delay_us+0x40>)
 8000f8e:	fba3 2302 	umull	r2, r3, r3, r2
 8000f92:	0c9b      	lsrs	r3, r3, #18
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	fb02 f303 	mul.w	r3, r2, r3
 8000f9a:	607b      	str	r3, [r7, #4]

  /* Delay till end */
  while ((DWT->CYCCNT - clk_cycle_start) < microseconds);
 8000f9c:	bf00      	nop
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <DWT_Delay_us+0x3c>)
 8000fa0:	685a      	ldr	r2, [r3, #4]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	1ad2      	subs	r2, r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d3f8      	bcc.n	8000f9e <DWT_Delay_us+0x26>
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	e0001000 	.word	0xe0001000
 8000fb8:	431bde83 	.word	0x431bde83

08000fbc <Read_HCSR04>:
static void MX_TIM2_Init(void);
/* USER CODE BEGIN PFP */


uint32_t Read_HCSR04()
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
	uint32_t local_time=0;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);// Trig Pin set
 8000fc6:	2201      	movs	r2, #1
 8000fc8:	2102      	movs	r1, #2
 8000fca:	4813      	ldr	r0, [pc, #76]	; (8001018 <Read_HCSR04+0x5c>)
 8000fcc:	f001 fe8c 	bl	8002ce8 <HAL_GPIO_WritePin>
	DWT_Delay_us(10);
 8000fd0:	200a      	movs	r0, #10
 8000fd2:	f7ff ffd1 	bl	8000f78 <DWT_Delay_us>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);// Finish Trig Pin reset
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2102      	movs	r1, #2
 8000fda:	480f      	ldr	r0, [pc, #60]	; (8001018 <Read_HCSR04+0x5c>)
 8000fdc:	f001 fe84 	bl	8002ce8 <HAL_GPIO_WritePin>

	while(!(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)));
 8000fe0:	bf00      	nop
 8000fe2:	2104      	movs	r1, #4
 8000fe4:	480c      	ldr	r0, [pc, #48]	; (8001018 <Read_HCSR04+0x5c>)
 8000fe6:	f001 fe67 	bl	8002cb8 <HAL_GPIO_ReadPin>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d0f8      	beq.n	8000fe2 <Read_HCSR04+0x26>

	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000ff0:	e005      	b.n	8000ffe <Read_HCSR04+0x42>
	{
		 local_time++;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
		 DWT_Delay_us(1);
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	f7ff ffbd 	bl	8000f78 <DWT_Delay_us>
	while(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2))
 8000ffe:	2104      	movs	r1, #4
 8001000:	4805      	ldr	r0, [pc, #20]	; (8001018 <Read_HCSR04+0x5c>)
 8001002:	f001 fe59 	bl	8002cb8 <HAL_GPIO_ReadPin>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d1f2      	bne.n	8000ff2 <Read_HCSR04+0x36>
	}
	return local_time*2;
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	005b      	lsls	r3, r3, #1
}
 8001010:	4618      	mov	r0, r3
 8001012:	3708      	adds	r7, #8
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40020000 	.word	0x40020000

0800101c <Init_Tx_Can_Config>:

void Init_Tx_Can_Config()
{   // Set Transmit parameters
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
	  pTxHeader.DLC = 8;
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <Init_Tx_Can_Config+0x28>)
 8001022:	2208      	movs	r2, #8
 8001024:	611a      	str	r2, [r3, #16]
	  pTxHeader.IDE = CAN_ID_STD;
 8001026:	4b07      	ldr	r3, [pc, #28]	; (8001044 <Init_Tx_Can_Config+0x28>)
 8001028:	2200      	movs	r2, #0
 800102a:	609a      	str	r2, [r3, #8]
	  pTxHeader.RTR = CAN_RTR_DATA;
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <Init_Tx_Can_Config+0x28>)
 800102e:	2200      	movs	r2, #0
 8001030:	60da      	str	r2, [r3, #12]
	  pTxHeader.StdId = 0x01994;
 8001032:	4b04      	ldr	r3, [pc, #16]	; (8001044 <Init_Tx_Can_Config+0x28>)
 8001034:	f641 1294 	movw	r2, #6548	; 0x1994
 8001038:	601a      	str	r2, [r3, #0]
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000130 	.word	0x20000130

08001048 <Init_Filter_Can_Config>:

void Init_Filter_Can_Config()
{   // Set Filter Parameters
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
	sFilterConfig.FilterActivation =ENABLE;
 800104c:	4b11      	ldr	r3, [pc, #68]	; (8001094 <Init_Filter_Can_Config+0x4c>)
 800104e:	2201      	movs	r2, #1
 8001050:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterBank = 0;
 8001052:	4b10      	ldr	r3, [pc, #64]	; (8001094 <Init_Filter_Can_Config+0x4c>)
 8001054:	2200      	movs	r2, #0
 8001056:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
 8001058:	4b0e      	ldr	r3, [pc, #56]	; (8001094 <Init_Filter_Can_Config+0x4c>)
 800105a:	2200      	movs	r2, #0
 800105c:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0x0299 << 5;
 800105e:	4b0d      	ldr	r3, [pc, #52]	; (8001094 <Init_Filter_Can_Config+0x4c>)
 8001060:	f245 3220 	movw	r2, #21280	; 0x5320
 8001064:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8001066:	4b0b      	ldr	r3, [pc, #44]	; (8001094 <Init_Filter_Can_Config+0x4c>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF;
 800106c:	4b09      	ldr	r3, [pc, #36]	; (8001094 <Init_Filter_Can_Config+0x4c>)
 800106e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001072:	609a      	str	r2, [r3, #8]
	//sFilterConfig.FilterMaskIdHigh = 0x0000;
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8001074:	4b07      	ldr	r3, [pc, #28]	; (8001094 <Init_Filter_Can_Config+0x4c>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800107a:	4b06      	ldr	r3, [pc, #24]	; (8001094 <Init_Filter_Can_Config+0x4c>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <Init_Filter_Can_Config+0x4c>)
 8001082:	2201      	movs	r2, #1
 8001084:	61da      	str	r2, [r3, #28]
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8001086:	4903      	ldr	r1, [pc, #12]	; (8001094 <Init_Filter_Can_Config+0x4c>)
 8001088:	4803      	ldr	r0, [pc, #12]	; (8001098 <Init_Filter_Can_Config+0x50>)
 800108a:	f000 fdff 	bl	8001c8c <HAL_CAN_ConfigFilter>

}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200000b0 	.word	0x200000b0
 8001098:	200001d0 	.word	0x200001d0
 800109c:	00000000 	.word	0x00000000

080010a0 <HAL_TIM_PeriodElapsedCallback>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

//In every 0.1 seconds the TIM2 trigger interrupt
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a0:	b590      	push	{r4, r7, lr}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]

	  sensor_time = Read_HCSR04();
 80010a8:	f7ff ff88 	bl	8000fbc <Read_HCSR04>
 80010ac:	4602      	mov	r2, r0
 80010ae:	4b2e      	ldr	r3, [pc, #184]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010b0:	601a      	str	r2, [r3, #0]

	  mMeasurement_ptr->id =70; // id of the Measurement Message
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2246      	movs	r2, #70	; 0x46
 80010b8:	701a      	strb	r2, [r3, #0]
	  mMaxRange_ptr->id = 80;   // id of MaxRange Message
 80010ba:	4b2d      	ldr	r3, [pc, #180]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2250      	movs	r2, #80	; 0x50
 80010c0:	701a      	strb	r2, [r3, #0]
	  mMinRange_ptr->id = 90;   // id of MinRange Message
 80010c2:	4b2c      	ldr	r3, [pc, #176]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	225a      	movs	r2, #90	; 0x5a
 80010c8:	701a      	strb	r2, [r3, #0]

	  mMeasurement_ptr->data = sensor_time * .034/2;
 80010ca:	4b27      	ldr	r3, [pc, #156]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff fa10 	bl	80004f4 <__aeabi_ui2d>
 80010d4:	a322      	add	r3, pc, #136	; (adr r3, 8001160 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010da:	f7ff fa85 	bl	80005e8 <__aeabi_dmul>
 80010de:	4603      	mov	r3, r0
 80010e0:	460c      	mov	r4, r1
 80010e2:	4618      	mov	r0, r3
 80010e4:	4621      	mov	r1, r4
 80010e6:	f04f 0200 	mov.w	r2, #0
 80010ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010ee:	f7ff fba5 	bl	800083c <__aeabi_ddiv>
 80010f2:	4603      	mov	r3, r0
 80010f4:	460c      	mov	r4, r1
 80010f6:	4619      	mov	r1, r3
 80010f8:	4622      	mov	r2, r4
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 80010fc:	681c      	ldr	r4, [r3, #0]
 80010fe:	4608      	mov	r0, r1
 8001100:	4611      	mov	r1, r2
 8001102:	f7ff fc83 	bl	8000a0c <__aeabi_d2uiz>
 8001106:	4603      	mov	r3, r0
 8001108:	b2db      	uxtb	r3, r3
 800110a:	7063      	strb	r3, [r4, #1]


	  CanTransData[0] = mMeasurement_ptr->id;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	781a      	ldrb	r2, [r3, #0]
 8001112:	4b19      	ldr	r3, [pc, #100]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001114:	701a      	strb	r2, [r3, #0]
	  CanTransData[1] = mMeasurement_ptr->data;
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_TIM_PeriodElapsedCallback+0xcc>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	785a      	ldrb	r2, [r3, #1]
 800111c:	4b16      	ldr	r3, [pc, #88]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800111e:	705a      	strb	r2, [r3, #1]

	  CanTransData[2] = mMaxRange_ptr->id;
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	781a      	ldrb	r2, [r3, #0]
 8001126:	4b14      	ldr	r3, [pc, #80]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001128:	709a      	strb	r2, [r3, #2]
	  CanTransData[3] = mMaxRange_ptr->data;
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	785a      	ldrb	r2, [r3, #1]
 8001130:	4b11      	ldr	r3, [pc, #68]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001132:	70da      	strb	r2, [r3, #3]

	  CanTransData[4] = mMinRange_ptr->id;
 8001134:	4b0f      	ldr	r3, [pc, #60]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	781a      	ldrb	r2, [r3, #0]
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800113c:	711a      	strb	r2, [r3, #4]
	  CanTransData[5] = mMinRange_ptr->data;
 800113e:	4b0d      	ldr	r3, [pc, #52]	; (8001174 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	785a      	ldrb	r2, [r3, #1]
 8001144:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8001146:	715a      	strb	r2, [r3, #5]

	  HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, CanTransData, &mTxMailbox);
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <HAL_TIM_PeriodElapsedCallback+0xdc>)
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 800114c:	490c      	ldr	r1, [pc, #48]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800114e:	480d      	ldr	r0, [pc, #52]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8001150:	f000 fec0 	bl	8001ed4 <HAL_CAN_AddTxMessage>

}
 8001154:	bf00      	nop
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	bd90      	pop	{r4, r7, pc}
 800115c:	f3af 8000 	nop.w
 8001160:	b020c49c 	.word	0xb020c49c
 8001164:	3fa16872 	.word	0x3fa16872
 8001168:	200000d8 	.word	0x200000d8
 800116c:	20000000 	.word	0x20000000
 8001170:	20000004 	.word	0x20000004
 8001174:	20000008 	.word	0x20000008
 8001178:	200001fc 	.word	0x200001fc
 800117c:	20000148 	.word	0x20000148
 8001180:	20000130 	.word	0x20000130
 8001184:	200001d0 	.word	0x200001d0

08001188 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b082      	sub	sp, #8
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800118e:	f000 fbed 	bl	800196c <HAL_Init>

  /* USER CODE BEGIN Init */
  DWT_Delay_Init();
 8001192:	f7ff fddb 	bl	8000d4c <DWT_Delay_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001196:	f000 f85b 	bl	8001250 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119a:	f000 f973 	bl	8001484 <MX_GPIO_Init>
  MX_CAN1_Init();
 800119e:	f000 f8c1 	bl	8001324 <MX_CAN1_Init>
  MX_I2C2_Init();
 80011a2:	f000 f8f5 	bl	8001390 <MX_I2C2_Init>
  MX_TIM2_Init();
 80011a6:	f000 f921 	bl	80013ec <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80011aa:	2102      	movs	r1, #2
 80011ac:	4821      	ldr	r0, [pc, #132]	; (8001234 <main+0xac>)
 80011ae:	f001 f87e 	bl	80022ae <HAL_CAN_ActivateNotification>

  lcd_init();
 80011b2:	f7ff fe8f 	bl	8000ed4 <lcd_init>
  lcd_clear();
 80011b6:	f7ff fe59 	bl	8000e6c <lcd_clear>
  lcd_put_cur(0, 0);
 80011ba:	2100      	movs	r1, #0
 80011bc:	2000      	movs	r0, #0
 80011be:	f7ff fe6b 	bl	8000e98 <lcd_put_cur>
  lcd_send_string("MaxMinRangeCon");
 80011c2:	481d      	ldr	r0, [pc, #116]	; (8001238 <main+0xb0>)
 80011c4:	f7ff fec3 	bl	8000f4e <lcd_send_string>
  HAL_Delay(2000);
 80011c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80011cc:	f000 fc40 	bl	8001a50 <HAL_Delay>

  //CAN BUS CONFIG
  Init_Tx_Can_Config();
 80011d0:	f7ff ff24 	bl	800101c <Init_Tx_Can_Config>
  Init_Filter_Can_Config();
 80011d4:	f7ff ff38 	bl	8001048 <Init_Filter_Can_Config>
  HAL_CAN_Start(&hcan1);
 80011d8:	4816      	ldr	r0, [pc, #88]	; (8001234 <main+0xac>)
 80011da:	f000 fe37 	bl	8001e4c <HAL_CAN_Start>

  // Start Timer2 for counter 0.05 sn
  HAL_TIM_Base_Start_IT(&htim2);
 80011de:	4817      	ldr	r0, [pc, #92]	; (800123c <main+0xb4>)
 80011e0:	f002 fe79 	bl	8003ed6 <HAL_TIM_Base_Start_IT>
	 HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, distance, &mTxMailbox);
	 HAL_Delay(100);
*/


      mMotorSpeed.id  = CanReceiveData[0];
 80011e4:	4b16      	ldr	r3, [pc, #88]	; (8001240 <main+0xb8>)
 80011e6:	781b      	ldrb	r3, [r3, #0]
 80011e8:	713b      	strb	r3, [r7, #4]
	  mMotorSpeed.data = CanReceiveData[1];
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <main+0xb8>)
 80011ec:	785b      	ldrb	r3, [r3, #1]
 80011ee:	717b      	strb	r3, [r7, #5]

	  lcd_clear();
 80011f0:	f7ff fe3c 	bl	8000e6c <lcd_clear>
	  lcd_put_cur(0, 1);
 80011f4:	2101      	movs	r1, #1
 80011f6:	2000      	movs	r0, #0
 80011f8:	f7ff fe4e 	bl	8000e98 <lcd_put_cur>
	  sprintf(buf,"id: %d",mMotorSpeed.id);
 80011fc:	793b      	ldrb	r3, [r7, #4]
 80011fe:	461a      	mov	r2, r3
 8001200:	4910      	ldr	r1, [pc, #64]	; (8001244 <main+0xbc>)
 8001202:	4811      	ldr	r0, [pc, #68]	; (8001248 <main+0xc0>)
 8001204:	f003 fa6e 	bl	80046e4 <siprintf>
	  lcd_send_string(buf);
 8001208:	480f      	ldr	r0, [pc, #60]	; (8001248 <main+0xc0>)
 800120a:	f7ff fea0 	bl	8000f4e <lcd_send_string>
	  lcd_put_cur(1, 1);
 800120e:	2101      	movs	r1, #1
 8001210:	2001      	movs	r0, #1
 8001212:	f7ff fe41 	bl	8000e98 <lcd_put_cur>
	  sprintf(buf,"Speed: %d",mMotorSpeed.data);
 8001216:	797b      	ldrb	r3, [r7, #5]
 8001218:	461a      	mov	r2, r3
 800121a:	490c      	ldr	r1, [pc, #48]	; (800124c <main+0xc4>)
 800121c:	480a      	ldr	r0, [pc, #40]	; (8001248 <main+0xc0>)
 800121e:	f003 fa61 	bl	80046e4 <siprintf>
	  lcd_send_string(buf);
 8001222:	4809      	ldr	r0, [pc, #36]	; (8001248 <main+0xc0>)
 8001224:	f7ff fe93 	bl	8000f4e <lcd_send_string>
	  HAL_Delay(1000);
 8001228:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800122c:	f000 fc10 	bl	8001a50 <HAL_Delay>
  {
 8001230:	e7d8      	b.n	80011e4 <main+0x5c>
 8001232:	bf00      	nop
 8001234:	200001d0 	.word	0x200001d0
 8001238:	08004f08 	.word	0x08004f08
 800123c:	20000174 	.word	0x20000174
 8001240:	200001f8 	.word	0x200001f8
 8001244:	08004f18 	.word	0x08004f18
 8001248:	2000014c 	.word	0x2000014c
 800124c:	08004f20 	.word	0x08004f20

08001250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b094      	sub	sp, #80	; 0x50
 8001254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001256:	f107 0320 	add.w	r3, r7, #32
 800125a:	2230      	movs	r2, #48	; 0x30
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f003 fa38 	bl	80046d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001264:	f107 030c 	add.w	r3, r7, #12
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	4b28      	ldr	r3, [pc, #160]	; (800131c <SystemClock_Config+0xcc>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	4a27      	ldr	r2, [pc, #156]	; (800131c <SystemClock_Config+0xcc>)
 800127e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001282:	6413      	str	r3, [r2, #64]	; 0x40
 8001284:	4b25      	ldr	r3, [pc, #148]	; (800131c <SystemClock_Config+0xcc>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800128c:	60bb      	str	r3, [r7, #8]
 800128e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001290:	2300      	movs	r3, #0
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	4b22      	ldr	r3, [pc, #136]	; (8001320 <SystemClock_Config+0xd0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a21      	ldr	r2, [pc, #132]	; (8001320 <SystemClock_Config+0xd0>)
 800129a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b1f      	ldr	r3, [pc, #124]	; (8001320 <SystemClock_Config+0xd0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a8:	607b      	str	r3, [r7, #4]
 80012aa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ac:	2302      	movs	r3, #2
 80012ae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b0:	2301      	movs	r3, #1
 80012b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b4:	2310      	movs	r3, #16
 80012b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012b8:	2302      	movs	r3, #2
 80012ba:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012bc:	2300      	movs	r3, #0
 80012be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012c0:	2308      	movs	r3, #8
 80012c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80012c4:	23a8      	movs	r3, #168	; 0xa8
 80012c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012c8:	2302      	movs	r3, #2
 80012ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012cc:	2304      	movs	r3, #4
 80012ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	4618      	mov	r0, r3
 80012d6:	f002 f985 	bl	80035e4 <HAL_RCC_OscConfig>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012e0:	f000 f94c 	bl	800157c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012e4:	230f      	movs	r3, #15
 80012e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012e8:	2302      	movs	r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012f0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012f4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012fa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2105      	movs	r1, #5
 8001302:	4618      	mov	r0, r3
 8001304:	f002 fbde 	bl	8003ac4 <HAL_RCC_ClockConfig>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800130e:	f000 f935 	bl	800157c <Error_Handler>
  }
}
 8001312:	bf00      	nop
 8001314:	3750      	adds	r7, #80	; 0x50
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	40023800 	.word	0x40023800
 8001320:	40007000 	.word	0x40007000

08001324 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001328:	4b17      	ldr	r3, [pc, #92]	; (8001388 <MX_CAN1_Init+0x64>)
 800132a:	4a18      	ldr	r2, [pc, #96]	; (800138c <MX_CAN1_Init+0x68>)
 800132c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 800132e:	4b16      	ldr	r3, [pc, #88]	; (8001388 <MX_CAN1_Init+0x64>)
 8001330:	2215      	movs	r2, #21
 8001332:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001334:	4b14      	ldr	r3, [pc, #80]	; (8001388 <MX_CAN1_Init+0x64>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800133a:	4b13      	ldr	r3, [pc, #76]	; (8001388 <MX_CAN1_Init+0x64>)
 800133c:	2200      	movs	r2, #0
 800133e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8001340:	4b11      	ldr	r3, [pc, #68]	; (8001388 <MX_CAN1_Init+0x64>)
 8001342:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8001346:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8001348:	4b0f      	ldr	r3, [pc, #60]	; (8001388 <MX_CAN1_Init+0x64>)
 800134a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800134e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001350:	4b0d      	ldr	r3, [pc, #52]	; (8001388 <MX_CAN1_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8001356:	4b0c      	ldr	r3, [pc, #48]	; (8001388 <MX_CAN1_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800135c:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <MX_CAN1_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001362:	4b09      	ldr	r3, [pc, #36]	; (8001388 <MX_CAN1_Init+0x64>)
 8001364:	2200      	movs	r2, #0
 8001366:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001368:	4b07      	ldr	r3, [pc, #28]	; (8001388 <MX_CAN1_Init+0x64>)
 800136a:	2200      	movs	r2, #0
 800136c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800136e:	4b06      	ldr	r3, [pc, #24]	; (8001388 <MX_CAN1_Init+0x64>)
 8001370:	2200      	movs	r2, #0
 8001372:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001374:	4804      	ldr	r0, [pc, #16]	; (8001388 <MX_CAN1_Init+0x64>)
 8001376:	f000 fb8d 	bl	8001a94 <HAL_CAN_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8001380:	f000 f8fc 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001384:	bf00      	nop
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200001d0 	.word	0x200001d0
 800138c:	40006400 	.word	0x40006400

08001390 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001394:	4b12      	ldr	r3, [pc, #72]	; (80013e0 <MX_I2C2_Init+0x50>)
 8001396:	4a13      	ldr	r2, [pc, #76]	; (80013e4 <MX_I2C2_Init+0x54>)
 8001398:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800139a:	4b11      	ldr	r3, [pc, #68]	; (80013e0 <MX_I2C2_Init+0x50>)
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <MX_I2C2_Init+0x58>)
 800139e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80013a0:	4b0f      	ldr	r3, [pc, #60]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013ac:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80013b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80013b4:	4b0a      	ldr	r3, [pc, #40]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80013c0:	4b07      	ldr	r3, [pc, #28]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80013cc:	4804      	ldr	r0, [pc, #16]	; (80013e0 <MX_I2C2_Init+0x50>)
 80013ce:	f001 fcc9 	bl	8002d64 <HAL_I2C_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80013d8:	f000 f8d0 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	200000dc 	.word	0x200000dc
 80013e4:	40005800 	.word	0x40005800
 80013e8:	000186a0 	.word	0x000186a0

080013ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0308 	add.w	r3, r7, #8
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	463b      	mov	r3, r7
 8001402:	2200      	movs	r2, #0
 8001404:	601a      	str	r2, [r3, #0]
 8001406:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001408:	4b1d      	ldr	r3, [pc, #116]	; (8001480 <MX_TIM2_Init+0x94>)
 800140a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800140e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 41999;
 8001410:	4b1b      	ldr	r3, [pc, #108]	; (8001480 <MX_TIM2_Init+0x94>)
 8001412:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001416:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001418:	4b19      	ldr	r3, [pc, #100]	; (8001480 <MX_TIM2_Init+0x94>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 199;
 800141e:	4b18      	ldr	r3, [pc, #96]	; (8001480 <MX_TIM2_Init+0x94>)
 8001420:	22c7      	movs	r2, #199	; 0xc7
 8001422:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001424:	4b16      	ldr	r3, [pc, #88]	; (8001480 <MX_TIM2_Init+0x94>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800142a:	4b15      	ldr	r3, [pc, #84]	; (8001480 <MX_TIM2_Init+0x94>)
 800142c:	2200      	movs	r2, #0
 800142e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001430:	4813      	ldr	r0, [pc, #76]	; (8001480 <MX_TIM2_Init+0x94>)
 8001432:	f002 fd25 	bl	8003e80 <HAL_TIM_Base_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800143c:	f000 f89e 	bl	800157c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001440:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001444:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001446:	f107 0308 	add.w	r3, r7, #8
 800144a:	4619      	mov	r1, r3
 800144c:	480c      	ldr	r0, [pc, #48]	; (8001480 <MX_TIM2_Init+0x94>)
 800144e:	f002 fe6e 	bl	800412e <HAL_TIM_ConfigClockSource>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001458:	f000 f890 	bl	800157c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	; (8001480 <MX_TIM2_Init+0x94>)
 800146a:	f003 f879 	bl	8004560 <HAL_TIMEx_MasterConfigSynchronization>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001474:	f000 f882 	bl	800157c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000174 	.word	0x20000174

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b34      	ldr	r3, [pc, #208]	; (8001570 <MX_GPIO_Init+0xec>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a33      	ldr	r2, [pc, #204]	; (8001570 <MX_GPIO_Init+0xec>)
 80014a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b31      	ldr	r3, [pc, #196]	; (8001570 <MX_GPIO_Init+0xec>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b2d      	ldr	r3, [pc, #180]	; (8001570 <MX_GPIO_Init+0xec>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a2c      	ldr	r2, [pc, #176]	; (8001570 <MX_GPIO_Init+0xec>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b2a      	ldr	r3, [pc, #168]	; (8001570 <MX_GPIO_Init+0xec>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b26      	ldr	r3, [pc, #152]	; (8001570 <MX_GPIO_Init+0xec>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a25      	ldr	r2, [pc, #148]	; (8001570 <MX_GPIO_Init+0xec>)
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <MX_GPIO_Init+0xec>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0302 	and.w	r3, r3, #2
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	2102      	movs	r1, #2
 80014f2:	4820      	ldr	r0, [pc, #128]	; (8001574 <MX_GPIO_Init+0xf0>)
 80014f4:	f001 fbf8 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_9;
 80014f8:	f240 2301 	movw	r3, #513	; 0x201
 80014fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014fe:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <MX_GPIO_Init+0xf4>)
 8001500:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	2300      	movs	r3, #0
 8001504:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	4619      	mov	r1, r3
 800150c:	4819      	ldr	r0, [pc, #100]	; (8001574 <MX_GPIO_Init+0xf0>)
 800150e:	f001 fa39 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001512:	2302      	movs	r3, #2
 8001514:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001516:	2301      	movs	r3, #1
 8001518:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151e:	2300      	movs	r3, #0
 8001520:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	4619      	mov	r1, r3
 8001528:	4812      	ldr	r0, [pc, #72]	; (8001574 <MX_GPIO_Init+0xf0>)
 800152a:	f001 fa2b 	bl	8002984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800152e:	2304      	movs	r3, #4
 8001530:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153a:	f107 030c 	add.w	r3, r7, #12
 800153e:	4619      	mov	r1, r3
 8001540:	480c      	ldr	r0, [pc, #48]	; (8001574 <MX_GPIO_Init+0xf0>)
 8001542:	f001 fa1f 	bl	8002984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8001546:	2200      	movs	r2, #0
 8001548:	2102      	movs	r1, #2
 800154a:	2006      	movs	r0, #6
 800154c:	f001 f9e3 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001550:	2006      	movs	r0, #6
 8001552:	f001 f9fc 	bl	800294e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 3, 0);
 8001556:	2200      	movs	r2, #0
 8001558:	2103      	movs	r1, #3
 800155a:	2017      	movs	r0, #23
 800155c:	f001 f9db 	bl	8002916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001560:	2017      	movs	r0, #23
 8001562:	f001 f9f4 	bl	800294e <HAL_NVIC_EnableIRQ>

}
 8001566:	bf00      	nop
 8001568:	3720      	adds	r7, #32
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40023800 	.word	0x40023800
 8001574:	40020000 	.word	0x40020000
 8001578:	10110000 	.word	0x10110000

0800157c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001580:	bf00      	nop
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	607b      	str	r3, [r7, #4]
 8001596:	4b10      	ldr	r3, [pc, #64]	; (80015d8 <HAL_MspInit+0x4c>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a0f      	ldr	r2, [pc, #60]	; (80015d8 <HAL_MspInit+0x4c>)
 800159c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b0d      	ldr	r3, [pc, #52]	; (80015d8 <HAL_MspInit+0x4c>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015aa:	607b      	str	r3, [r7, #4]
 80015ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	603b      	str	r3, [r7, #0]
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_MspInit+0x4c>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	6413      	str	r3, [r2, #64]	; 0x40
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_MspInit+0x4c>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40023800 	.word	0x40023800

080015dc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a1d      	ldr	r2, [pc, #116]	; (8001670 <HAL_CAN_MspInit+0x94>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d134      	bne.n	8001668 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	613b      	str	r3, [r7, #16]
 8001602:	4b1c      	ldr	r3, [pc, #112]	; (8001674 <HAL_CAN_MspInit+0x98>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	4a1b      	ldr	r2, [pc, #108]	; (8001674 <HAL_CAN_MspInit+0x98>)
 8001608:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800160c:	6413      	str	r3, [r2, #64]	; 0x40
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <HAL_CAN_MspInit+0x98>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	4b15      	ldr	r3, [pc, #84]	; (8001674 <HAL_CAN_MspInit+0x98>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a14      	ldr	r2, [pc, #80]	; (8001674 <HAL_CAN_MspInit+0x98>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b12      	ldr	r3, [pc, #72]	; (8001674 <HAL_CAN_MspInit+0x98>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001636:	f44f 7340 	mov.w	r3, #768	; 0x300
 800163a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001648:	2309      	movs	r3, #9
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4619      	mov	r1, r3
 8001652:	4809      	ldr	r0, [pc, #36]	; (8001678 <HAL_CAN_MspInit+0x9c>)
 8001654:	f001 f996 	bl	8002984 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 1, 0);
 8001658:	2200      	movs	r2, #0
 800165a:	2101      	movs	r1, #1
 800165c:	2014      	movs	r0, #20
 800165e:	f001 f95a 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001662:	2014      	movs	r0, #20
 8001664:	f001 f973 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001668:	bf00      	nop
 800166a:	3728      	adds	r7, #40	; 0x28
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40006400 	.word	0x40006400
 8001674:	40023800 	.word	0x40023800
 8001678:	40020400 	.word	0x40020400

0800167c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b08a      	sub	sp, #40	; 0x28
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	2200      	movs	r2, #0
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	605a      	str	r2, [r3, #4]
 800168e:	609a      	str	r2, [r3, #8]
 8001690:	60da      	str	r2, [r3, #12]
 8001692:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <HAL_I2C_MspInit+0x84>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d12c      	bne.n	80016f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
 80016a2:	4b18      	ldr	r3, [pc, #96]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6313      	str	r3, [r2, #48]	; 0x30
 80016ae:	4b15      	ldr	r3, [pc, #84]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	613b      	str	r3, [r7, #16]
 80016b8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80016ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80016be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016c0:	2312      	movs	r3, #18
 80016c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c8:	2303      	movs	r3, #3
 80016ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80016cc:	2304      	movs	r3, #4
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d0:	f107 0314 	add.w	r3, r7, #20
 80016d4:	4619      	mov	r1, r3
 80016d6:	480c      	ldr	r0, [pc, #48]	; (8001708 <HAL_I2C_MspInit+0x8c>)
 80016d8:	f001 f954 	bl	8002984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80016dc:	2300      	movs	r3, #0
 80016de:	60fb      	str	r3, [r7, #12]
 80016e0:	4b08      	ldr	r3, [pc, #32]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e4:	4a07      	ldr	r2, [pc, #28]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016e6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016ea:	6413      	str	r3, [r2, #64]	; 0x40
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_I2C_MspInit+0x88>)
 80016ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80016f8:	bf00      	nop
 80016fa:	3728      	adds	r7, #40	; 0x28
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40005800 	.word	0x40005800
 8001704:	40023800 	.word	0x40023800
 8001708:	40020400 	.word	0x40020400

0800170c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800171c:	d115      	bne.n	800174a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b0c      	ldr	r3, [pc, #48]	; (8001754 <HAL_TIM_Base_MspInit+0x48>)
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	4a0b      	ldr	r2, [pc, #44]	; (8001754 <HAL_TIM_Base_MspInit+0x48>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6413      	str	r3, [r2, #64]	; 0x40
 800172e:	4b09      	ldr	r3, [pc, #36]	; (8001754 <HAL_TIM_Base_MspInit+0x48>)
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	2100      	movs	r1, #0
 800173e:	201c      	movs	r0, #28
 8001740:	f001 f8e9 	bl	8002916 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001744:	201c      	movs	r0, #28
 8001746:	f001 f902 	bl	800294e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	40023800 	.word	0x40023800

08001758 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800176a:	e7fe      	b.n	800176a <HardFault_Handler+0x4>

0800176c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001770:	e7fe      	b.n	8001770 <MemManage_Handler+0x4>

08001772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001776:	e7fe      	b.n	8001776 <BusFault_Handler+0x4>

08001778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800177c:	e7fe      	b.n	800177c <UsageFault_Handler+0x4>

0800177e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800177e:	b480      	push	{r7}
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001782:	bf00      	nop
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001790:	bf00      	nop
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr

0800179a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800179e:	bf00      	nop
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr

080017a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ac:	f000 f930 	bl	8001a10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80017ba:	2001      	movs	r0, #1
 80017bc:	f001 faae 	bl	8002d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  while(HAL_GPIO_ReadPin(GPIOA, MaxButton));
 80017c0:	bf00      	nop
 80017c2:	2101      	movs	r1, #1
 80017c4:	480c      	ldr	r0, [pc, #48]	; (80017f8 <EXTI0_IRQHandler+0x44>)
 80017c6:	f001 fa77 	bl	8002cb8 <HAL_GPIO_ReadPin>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d1f8      	bne.n	80017c2 <EXTI0_IRQHandler+0xe>
  for(int i=0; i<10000000;i++);
 80017d0:	2300      	movs	r3, #0
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	e002      	b.n	80017dc <EXTI0_IRQHandler+0x28>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	3301      	adds	r3, #1
 80017da:	607b      	str	r3, [r7, #4]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	4a07      	ldr	r2, [pc, #28]	; (80017fc <EXTI0_IRQHandler+0x48>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	ddf8      	ble.n	80017d6 <EXTI0_IRQHandler+0x22>
  mMaxRange_ptr->data++;
 80017e4:	4b06      	ldr	r3, [pc, #24]	; (8001800 <EXTI0_IRQHandler+0x4c>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	785a      	ldrb	r2, [r3, #1]
 80017ea:	3201      	adds	r2, #1
 80017ec:	b2d2      	uxtb	r2, r2
 80017ee:	705a      	strb	r2, [r3, #1]
  /* USER CODE END EXTI0_IRQn 1 */
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	40020000 	.word	0x40020000
 80017fc:	0098967f 	.word	0x0098967f
 8001800:	20000004 	.word	0x20000004

08001804 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001808:	4805      	ldr	r0, [pc, #20]	; (8001820 <CAN1_RX0_IRQHandler+0x1c>)
 800180a:	f000 fd76 	bl	80022fa <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
   HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, CanReceiveData);
 800180e:	4b05      	ldr	r3, [pc, #20]	; (8001824 <CAN1_RX0_IRQHandler+0x20>)
 8001810:	4a05      	ldr	r2, [pc, #20]	; (8001828 <CAN1_RX0_IRQHandler+0x24>)
 8001812:	2100      	movs	r1, #0
 8001814:	4802      	ldr	r0, [pc, #8]	; (8001820 <CAN1_RX0_IRQHandler+0x1c>)
 8001816:	f000 fc38 	bl	800208a <HAL_CAN_GetRxMessage>
  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	200001d0 	.word	0x200001d0
 8001824:	200001f8 	.word	0x200001f8
 8001828:	200001b4 	.word	0x200001b4

0800182c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8001832:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001836:	f001 fa71 	bl	8002d1c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  while(HAL_GPIO_ReadPin(GPIOA, MinButton));
 800183a:	bf00      	nop
 800183c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001840:	480c      	ldr	r0, [pc, #48]	; (8001874 <EXTI9_5_IRQHandler+0x48>)
 8001842:	f001 fa39 	bl	8002cb8 <HAL_GPIO_ReadPin>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d1f7      	bne.n	800183c <EXTI9_5_IRQHandler+0x10>
  for(int i=0; i<10000000;i++);
 800184c:	2300      	movs	r3, #0
 800184e:	607b      	str	r3, [r7, #4]
 8001850:	e002      	b.n	8001858 <EXTI9_5_IRQHandler+0x2c>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	3301      	adds	r3, #1
 8001856:	607b      	str	r3, [r7, #4]
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	4a07      	ldr	r2, [pc, #28]	; (8001878 <EXTI9_5_IRQHandler+0x4c>)
 800185c:	4293      	cmp	r3, r2
 800185e:	ddf8      	ble.n	8001852 <EXTI9_5_IRQHandler+0x26>
  mMinRange_ptr->data++;
 8001860:	4b06      	ldr	r3, [pc, #24]	; (800187c <EXTI9_5_IRQHandler+0x50>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	785a      	ldrb	r2, [r3, #1]
 8001866:	3201      	adds	r2, #1
 8001868:	b2d2      	uxtb	r2, r2
 800186a:	705a      	strb	r2, [r3, #1]
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800186c:	bf00      	nop
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40020000 	.word	0x40020000
 8001878:	0098967f 	.word	0x0098967f
 800187c:	20000008 	.word	0x20000008

08001880 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001884:	4802      	ldr	r0, [pc, #8]	; (8001890 <TIM2_IRQHandler+0x10>)
 8001886:	f002 fb4a 	bl	8003f1e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000174 	.word	0x20000174

08001894 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <_sbrk+0x50>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d102      	bne.n	80018aa <_sbrk+0x16>
		heap_end = &end;
 80018a4:	4b0f      	ldr	r3, [pc, #60]	; (80018e4 <_sbrk+0x50>)
 80018a6:	4a10      	ldr	r2, [pc, #64]	; (80018e8 <_sbrk+0x54>)
 80018a8:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80018aa:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <_sbrk+0x50>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80018b0:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <_sbrk+0x50>)
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4413      	add	r3, r2
 80018b8:	466a      	mov	r2, sp
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d907      	bls.n	80018ce <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80018be:	f002 fedf 	bl	8004680 <__errno>
 80018c2:	4602      	mov	r2, r0
 80018c4:	230c      	movs	r3, #12
 80018c6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80018c8:	f04f 33ff 	mov.w	r3, #4294967295
 80018cc:	e006      	b.n	80018dc <_sbrk+0x48>
	}

	heap_end += incr;
 80018ce:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <_sbrk+0x50>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	4a03      	ldr	r2, [pc, #12]	; (80018e4 <_sbrk+0x50>)
 80018d8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	200000a4 	.word	0x200000a4
 80018e8:	20000210 	.word	0x20000210

080018ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <SystemInit+0x28>)
 80018f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f6:	4a07      	ldr	r2, [pc, #28]	; (8001914 <SystemInit+0x28>)
 80018f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001900:	4b04      	ldr	r3, [pc, #16]	; (8001914 <SystemInit+0x28>)
 8001902:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001906:	609a      	str	r2, [r3, #8]
#endif
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	e000ed00 	.word	0xe000ed00

08001918 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001918:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001950 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800191c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800191e:	e003      	b.n	8001928 <LoopCopyDataInit>

08001920 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001922:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001924:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001926:	3104      	adds	r1, #4

08001928 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001928:	480b      	ldr	r0, [pc, #44]	; (8001958 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800192c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800192e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001930:	d3f6      	bcc.n	8001920 <CopyDataInit>
  ldr  r2, =_sbss
 8001932:	4a0b      	ldr	r2, [pc, #44]	; (8001960 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001934:	e002      	b.n	800193c <LoopFillZerobss>

08001936 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001936:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001938:	f842 3b04 	str.w	r3, [r2], #4

0800193c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800193c:	4b09      	ldr	r3, [pc, #36]	; (8001964 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800193e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001940:	d3f9      	bcc.n	8001936 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001942:	f7ff ffd3 	bl	80018ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001946:	f002 fea1 	bl	800468c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800194a:	f7ff fc1d 	bl	8001188 <main>
  bx  lr    
 800194e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001950:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001954:	08004f88 	.word	0x08004f88
  ldr  r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800195c:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8001960:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 8001964:	2000020c 	.word	0x2000020c

08001968 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001968:	e7fe      	b.n	8001968 <ADC_IRQHandler>
	...

0800196c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001970:	4b0e      	ldr	r3, [pc, #56]	; (80019ac <HAL_Init+0x40>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a0d      	ldr	r2, [pc, #52]	; (80019ac <HAL_Init+0x40>)
 8001976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800197a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <HAL_Init+0x40>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0a      	ldr	r2, [pc, #40]	; (80019ac <HAL_Init+0x40>)
 8001982:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001986:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001988:	4b08      	ldr	r3, [pc, #32]	; (80019ac <HAL_Init+0x40>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a07      	ldr	r2, [pc, #28]	; (80019ac <HAL_Init+0x40>)
 800198e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001992:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001994:	2003      	movs	r0, #3
 8001996:	f000 ffb3 	bl	8002900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800199a:	2000      	movs	r0, #0
 800199c:	f000 f808 	bl	80019b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019a0:	f7ff fdf4 	bl	800158c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019a4:	2300      	movs	r3, #0
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	40023c00 	.word	0x40023c00

080019b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b8:	4b12      	ldr	r3, [pc, #72]	; (8001a04 <HAL_InitTick+0x54>)
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	4b12      	ldr	r3, [pc, #72]	; (8001a08 <HAL_InitTick+0x58>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	4619      	mov	r1, r3
 80019c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80019ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 ffcb 	bl	800296a <HAL_SYSTICK_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e00e      	b.n	80019fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2b0f      	cmp	r3, #15
 80019e2:	d80a      	bhi.n	80019fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019e4:	2200      	movs	r2, #0
 80019e6:	6879      	ldr	r1, [r7, #4]
 80019e8:	f04f 30ff 	mov.w	r0, #4294967295
 80019ec:	f000 ff93 	bl	8002916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019f0:	4a06      	ldr	r2, [pc, #24]	; (8001a0c <HAL_InitTick+0x5c>)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019f6:	2300      	movs	r3, #0
 80019f8:	e000      	b.n	80019fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2000000c 	.word	0x2000000c
 8001a08:	20000014 	.word	0x20000014
 8001a0c:	20000010 	.word	0x20000010

08001a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <HAL_IncTick+0x20>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <HAL_IncTick+0x24>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4413      	add	r3, r2
 8001a20:	4a04      	ldr	r2, [pc, #16]	; (8001a34 <HAL_IncTick+0x24>)
 8001a22:	6013      	str	r3, [r2, #0]
}
 8001a24:	bf00      	nop
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
 8001a2e:	bf00      	nop
 8001a30:	20000014 	.word	0x20000014
 8001a34:	20000204 	.word	0x20000204

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000204 	.word	0x20000204

08001a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a58:	f7ff ffee 	bl	8001a38 <HAL_GetTick>
 8001a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a68:	d005      	beq.n	8001a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_Delay+0x40>)
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	4413      	add	r3, r2
 8001a74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a76:	bf00      	nop
 8001a78:	f7ff ffde 	bl	8001a38 <HAL_GetTick>
 8001a7c:	4602      	mov	r2, r0
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	d8f7      	bhi.n	8001a78 <HAL_Delay+0x28>
  {
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3710      	adds	r7, #16
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20000014 	.word	0x20000014

08001a94 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d101      	bne.n	8001aa6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e0ed      	b.n	8001c82 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f7ff fd92 	bl	80015dc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f022 0202 	bic.w	r2, r2, #2
 8001ac6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ac8:	f7ff ffb6 	bl	8001a38 <HAL_GetTick>
 8001acc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001ace:	e012      	b.n	8001af6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ad0:	f7ff ffb2 	bl	8001a38 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	2b0a      	cmp	r3, #10
 8001adc:	d90b      	bls.n	8001af6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2205      	movs	r2, #5
 8001aee:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e0c5      	b.n	8001c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d1e5      	bne.n	8001ad0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f042 0201 	orr.w	r2, r2, #1
 8001b12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b14:	f7ff ff90 	bl	8001a38 <HAL_GetTick>
 8001b18:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b1a:	e012      	b.n	8001b42 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b1c:	f7ff ff8c 	bl	8001a38 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b0a      	cmp	r3, #10
 8001b28:	d90b      	bls.n	8001b42 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2205      	movs	r2, #5
 8001b3a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e09f      	b.n	8001c82 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f003 0301 	and.w	r3, r3, #1
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d0e5      	beq.n	8001b1c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	7e1b      	ldrb	r3, [r3, #24]
 8001b54:	2b01      	cmp	r3, #1
 8001b56:	d108      	bne.n	8001b6a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e007      	b.n	8001b7a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b78:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	7e5b      	ldrb	r3, [r3, #25]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d108      	bne.n	8001b94 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e007      	b.n	8001ba4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ba2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	7e9b      	ldrb	r3, [r3, #26]
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d108      	bne.n	8001bbe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f042 0220 	orr.w	r2, r2, #32
 8001bba:	601a      	str	r2, [r3, #0]
 8001bbc:	e007      	b.n	8001bce <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f022 0220 	bic.w	r2, r2, #32
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	7edb      	ldrb	r3, [r3, #27]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d108      	bne.n	8001be8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0210 	bic.w	r2, r2, #16
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	e007      	b.n	8001bf8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f042 0210 	orr.w	r2, r2, #16
 8001bf6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	7f1b      	ldrb	r3, [r3, #28]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d108      	bne.n	8001c12 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 0208 	orr.w	r2, r2, #8
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	e007      	b.n	8001c22 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f022 0208 	bic.w	r2, r2, #8
 8001c20:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	7f5b      	ldrb	r3, [r3, #29]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d108      	bne.n	8001c3c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 0204 	orr.w	r2, r2, #4
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	e007      	b.n	8001c4c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f022 0204 	bic.w	r2, r2, #4
 8001c4a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	431a      	orrs	r2, r3
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	695b      	ldr	r3, [r3, #20]
 8001c60:	ea42 0103 	orr.w	r1, r2, r3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	1e5a      	subs	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
	...

08001c8c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b087      	sub	sp, #28
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ca2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ca4:	7cfb      	ldrb	r3, [r7, #19]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d003      	beq.n	8001cb2 <HAL_CAN_ConfigFilter+0x26>
 8001caa:	7cfb      	ldrb	r3, [r7, #19]
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	f040 80be 	bne.w	8001e2e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001cb2:	4b65      	ldr	r3, [pc, #404]	; (8001e48 <HAL_CAN_ConfigFilter+0x1bc>)
 8001cb4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ccc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ce0:	021b      	lsls	r3, r3, #8
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 031f 	and.w	r3, r3, #31
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	43db      	mvns	r3, r3
 8001d04:	401a      	ands	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	69db      	ldr	r3, [r3, #28]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d123      	bne.n	8001d5c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	401a      	ands	r2, r3
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	68db      	ldr	r3, [r3, #12]
 8001d2a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d36:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	3248      	adds	r2, #72	; 0x48
 8001d3c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d50:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d52:	6979      	ldr	r1, [r7, #20]
 8001d54:	3348      	adds	r3, #72	; 0x48
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	440b      	add	r3, r1
 8001d5a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	69db      	ldr	r3, [r3, #28]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d122      	bne.n	8001daa <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	431a      	orrs	r2, r3
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d84:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3248      	adds	r2, #72	; 0x48
 8001d8a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d9e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001da0:	6979      	ldr	r1, [r7, #20]
 8001da2:	3348      	adds	r3, #72	; 0x48
 8001da4:	00db      	lsls	r3, r3, #3
 8001da6:	440b      	add	r3, r1
 8001da8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	699b      	ldr	r3, [r3, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d109      	bne.n	8001dc6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	401a      	ands	r2, r3
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001dc4:	e007      	b.n	8001dd6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	431a      	orrs	r2, r3
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	691b      	ldr	r3, [r3, #16]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d109      	bne.n	8001df2 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	401a      	ands	r2, r3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001df0:	e007      	b.n	8001e02 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	431a      	orrs	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d107      	bne.n	8001e1a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	431a      	orrs	r2, r3
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e20:	f023 0201 	bic.w	r2, r3, #1
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	e006      	b.n	8001e3c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e32:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
  }
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	40006400 	.word	0x40006400

08001e4c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	2b01      	cmp	r3, #1
 8001e5e:	d12e      	bne.n	8001ebe <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2202      	movs	r2, #2
 8001e64:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 0201 	bic.w	r2, r2, #1
 8001e76:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e78:	f7ff fdde 	bl	8001a38 <HAL_GetTick>
 8001e7c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e7e:	e012      	b.n	8001ea6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001e80:	f7ff fdda 	bl	8001a38 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	2b0a      	cmp	r3, #10
 8001e8c:	d90b      	bls.n	8001ea6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e92:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2205      	movs	r2, #5
 8001e9e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e012      	b.n	8001ecc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1e5      	bne.n	8001e80 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	e006      	b.n	8001ecc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
  }
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3710      	adds	r7, #16
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}

08001ed4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b089      	sub	sp, #36	; 0x24
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	60f8      	str	r0, [r7, #12]
 8001edc:	60b9      	str	r1, [r7, #8]
 8001ede:	607a      	str	r2, [r7, #4]
 8001ee0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ee8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	689b      	ldr	r3, [r3, #8]
 8001ef0:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001ef2:	7ffb      	ldrb	r3, [r7, #31]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d003      	beq.n	8001f00 <HAL_CAN_AddTxMessage+0x2c>
 8001ef8:	7ffb      	ldrb	r3, [r7, #31]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	f040 80b8 	bne.w	8002070 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d10a      	bne.n	8001f20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d105      	bne.n	8001f20 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	f000 80a0 	beq.w	8002060 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	0e1b      	lsrs	r3, r3, #24
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d907      	bls.n	8001f40 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e09e      	b.n	800207e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f40:	2201      	movs	r2, #1
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	409a      	lsls	r2, r3
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10d      	bne.n	8001f6e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f5c:	68f9      	ldr	r1, [r7, #12]
 8001f5e:	6809      	ldr	r1, [r1, #0]
 8001f60:	431a      	orrs	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	3318      	adds	r3, #24
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	440b      	add	r3, r1
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	e00f      	b.n	8001f8e <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f74:	68bb      	ldr	r3, [r7, #8]
 8001f76:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f78:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f7a:	68bb      	ldr	r3, [r7, #8]
 8001f7c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f7e:	68f9      	ldr	r1, [r7, #12]
 8001f80:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001f82:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	3318      	adds	r3, #24
 8001f88:	011b      	lsls	r3, r3, #4
 8001f8a:	440b      	add	r3, r1
 8001f8c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6819      	ldr	r1, [r3, #0]
 8001f92:	68bb      	ldr	r3, [r7, #8]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3318      	adds	r3, #24
 8001f9a:	011b      	lsls	r3, r3, #4
 8001f9c:	440b      	add	r3, r1
 8001f9e:	3304      	adds	r3, #4
 8001fa0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	7d1b      	ldrb	r3, [r3, #20]
 8001fa6:	2b01      	cmp	r3, #1
 8001fa8:	d111      	bne.n	8001fce <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681a      	ldr	r2, [r3, #0]
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	3318      	adds	r3, #24
 8001fb2:	011b      	lsls	r3, r3, #4
 8001fb4:	4413      	add	r3, r2
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	6811      	ldr	r1, [r2, #0]
 8001fbe:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	3318      	adds	r3, #24
 8001fc6:	011b      	lsls	r3, r3, #4
 8001fc8:	440b      	add	r3, r1
 8001fca:	3304      	adds	r3, #4
 8001fcc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	3307      	adds	r3, #7
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	061a      	lsls	r2, r3, #24
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	3306      	adds	r3, #6
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	041b      	lsls	r3, r3, #16
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3305      	adds	r3, #5
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	021b      	lsls	r3, r3, #8
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	3204      	adds	r2, #4
 8001fee:	7812      	ldrb	r2, [r2, #0]
 8001ff0:	4610      	mov	r0, r2
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	6811      	ldr	r1, [r2, #0]
 8001ff6:	ea43 0200 	orr.w	r2, r3, r0
 8001ffa:	697b      	ldr	r3, [r7, #20]
 8001ffc:	011b      	lsls	r3, r3, #4
 8001ffe:	440b      	add	r3, r1
 8002000:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002004:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3303      	adds	r3, #3
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	061a      	lsls	r2, r3, #24
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	3302      	adds	r3, #2
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	041b      	lsls	r3, r3, #16
 8002016:	431a      	orrs	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3301      	adds	r3, #1
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	4313      	orrs	r3, r2
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	7812      	ldrb	r2, [r2, #0]
 8002026:	4610      	mov	r0, r2
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	6811      	ldr	r1, [r2, #0]
 800202c:	ea43 0200 	orr.w	r2, r3, r0
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	440b      	add	r3, r1
 8002036:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800203a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	3318      	adds	r3, #24
 8002044:	011b      	lsls	r3, r3, #4
 8002046:	4413      	add	r3, r2
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68fa      	ldr	r2, [r7, #12]
 800204c:	6811      	ldr	r1, [r2, #0]
 800204e:	f043 0201 	orr.w	r2, r3, #1
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	3318      	adds	r3, #24
 8002056:	011b      	lsls	r3, r3, #4
 8002058:	440b      	add	r3, r1
 800205a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800205c:	2300      	movs	r3, #0
 800205e:	e00e      	b.n	800207e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002064:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800206c:	2301      	movs	r3, #1
 800206e:	e006      	b.n	800207e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002074:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
  }
}
 800207e:	4618      	mov	r0, r3
 8002080:	3724      	adds	r7, #36	; 0x24
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr

0800208a <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800208a:	b480      	push	{r7}
 800208c:	b087      	sub	sp, #28
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
 8002096:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800209e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020a0:	7dfb      	ldrb	r3, [r7, #23]
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d003      	beq.n	80020ae <HAL_CAN_GetRxMessage+0x24>
 80020a6:	7dfb      	ldrb	r3, [r7, #23]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	f040 80f3 	bne.w	8002294 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10e      	bne.n	80020d2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d116      	bne.n	80020f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e0e7      	b.n	80022a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d107      	bne.n	80020f0 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020ec:	2301      	movs	r3, #1
 80020ee:	e0d8      	b.n	80022a2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68bb      	ldr	r3, [r7, #8]
 80020f6:	331b      	adds	r3, #27
 80020f8:	011b      	lsls	r3, r3, #4
 80020fa:	4413      	add	r3, r2
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0204 	and.w	r2, r3, #4
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d10c      	bne.n	8002128 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	331b      	adds	r3, #27
 8002116:	011b      	lsls	r3, r3, #4
 8002118:	4413      	add	r3, r2
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	0d5b      	lsrs	r3, r3, #21
 800211e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	e00b      	b.n	8002140 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	331b      	adds	r3, #27
 8002130:	011b      	lsls	r3, r3, #4
 8002132:	4413      	add	r3, r2
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	08db      	lsrs	r3, r3, #3
 8002138:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	331b      	adds	r3, #27
 8002148:	011b      	lsls	r3, r3, #4
 800214a:	4413      	add	r3, r2
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0202 	and.w	r2, r3, #2
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	331b      	adds	r3, #27
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	4413      	add	r3, r2
 8002162:	3304      	adds	r3, #4
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 020f 	and.w	r2, r3, #15
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	331b      	adds	r3, #27
 8002176:	011b      	lsls	r3, r3, #4
 8002178:	4413      	add	r3, r2
 800217a:	3304      	adds	r3, #4
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	0a1b      	lsrs	r3, r3, #8
 8002180:	b2da      	uxtb	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	68bb      	ldr	r3, [r7, #8]
 800218c:	331b      	adds	r3, #27
 800218e:	011b      	lsls	r3, r3, #4
 8002190:	4413      	add	r3, r2
 8002192:	3304      	adds	r3, #4
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	0c1b      	lsrs	r3, r3, #16
 8002198:	b29a      	uxth	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	011b      	lsls	r3, r3, #4
 80021bc:	4413      	add	r3, r2
 80021be:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	0a1a      	lsrs	r2, r3, #8
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	3301      	adds	r3, #1
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	0c1a      	lsrs	r2, r3, #16
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	3302      	adds	r3, #2
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681a      	ldr	r2, [r3, #0]
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	011b      	lsls	r3, r3, #4
 80021f0:	4413      	add	r3, r2
 80021f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	0e1a      	lsrs	r2, r3, #24
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	3303      	adds	r3, #3
 80021fe:	b2d2      	uxtb	r2, r2
 8002200:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	011b      	lsls	r3, r3, #4
 800220a:	4413      	add	r3, r2
 800220c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	3304      	adds	r3, #4
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681a      	ldr	r2, [r3, #0]
 800221e:	68bb      	ldr	r3, [r7, #8]
 8002220:	011b      	lsls	r3, r3, #4
 8002222:	4413      	add	r3, r2
 8002224:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0a1a      	lsrs	r2, r3, #8
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	3305      	adds	r3, #5
 8002230:	b2d2      	uxtb	r2, r2
 8002232:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	4413      	add	r3, r2
 800223e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0c1a      	lsrs	r2, r3, #16
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	3306      	adds	r3, #6
 800224a:	b2d2      	uxtb	r2, r2
 800224c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	011b      	lsls	r3, r3, #4
 8002256:	4413      	add	r3, r2
 8002258:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	0e1a      	lsrs	r2, r3, #24
 8002260:	683b      	ldr	r3, [r7, #0]
 8002262:	3307      	adds	r3, #7
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002268:	68bb      	ldr	r3, [r7, #8]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d108      	bne.n	8002280 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	68da      	ldr	r2, [r3, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f042 0220 	orr.w	r2, r2, #32
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	e007      	b.n	8002290 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0220 	orr.w	r2, r2, #32
 800228e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002290:	2300      	movs	r3, #0
 8002292:	e006      	b.n	80022a2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022a0:	2301      	movs	r3, #1
  }
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	371c      	adds	r7, #28
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr

080022ae <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80022ae:	b480      	push	{r7}
 80022b0:	b085      	sub	sp, #20
 80022b2:	af00      	add	r7, sp, #0
 80022b4:	6078      	str	r0, [r7, #4]
 80022b6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022be:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80022c0:	7bfb      	ldrb	r3, [r7, #15]
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d002      	beq.n	80022cc <HAL_CAN_ActivateNotification+0x1e>
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d109      	bne.n	80022e0 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	6959      	ldr	r1, [r3, #20]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	683a      	ldr	r2, [r7, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80022dc:	2300      	movs	r3, #0
 80022de:	e006      	b.n	80022ee <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
  }
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3714      	adds	r7, #20
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b08a      	sub	sp, #40	; 0x28
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002302:	2300      	movs	r3, #0
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	695b      	ldr	r3, [r3, #20]
 800230c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	d07c      	beq.n	800243a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d023      	beq.n	8002392 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2201      	movs	r2, #1
 8002350:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	f003 0302 	and.w	r3, r3, #2
 8002358:	2b00      	cmp	r3, #0
 800235a:	d003      	beq.n	8002364 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f000 f97d 	bl	800265c <HAL_CAN_TxMailbox0CompleteCallback>
 8002362:	e016      	b.n	8002392 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	2b00      	cmp	r3, #0
 800236c:	d004      	beq.n	8002378 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002374:	627b      	str	r3, [r7, #36]	; 0x24
 8002376:	e00c      	b.n	8002392 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	f003 0308 	and.w	r3, r3, #8
 800237e:	2b00      	cmp	r3, #0
 8002380:	d004      	beq.n	800238c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002384:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002388:	627b      	str	r3, [r7, #36]	; 0x24
 800238a:	e002      	b.n	8002392 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f983 	bl	8002698 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002398:	2b00      	cmp	r3, #0
 800239a:	d024      	beq.n	80023e6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023a4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d003      	beq.n	80023b8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f000 f95d 	bl	8002670 <HAL_CAN_TxMailbox1CompleteCallback>
 80023b6:	e016      	b.n	80023e6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d004      	beq.n	80023cc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80023c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023c8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ca:	e00c      	b.n	80023e6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d004      	beq.n	80023e0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023dc:	627b      	str	r3, [r7, #36]	; 0x24
 80023de:	e002      	b.n	80023e6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f000 f963 	bl	80026ac <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d024      	beq.n	800243a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80023f8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80023fa:	69bb      	ldr	r3, [r7, #24]
 80023fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002400:	2b00      	cmp	r3, #0
 8002402:	d003      	beq.n	800240c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f000 f93d 	bl	8002684 <HAL_CAN_TxMailbox2CompleteCallback>
 800240a:	e016      	b.n	800243a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002412:	2b00      	cmp	r3, #0
 8002414:	d004      	beq.n	8002420 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002418:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800241c:	627b      	str	r3, [r7, #36]	; 0x24
 800241e:	e00c      	b.n	800243a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002426:	2b00      	cmp	r3, #0
 8002428:	d004      	beq.n	8002434 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800242a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
 8002432:	e002      	b.n	800243a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002434:	6878      	ldr	r0, [r7, #4]
 8002436:	f000 f943 	bl	80026c0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	f003 0308 	and.w	r3, r3, #8
 8002440:	2b00      	cmp	r3, #0
 8002442:	d00c      	beq.n	800245e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002454:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2210      	movs	r2, #16
 800245c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800245e:	6a3b      	ldr	r3, [r7, #32]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b00      	cmp	r3, #0
 8002466:	d00b      	beq.n	8002480 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	f003 0308 	and.w	r3, r3, #8
 800246e:	2b00      	cmp	r3, #0
 8002470:	d006      	beq.n	8002480 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2208      	movs	r2, #8
 8002478:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f000 f934 	bl	80026e8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002480:	6a3b      	ldr	r3, [r7, #32]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d009      	beq.n	800249e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	68db      	ldr	r3, [r3, #12]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d002      	beq.n	800249e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f91b 	bl	80026d4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800249e:	6a3b      	ldr	r3, [r7, #32]
 80024a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00c      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	f003 0310 	and.w	r3, r3, #16
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d007      	beq.n	80024c2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80024b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2210      	movs	r2, #16
 80024c0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80024c2:	6a3b      	ldr	r3, [r7, #32]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00b      	beq.n	80024e4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d006      	beq.n	80024e4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	2208      	movs	r2, #8
 80024dc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f000 f916 	bl	8002710 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80024e4:	6a3b      	ldr	r3, [r7, #32]
 80024e6:	f003 0310 	and.w	r3, r3, #16
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d009      	beq.n	8002502 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	691b      	ldr	r3, [r3, #16]
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f8fd 	bl	80026fc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002502:	6a3b      	ldr	r3, [r7, #32]
 8002504:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d00b      	beq.n	8002524 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	f003 0310 	and.w	r3, r3, #16
 8002512:	2b00      	cmp	r3, #0
 8002514:	d006      	beq.n	8002524 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2210      	movs	r2, #16
 800251c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f900 	bl	8002724 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002524:	6a3b      	ldr	r3, [r7, #32]
 8002526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	f003 0308 	and.w	r3, r3, #8
 8002534:	2b00      	cmp	r3, #0
 8002536:	d006      	beq.n	8002546 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2208      	movs	r2, #8
 800253e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f000 f8f9 	bl	8002738 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d075      	beq.n	800263c <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d06c      	beq.n	8002634 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800256a:	2b00      	cmp	r3, #0
 800256c:	d003      	beq.n	8002576 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800256e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002570:	f043 0301 	orr.w	r3, r3, #1
 8002574:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002576:	6a3b      	ldr	r3, [r7, #32]
 8002578:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257c:	2b00      	cmp	r3, #0
 800257e:	d008      	beq.n	8002592 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	f043 0302 	orr.w	r3, r3, #2
 8002590:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d003      	beq.n	80025ae <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80025a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a8:	f043 0304 	orr.w	r3, r3, #4
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025ae:	6a3b      	ldr	r3, [r7, #32]
 80025b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d03d      	beq.n	8002634 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d038      	beq.n	8002634 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025c8:	2b30      	cmp	r3, #48	; 0x30
 80025ca:	d017      	beq.n	80025fc <HAL_CAN_IRQHandler+0x302>
 80025cc:	2b30      	cmp	r3, #48	; 0x30
 80025ce:	d804      	bhi.n	80025da <HAL_CAN_IRQHandler+0x2e0>
 80025d0:	2b10      	cmp	r3, #16
 80025d2:	d009      	beq.n	80025e8 <HAL_CAN_IRQHandler+0x2ee>
 80025d4:	2b20      	cmp	r3, #32
 80025d6:	d00c      	beq.n	80025f2 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80025d8:	e024      	b.n	8002624 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 80025da:	2b50      	cmp	r3, #80	; 0x50
 80025dc:	d018      	beq.n	8002610 <HAL_CAN_IRQHandler+0x316>
 80025de:	2b60      	cmp	r3, #96	; 0x60
 80025e0:	d01b      	beq.n	800261a <HAL_CAN_IRQHandler+0x320>
 80025e2:	2b40      	cmp	r3, #64	; 0x40
 80025e4:	d00f      	beq.n	8002606 <HAL_CAN_IRQHandler+0x30c>
            break;
 80025e6:	e01d      	b.n	8002624 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 80025e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ea:	f043 0308 	orr.w	r3, r3, #8
 80025ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025f0:	e018      	b.n	8002624 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 80025f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f4:	f043 0310 	orr.w	r3, r3, #16
 80025f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80025fa:	e013      	b.n	8002624 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 80025fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fe:	f043 0320 	orr.w	r3, r3, #32
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002604:	e00e      	b.n	8002624 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002608:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800260c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800260e:	e009      	b.n	8002624 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8002610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002612:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002616:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002618:	e004      	b.n	8002624 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 800261a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002622:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	699a      	ldr	r2, [r3, #24]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002632:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	2204      	movs	r2, #4
 800263a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800263c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263e:	2b00      	cmp	r3, #0
 8002640:	d008      	beq.n	8002654 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002648:	431a      	orrs	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f87c 	bl	800274c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002654:	bf00      	nop
 8002656:	3728      	adds	r7, #40	; 0x28
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800265c:	b480      	push	{r7}
 800265e:	b083      	sub	sp, #12
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026ac:	b480      	push	{r7}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80026dc:	bf00      	nop
 80026de:	370c      	adds	r7, #12
 80026e0:	46bd      	mov	sp, r7
 80026e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e6:	4770      	bx	lr

080026e8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002704:	bf00      	nop
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002718:	bf00      	nop
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr

08002738 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002760:	b480      	push	{r7}
 8002762:	b085      	sub	sp, #20
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002772:	68db      	ldr	r3, [r3, #12]
 8002774:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002776:	68ba      	ldr	r2, [r7, #8]
 8002778:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800277c:	4013      	ands	r3, r2
 800277e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002788:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800278c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002790:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002792:	4a04      	ldr	r2, [pc, #16]	; (80027a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002794:	68bb      	ldr	r3, [r7, #8]
 8002796:	60d3      	str	r3, [r2, #12]
}
 8002798:	bf00      	nop
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	e000ed00 	.word	0xe000ed00

080027a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027a8:	b480      	push	{r7}
 80027aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ac:	4b04      	ldr	r3, [pc, #16]	; (80027c0 <__NVIC_GetPriorityGrouping+0x18>)
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	0a1b      	lsrs	r3, r3, #8
 80027b2:	f003 0307 	and.w	r3, r3, #7
}
 80027b6:	4618      	mov	r0, r3
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	4603      	mov	r3, r0
 80027cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	db0b      	blt.n	80027ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027d6:	79fb      	ldrb	r3, [r7, #7]
 80027d8:	f003 021f 	and.w	r2, r3, #31
 80027dc:	4907      	ldr	r1, [pc, #28]	; (80027fc <__NVIC_EnableIRQ+0x38>)
 80027de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027e2:	095b      	lsrs	r3, r3, #5
 80027e4:	2001      	movs	r0, #1
 80027e6:	fa00 f202 	lsl.w	r2, r0, r2
 80027ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	e000e100 	.word	0xe000e100

08002800 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	4603      	mov	r3, r0
 8002808:	6039      	str	r1, [r7, #0]
 800280a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002810:	2b00      	cmp	r3, #0
 8002812:	db0a      	blt.n	800282a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	b2da      	uxtb	r2, r3
 8002818:	490c      	ldr	r1, [pc, #48]	; (800284c <__NVIC_SetPriority+0x4c>)
 800281a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281e:	0112      	lsls	r2, r2, #4
 8002820:	b2d2      	uxtb	r2, r2
 8002822:	440b      	add	r3, r1
 8002824:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002828:	e00a      	b.n	8002840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	4908      	ldr	r1, [pc, #32]	; (8002850 <__NVIC_SetPriority+0x50>)
 8002830:	79fb      	ldrb	r3, [r7, #7]
 8002832:	f003 030f 	and.w	r3, r3, #15
 8002836:	3b04      	subs	r3, #4
 8002838:	0112      	lsls	r2, r2, #4
 800283a:	b2d2      	uxtb	r2, r2
 800283c:	440b      	add	r3, r1
 800283e:	761a      	strb	r2, [r3, #24]
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000e100 	.word	0xe000e100
 8002850:	e000ed00 	.word	0xe000ed00

08002854 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002854:	b480      	push	{r7}
 8002856:	b089      	sub	sp, #36	; 0x24
 8002858:	af00      	add	r7, sp, #0
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f003 0307 	and.w	r3, r3, #7
 8002866:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002868:	69fb      	ldr	r3, [r7, #28]
 800286a:	f1c3 0307 	rsb	r3, r3, #7
 800286e:	2b04      	cmp	r3, #4
 8002870:	bf28      	it	cs
 8002872:	2304      	movcs	r3, #4
 8002874:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	3304      	adds	r3, #4
 800287a:	2b06      	cmp	r3, #6
 800287c:	d902      	bls.n	8002884 <NVIC_EncodePriority+0x30>
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3b03      	subs	r3, #3
 8002882:	e000      	b.n	8002886 <NVIC_EncodePriority+0x32>
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002888:	f04f 32ff 	mov.w	r2, #4294967295
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	401a      	ands	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800289c:	f04f 31ff 	mov.w	r1, #4294967295
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	fa01 f303 	lsl.w	r3, r1, r3
 80028a6:	43d9      	mvns	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ac:	4313      	orrs	r3, r2
         );
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	3724      	adds	r7, #36	; 0x24
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr
	...

080028bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b082      	sub	sp, #8
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3b01      	subs	r3, #1
 80028c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028cc:	d301      	bcc.n	80028d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ce:	2301      	movs	r3, #1
 80028d0:	e00f      	b.n	80028f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028d2:	4a0a      	ldr	r2, [pc, #40]	; (80028fc <SysTick_Config+0x40>)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	3b01      	subs	r3, #1
 80028d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028da:	210f      	movs	r1, #15
 80028dc:	f04f 30ff 	mov.w	r0, #4294967295
 80028e0:	f7ff ff8e 	bl	8002800 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028e4:	4b05      	ldr	r3, [pc, #20]	; (80028fc <SysTick_Config+0x40>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028ea:	4b04      	ldr	r3, [pc, #16]	; (80028fc <SysTick_Config+0x40>)
 80028ec:	2207      	movs	r2, #7
 80028ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	e000e010 	.word	0xe000e010

08002900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f7ff ff29 	bl	8002760 <__NVIC_SetPriorityGrouping>
}
 800290e:	bf00      	nop
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002916:	b580      	push	{r7, lr}
 8002918:	b086      	sub	sp, #24
 800291a:	af00      	add	r7, sp, #0
 800291c:	4603      	mov	r3, r0
 800291e:	60b9      	str	r1, [r7, #8]
 8002920:	607a      	str	r2, [r7, #4]
 8002922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002924:	2300      	movs	r3, #0
 8002926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002928:	f7ff ff3e 	bl	80027a8 <__NVIC_GetPriorityGrouping>
 800292c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	6978      	ldr	r0, [r7, #20]
 8002934:	f7ff ff8e 	bl	8002854 <NVIC_EncodePriority>
 8002938:	4602      	mov	r2, r0
 800293a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff5d 	bl	8002800 <__NVIC_SetPriority>
}
 8002946:	bf00      	nop
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	4603      	mov	r3, r0
 8002956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff31 	bl	80027c4 <__NVIC_EnableIRQ>
}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f7ff ffa2 	bl	80028bc <SysTick_Config>
 8002978:	4603      	mov	r3, r0
}
 800297a:	4618      	mov	r0, r3
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002984:	b480      	push	{r7}
 8002986:	b089      	sub	sp, #36	; 0x24
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002996:	2300      	movs	r3, #0
 8002998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800299a:	2300      	movs	r3, #0
 800299c:	61fb      	str	r3, [r7, #28]
 800299e:	e16b      	b.n	8002c78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029a0:	2201      	movs	r2, #1
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	fa02 f303 	lsl.w	r3, r2, r3
 80029a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	697a      	ldr	r2, [r7, #20]
 80029b0:	4013      	ands	r3, r2
 80029b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029b4:	693a      	ldr	r2, [r7, #16]
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	f040 815a 	bne.w	8002c72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d00b      	beq.n	80029de <HAL_GPIO_Init+0x5a>
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d007      	beq.n	80029de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80029d2:	2b11      	cmp	r3, #17
 80029d4:	d003      	beq.n	80029de <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	2b12      	cmp	r3, #18
 80029dc:	d130      	bne.n	8002a40 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	005b      	lsls	r3, r3, #1
 80029e8:	2203      	movs	r2, #3
 80029ea:	fa02 f303 	lsl.w	r3, r2, r3
 80029ee:	43db      	mvns	r3, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4013      	ands	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	68da      	ldr	r2, [r3, #12]
 80029fa:	69fb      	ldr	r3, [r7, #28]
 80029fc:	005b      	lsls	r3, r3, #1
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	69ba      	ldr	r2, [r7, #24]
 8002a0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a14:	2201      	movs	r2, #1
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	4013      	ands	r3, r2
 8002a22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 0201 	and.w	r2, r3, #1
 8002a2e:	69fb      	ldr	r3, [r7, #28]
 8002a30:	fa02 f303 	lsl.w	r3, r2, r3
 8002a34:	69ba      	ldr	r2, [r7, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	69ba      	ldr	r2, [r7, #24]
 8002a54:	4013      	ands	r3, r2
 8002a56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69ba      	ldr	r2, [r7, #24]
 8002a6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b02      	cmp	r3, #2
 8002a76:	d003      	beq.n	8002a80 <HAL_GPIO_Init+0xfc>
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b12      	cmp	r3, #18
 8002a7e:	d123      	bne.n	8002ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a80:	69fb      	ldr	r3, [r7, #28]
 8002a82:	08da      	lsrs	r2, r3, #3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	3208      	adds	r2, #8
 8002a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	009b      	lsls	r3, r3, #2
 8002a96:	220f      	movs	r2, #15
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	43db      	mvns	r3, r3
 8002a9e:	69ba      	ldr	r2, [r7, #24]
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	f003 0307 	and.w	r3, r3, #7
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	08da      	lsrs	r2, r3, #3
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	3208      	adds	r2, #8
 8002ac2:	69b9      	ldr	r1, [r7, #24]
 8002ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	69ba      	ldr	r2, [r7, #24]
 8002adc:	4013      	ands	r3, r2
 8002ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f003 0203 	and.w	r2, r3, #3
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	69ba      	ldr	r2, [r7, #24]
 8002af2:	4313      	orrs	r3, r2
 8002af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	69ba      	ldr	r2, [r7, #24]
 8002afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80b4 	beq.w	8002c72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60fb      	str	r3, [r7, #12]
 8002b0e:	4b5f      	ldr	r3, [pc, #380]	; (8002c8c <HAL_GPIO_Init+0x308>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b12:	4a5e      	ldr	r2, [pc, #376]	; (8002c8c <HAL_GPIO_Init+0x308>)
 8002b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b18:	6453      	str	r3, [r2, #68]	; 0x44
 8002b1a:	4b5c      	ldr	r3, [pc, #368]	; (8002c8c <HAL_GPIO_Init+0x308>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b26:	4a5a      	ldr	r2, [pc, #360]	; (8002c90 <HAL_GPIO_Init+0x30c>)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	089b      	lsrs	r3, r3, #2
 8002b2c:	3302      	adds	r3, #2
 8002b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f003 0303 	and.w	r3, r3, #3
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	220f      	movs	r2, #15
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43db      	mvns	r3, r3
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	4013      	ands	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a51      	ldr	r2, [pc, #324]	; (8002c94 <HAL_GPIO_Init+0x310>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d02b      	beq.n	8002baa <HAL_GPIO_Init+0x226>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a50      	ldr	r2, [pc, #320]	; (8002c98 <HAL_GPIO_Init+0x314>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d025      	beq.n	8002ba6 <HAL_GPIO_Init+0x222>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4f      	ldr	r2, [pc, #316]	; (8002c9c <HAL_GPIO_Init+0x318>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d01f      	beq.n	8002ba2 <HAL_GPIO_Init+0x21e>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4e      	ldr	r2, [pc, #312]	; (8002ca0 <HAL_GPIO_Init+0x31c>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d019      	beq.n	8002b9e <HAL_GPIO_Init+0x21a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4d      	ldr	r2, [pc, #308]	; (8002ca4 <HAL_GPIO_Init+0x320>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d013      	beq.n	8002b9a <HAL_GPIO_Init+0x216>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4c      	ldr	r2, [pc, #304]	; (8002ca8 <HAL_GPIO_Init+0x324>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d00d      	beq.n	8002b96 <HAL_GPIO_Init+0x212>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4b      	ldr	r2, [pc, #300]	; (8002cac <HAL_GPIO_Init+0x328>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d007      	beq.n	8002b92 <HAL_GPIO_Init+0x20e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4a      	ldr	r2, [pc, #296]	; (8002cb0 <HAL_GPIO_Init+0x32c>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d101      	bne.n	8002b8e <HAL_GPIO_Init+0x20a>
 8002b8a:	2307      	movs	r3, #7
 8002b8c:	e00e      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b8e:	2308      	movs	r3, #8
 8002b90:	e00c      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b92:	2306      	movs	r3, #6
 8002b94:	e00a      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b96:	2305      	movs	r3, #5
 8002b98:	e008      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	e006      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002b9e:	2303      	movs	r3, #3
 8002ba0:	e004      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002ba2:	2302      	movs	r3, #2
 8002ba4:	e002      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <HAL_GPIO_Init+0x228>
 8002baa:	2300      	movs	r3, #0
 8002bac:	69fa      	ldr	r2, [r7, #28]
 8002bae:	f002 0203 	and.w	r2, r2, #3
 8002bb2:	0092      	lsls	r2, r2, #2
 8002bb4:	4093      	lsls	r3, r2
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bbc:	4934      	ldr	r1, [pc, #208]	; (8002c90 <HAL_GPIO_Init+0x30c>)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	089b      	lsrs	r3, r3, #2
 8002bc2:	3302      	adds	r3, #2
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bca:	4b3a      	ldr	r3, [pc, #232]	; (8002cb4 <HAL_GPIO_Init+0x330>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	43db      	mvns	r3, r3
 8002bd4:	69ba      	ldr	r2, [r7, #24]
 8002bd6:	4013      	ands	r3, r2
 8002bd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bee:	4a31      	ldr	r2, [pc, #196]	; (8002cb4 <HAL_GPIO_Init+0x330>)
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002bf4:	4b2f      	ldr	r3, [pc, #188]	; (8002cb4 <HAL_GPIO_Init+0x330>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	69ba      	ldr	r2, [r7, #24]
 8002c00:	4013      	ands	r3, r2
 8002c02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d003      	beq.n	8002c18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c10:	69ba      	ldr	r2, [r7, #24]
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c18:	4a26      	ldr	r2, [pc, #152]	; (8002cb4 <HAL_GPIO_Init+0x330>)
 8002c1a:	69bb      	ldr	r3, [r7, #24]
 8002c1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c1e:	4b25      	ldr	r3, [pc, #148]	; (8002cb4 <HAL_GPIO_Init+0x330>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	43db      	mvns	r3, r3
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	693b      	ldr	r3, [r7, #16]
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c42:	4a1c      	ldr	r2, [pc, #112]	; (8002cb4 <HAL_GPIO_Init+0x330>)
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c48:	4b1a      	ldr	r3, [pc, #104]	; (8002cb4 <HAL_GPIO_Init+0x330>)
 8002c4a:	68db      	ldr	r3, [r3, #12]
 8002c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	43db      	mvns	r3, r3
 8002c52:	69ba      	ldr	r2, [r7, #24]
 8002c54:	4013      	ands	r3, r2
 8002c56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d003      	beq.n	8002c6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c6c:	4a11      	ldr	r2, [pc, #68]	; (8002cb4 <HAL_GPIO_Init+0x330>)
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3301      	adds	r3, #1
 8002c76:	61fb      	str	r3, [r7, #28]
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	2b0f      	cmp	r3, #15
 8002c7c:	f67f ae90 	bls.w	80029a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c80:	bf00      	nop
 8002c82:	3724      	adds	r7, #36	; 0x24
 8002c84:	46bd      	mov	sp, r7
 8002c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8a:	4770      	bx	lr
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40013800 	.word	0x40013800
 8002c94:	40020000 	.word	0x40020000
 8002c98:	40020400 	.word	0x40020400
 8002c9c:	40020800 	.word	0x40020800
 8002ca0:	40020c00 	.word	0x40020c00
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	40021400 	.word	0x40021400
 8002cac:	40021800 	.word	0x40021800
 8002cb0:	40021c00 	.word	0x40021c00
 8002cb4:	40013c00 	.word	0x40013c00

08002cb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	887b      	ldrh	r3, [r7, #2]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	e001      	b.n	8002cda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cf8:	787b      	ldrb	r3, [r7, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d04:	e003      	b.n	8002d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	041a      	lsls	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	4603      	mov	r3, r0
 8002d24:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d26:	4b08      	ldr	r3, [pc, #32]	; (8002d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d28:	695a      	ldr	r2, [r3, #20]
 8002d2a:	88fb      	ldrh	r3, [r7, #6]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d006      	beq.n	8002d40 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d32:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d34:	88fb      	ldrh	r3, [r7, #6]
 8002d36:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d38:	88fb      	ldrh	r3, [r7, #6]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f806 	bl	8002d4c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d40:	bf00      	nop
 8002d42:	3708      	adds	r7, #8
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bd80      	pop	{r7, pc}
 8002d48:	40013c00 	.word	0x40013c00

08002d4c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d56:	bf00      	nop
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
	...

08002d64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b084      	sub	sp, #16
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d101      	bne.n	8002d76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e11f      	b.n	8002fb6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d106      	bne.n	8002d90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7fe fc76 	bl	800167c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2224      	movs	r2, #36	; 0x24
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0201 	bic.w	r2, r2, #1
 8002da6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002db6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dc8:	f001 f846 	bl	8003e58 <HAL_RCC_GetPCLK1Freq>
 8002dcc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	4a7b      	ldr	r2, [pc, #492]	; (8002fc0 <HAL_I2C_Init+0x25c>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d807      	bhi.n	8002de8 <HAL_I2C_Init+0x84>
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	4a7a      	ldr	r2, [pc, #488]	; (8002fc4 <HAL_I2C_Init+0x260>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	bf94      	ite	ls
 8002de0:	2301      	movls	r3, #1
 8002de2:	2300      	movhi	r3, #0
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e006      	b.n	8002df6 <HAL_I2C_Init+0x92>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a77      	ldr	r2, [pc, #476]	; (8002fc8 <HAL_I2C_Init+0x264>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	bf94      	ite	ls
 8002df0:	2301      	movls	r3, #1
 8002df2:	2300      	movhi	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d001      	beq.n	8002dfe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e0db      	b.n	8002fb6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	4a72      	ldr	r2, [pc, #456]	; (8002fcc <HAL_I2C_Init+0x268>)
 8002e02:	fba2 2303 	umull	r2, r3, r2, r3
 8002e06:	0c9b      	lsrs	r3, r3, #18
 8002e08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68ba      	ldr	r2, [r7, #8]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6a1b      	ldr	r3, [r3, #32]
 8002e24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	4a64      	ldr	r2, [pc, #400]	; (8002fc0 <HAL_I2C_Init+0x25c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d802      	bhi.n	8002e38 <HAL_I2C_Init+0xd4>
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	3301      	adds	r3, #1
 8002e36:	e009      	b.n	8002e4c <HAL_I2C_Init+0xe8>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e3e:	fb02 f303 	mul.w	r3, r2, r3
 8002e42:	4a63      	ldr	r2, [pc, #396]	; (8002fd0 <HAL_I2C_Init+0x26c>)
 8002e44:	fba2 2303 	umull	r2, r3, r2, r3
 8002e48:	099b      	lsrs	r3, r3, #6
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	6812      	ldr	r2, [r2, #0]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	69db      	ldr	r3, [r3, #28]
 8002e5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	4956      	ldr	r1, [pc, #344]	; (8002fc0 <HAL_I2C_Init+0x25c>)
 8002e68:	428b      	cmp	r3, r1
 8002e6a:	d80d      	bhi.n	8002e88 <HAL_I2C_Init+0x124>
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1e59      	subs	r1, r3, #1
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	005b      	lsls	r3, r3, #1
 8002e76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e80:	2b04      	cmp	r3, #4
 8002e82:	bf38      	it	cc
 8002e84:	2304      	movcc	r3, #4
 8002e86:	e04f      	b.n	8002f28 <HAL_I2C_Init+0x1c4>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d111      	bne.n	8002eb4 <HAL_I2C_Init+0x150>
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	1e58      	subs	r0, r3, #1
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6859      	ldr	r1, [r3, #4]
 8002e98:	460b      	mov	r3, r1
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	440b      	add	r3, r1
 8002e9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	e012      	b.n	8002eda <HAL_I2C_Init+0x176>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	1e58      	subs	r0, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6859      	ldr	r1, [r3, #4]
 8002ebc:	460b      	mov	r3, r1
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	0099      	lsls	r1, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_I2C_Init+0x17e>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e022      	b.n	8002f28 <HAL_I2C_Init+0x1c4>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d10e      	bne.n	8002f08 <HAL_I2C_Init+0x1a4>
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1e58      	subs	r0, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6859      	ldr	r1, [r3, #4]
 8002ef2:	460b      	mov	r3, r1
 8002ef4:	005b      	lsls	r3, r3, #1
 8002ef6:	440b      	add	r3, r1
 8002ef8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002efc:	3301      	adds	r3, #1
 8002efe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f06:	e00f      	b.n	8002f28 <HAL_I2C_Init+0x1c4>
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1e58      	subs	r0, r3, #1
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6859      	ldr	r1, [r3, #4]
 8002f10:	460b      	mov	r3, r1
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	0099      	lsls	r1, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f1e:	3301      	adds	r3, #1
 8002f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f24:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	6809      	ldr	r1, [r1, #0]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	69da      	ldr	r2, [r3, #28]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a1b      	ldr	r3, [r3, #32]
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	430a      	orrs	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f56:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	6911      	ldr	r1, [r2, #16]
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	68d2      	ldr	r2, [r2, #12]
 8002f62:	4311      	orrs	r1, r2
 8002f64:	687a      	ldr	r2, [r7, #4]
 8002f66:	6812      	ldr	r2, [r2, #0]
 8002f68:	430b      	orrs	r3, r1
 8002f6a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	695a      	ldr	r2, [r3, #20]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	431a      	orrs	r2, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f042 0201 	orr.w	r2, r2, #1
 8002f96:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2220      	movs	r2, #32
 8002fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	000186a0 	.word	0x000186a0
 8002fc4:	001e847f 	.word	0x001e847f
 8002fc8:	003d08ff 	.word	0x003d08ff
 8002fcc:	431bde83 	.word	0x431bde83
 8002fd0:	10624dd3 	.word	0x10624dd3

08002fd4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b088      	sub	sp, #32
 8002fd8:	af02      	add	r7, sp, #8
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	607a      	str	r2, [r7, #4]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	817b      	strh	r3, [r7, #10]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fe8:	f7fe fd26 	bl	8001a38 <HAL_GetTick>
 8002fec:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b20      	cmp	r3, #32
 8002ff8:	f040 80e0 	bne.w	80031bc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	9300      	str	r3, [sp, #0]
 8003000:	2319      	movs	r3, #25
 8003002:	2201      	movs	r2, #1
 8003004:	4970      	ldr	r1, [pc, #448]	; (80031c8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 f964 	bl	80032d4 <I2C_WaitOnFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003012:	2302      	movs	r3, #2
 8003014:	e0d3      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800301c:	2b01      	cmp	r3, #1
 800301e:	d101      	bne.n	8003024 <HAL_I2C_Master_Transmit+0x50>
 8003020:	2302      	movs	r3, #2
 8003022:	e0cc      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2201      	movs	r2, #1
 8003028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b01      	cmp	r3, #1
 8003038:	d007      	beq.n	800304a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f042 0201 	orr.w	r2, r2, #1
 8003048:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003058:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2221      	movs	r2, #33	; 0x21
 800305e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2210      	movs	r2, #16
 8003066:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	893a      	ldrh	r2, [r7, #8]
 800307a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003080:	b29a      	uxth	r2, r3
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	4a50      	ldr	r2, [pc, #320]	; (80031cc <HAL_I2C_Master_Transmit+0x1f8>)
 800308a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800308c:	8979      	ldrh	r1, [r7, #10]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	6a3a      	ldr	r2, [r7, #32]
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f89c 	bl	80031d0 <I2C_MasterRequestWrite>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e08d      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030a2:	2300      	movs	r3, #0
 80030a4:	613b      	str	r3, [r7, #16]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	613b      	str	r3, [r7, #16]
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	699b      	ldr	r3, [r3, #24]
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80030b8:	e066      	b.n	8003188 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	6a39      	ldr	r1, [r7, #32]
 80030be:	68f8      	ldr	r0, [r7, #12]
 80030c0:	f000 f9de 	bl	8003480 <I2C_WaitOnTXEFlagUntilTimeout>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00d      	beq.n	80030e6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	2b04      	cmp	r3, #4
 80030d0:	d107      	bne.n	80030e2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e06b      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	3b01      	subs	r3, #1
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800310e:	3b01      	subs	r3, #1
 8003110:	b29a      	uxth	r2, r3
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	695b      	ldr	r3, [r3, #20]
 800311c:	f003 0304 	and.w	r3, r3, #4
 8003120:	2b04      	cmp	r3, #4
 8003122:	d11b      	bne.n	800315c <HAL_I2C_Master_Transmit+0x188>
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003128:	2b00      	cmp	r3, #0
 800312a:	d017      	beq.n	800315c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	781a      	ldrb	r2, [r3, #0]
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313c:	1c5a      	adds	r2, r3, #1
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003146:	b29b      	uxth	r3, r3
 8003148:	3b01      	subs	r3, #1
 800314a:	b29a      	uxth	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	3b01      	subs	r3, #1
 8003156:	b29a      	uxth	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800315c:	697a      	ldr	r2, [r7, #20]
 800315e:	6a39      	ldr	r1, [r7, #32]
 8003160:	68f8      	ldr	r0, [r7, #12]
 8003162:	f000 f9ce 	bl	8003502 <I2C_WaitOnBTFFlagUntilTimeout>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00d      	beq.n	8003188 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003170:	2b04      	cmp	r3, #4
 8003172:	d107      	bne.n	8003184 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003182:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e01a      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800318c:	2b00      	cmp	r3, #0
 800318e:	d194      	bne.n	80030ba <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800319e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2220      	movs	r2, #32
 80031a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031b8:	2300      	movs	r3, #0
 80031ba:	e000      	b.n	80031be <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80031bc:	2302      	movs	r3, #2
  }
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3718      	adds	r7, #24
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	00100002 	.word	0x00100002
 80031cc:	ffff0000 	.word	0xffff0000

080031d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b088      	sub	sp, #32
 80031d4:	af02      	add	r7, sp, #8
 80031d6:	60f8      	str	r0, [r7, #12]
 80031d8:	607a      	str	r2, [r7, #4]
 80031da:	603b      	str	r3, [r7, #0]
 80031dc:	460b      	mov	r3, r1
 80031de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d006      	beq.n	80031fa <I2C_MasterRequestWrite+0x2a>
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d003      	beq.n	80031fa <I2C_MasterRequestWrite+0x2a>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031f8:	d108      	bne.n	800320c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003208:	601a      	str	r2, [r3, #0]
 800320a:	e00b      	b.n	8003224 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003210:	2b12      	cmp	r3, #18
 8003212:	d107      	bne.n	8003224 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003222:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003230:	68f8      	ldr	r0, [r7, #12]
 8003232:	f000 f84f 	bl	80032d4 <I2C_WaitOnFlagUntilTimeout>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00d      	beq.n	8003258 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003246:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800324a:	d103      	bne.n	8003254 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003252:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e035      	b.n	80032c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	691b      	ldr	r3, [r3, #16]
 800325c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003260:	d108      	bne.n	8003274 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003262:	897b      	ldrh	r3, [r7, #10]
 8003264:	b2db      	uxtb	r3, r3
 8003266:	461a      	mov	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003270:	611a      	str	r2, [r3, #16]
 8003272:	e01b      	b.n	80032ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003274:	897b      	ldrh	r3, [r7, #10]
 8003276:	11db      	asrs	r3, r3, #7
 8003278:	b2db      	uxtb	r3, r3
 800327a:	f003 0306 	and.w	r3, r3, #6
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f063 030f 	orn	r3, r3, #15
 8003284:	b2da      	uxtb	r2, r3
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	490e      	ldr	r1, [pc, #56]	; (80032cc <I2C_MasterRequestWrite+0xfc>)
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f875 	bl	8003382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800329e:	2301      	movs	r3, #1
 80032a0:	e010      	b.n	80032c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032a2:	897b      	ldrh	r3, [r7, #10]
 80032a4:	b2da      	uxtb	r2, r3
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032ac:	683b      	ldr	r3, [r7, #0]
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	4907      	ldr	r1, [pc, #28]	; (80032d0 <I2C_MasterRequestWrite+0x100>)
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 f865 	bl	8003382 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d001      	beq.n	80032c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e000      	b.n	80032c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032c2:	2300      	movs	r3, #0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	3718      	adds	r7, #24
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd80      	pop	{r7, pc}
 80032cc:	00010008 	.word	0x00010008
 80032d0:	00010002 	.word	0x00010002

080032d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	603b      	str	r3, [r7, #0]
 80032e0:	4613      	mov	r3, r2
 80032e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032e4:	e025      	b.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ec:	d021      	beq.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032ee:	f7fe fba3 	bl	8001a38 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	683a      	ldr	r2, [r7, #0]
 80032fa:	429a      	cmp	r2, r3
 80032fc:	d302      	bcc.n	8003304 <I2C_WaitOnFlagUntilTimeout+0x30>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d116      	bne.n	8003332 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	2200      	movs	r2, #0
 8003308:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2220      	movs	r2, #32
 800330e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2200      	movs	r2, #0
 8003316:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	f043 0220 	orr.w	r2, r3, #32
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	2200      	movs	r2, #0
 800332a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e023      	b.n	800337a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	0c1b      	lsrs	r3, r3, #16
 8003336:	b2db      	uxtb	r3, r3
 8003338:	2b01      	cmp	r3, #1
 800333a:	d10d      	bne.n	8003358 <I2C_WaitOnFlagUntilTimeout+0x84>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	43da      	mvns	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	4013      	ands	r3, r2
 8003348:	b29b      	uxth	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	bf0c      	ite	eq
 800334e:	2301      	moveq	r3, #1
 8003350:	2300      	movne	r3, #0
 8003352:	b2db      	uxtb	r3, r3
 8003354:	461a      	mov	r2, r3
 8003356:	e00c      	b.n	8003372 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	699b      	ldr	r3, [r3, #24]
 800335e:	43da      	mvns	r2, r3
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	4013      	ands	r3, r2
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	bf0c      	ite	eq
 800336a:	2301      	moveq	r3, #1
 800336c:	2300      	movne	r3, #0
 800336e:	b2db      	uxtb	r3, r3
 8003370:	461a      	mov	r2, r3
 8003372:	79fb      	ldrb	r3, [r7, #7]
 8003374:	429a      	cmp	r2, r3
 8003376:	d0b6      	beq.n	80032e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003378:	2300      	movs	r3, #0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3710      	adds	r7, #16
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}

08003382 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003382:	b580      	push	{r7, lr}
 8003384:	b084      	sub	sp, #16
 8003386:	af00      	add	r7, sp, #0
 8003388:	60f8      	str	r0, [r7, #12]
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003390:	e051      	b.n	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800339c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a0:	d123      	bne.n	80033ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	2200      	movs	r2, #0
 80033c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033d6:	f043 0204 	orr.w	r2, r3, #4
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	e046      	b.n	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f0:	d021      	beq.n	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033f2:	f7fe fb21 	bl	8001a38 <HAL_GetTick>
 80033f6:	4602      	mov	r2, r0
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	1ad3      	subs	r3, r2, r3
 80033fc:	687a      	ldr	r2, [r7, #4]
 80033fe:	429a      	cmp	r2, r3
 8003400:	d302      	bcc.n	8003408 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d116      	bne.n	8003436 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2200      	movs	r2, #0
 800340c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f043 0220 	orr.w	r2, r3, #32
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e020      	b.n	8003478 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	0c1b      	lsrs	r3, r3, #16
 800343a:	b2db      	uxtb	r3, r3
 800343c:	2b01      	cmp	r3, #1
 800343e:	d10c      	bne.n	800345a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	43da      	mvns	r2, r3
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	4013      	ands	r3, r2
 800344c:	b29b      	uxth	r3, r3
 800344e:	2b00      	cmp	r3, #0
 8003450:	bf14      	ite	ne
 8003452:	2301      	movne	r3, #1
 8003454:	2300      	moveq	r3, #0
 8003456:	b2db      	uxtb	r3, r3
 8003458:	e00b      	b.n	8003472 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	699b      	ldr	r3, [r3, #24]
 8003460:	43da      	mvns	r2, r3
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	4013      	ands	r3, r2
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	bf14      	ite	ne
 800346c:	2301      	movne	r3, #1
 800346e:	2300      	moveq	r3, #0
 8003470:	b2db      	uxtb	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d18d      	bne.n	8003392 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800348c:	e02d      	b.n	80034ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800348e:	68f8      	ldr	r0, [r7, #12]
 8003490:	f000 f878 	bl	8003584 <I2C_IsAcknowledgeFailed>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e02d      	b.n	80034fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d021      	beq.n	80034ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a6:	f7fe fac7 	bl	8001a38 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d302      	bcc.n	80034bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d116      	bne.n	80034ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2200      	movs	r2, #0
 80034c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	f043 0220 	orr.w	r2, r3, #32
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e007      	b.n	80034fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f4:	2b80      	cmp	r3, #128	; 0x80
 80034f6:	d1ca      	bne.n	800348e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80034f8:	2300      	movs	r3, #0
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}

08003502 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	60f8      	str	r0, [r7, #12]
 800350a:	60b9      	str	r1, [r7, #8]
 800350c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800350e:	e02d      	b.n	800356c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f000 f837 	bl	8003584 <I2C_IsAcknowledgeFailed>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d001      	beq.n	8003520 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e02d      	b.n	800357c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003526:	d021      	beq.n	800356c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003528:	f7fe fa86 	bl	8001a38 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	68ba      	ldr	r2, [r7, #8]
 8003534:	429a      	cmp	r2, r3
 8003536:	d302      	bcc.n	800353e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d116      	bne.n	800356c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f043 0220 	orr.w	r2, r3, #32
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	e007      	b.n	800357c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	f003 0304 	and.w	r3, r3, #4
 8003576:	2b04      	cmp	r3, #4
 8003578:	d1ca      	bne.n	8003510 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003584:	b480      	push	{r7}
 8003586:	b083      	sub	sp, #12
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003596:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359a:	d11b      	bne.n	80035d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80035a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f043 0204 	orr.w	r2, r3, #4
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e25b      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d075      	beq.n	80036ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003602:	4ba3      	ldr	r3, [pc, #652]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b04      	cmp	r3, #4
 800360c:	d00c      	beq.n	8003628 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360e:	4ba0      	ldr	r3, [pc, #640]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003616:	2b08      	cmp	r3, #8
 8003618:	d112      	bne.n	8003640 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800361a:	4b9d      	ldr	r3, [pc, #628]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003626:	d10b      	bne.n	8003640 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003628:	4b99      	ldr	r3, [pc, #612]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d05b      	beq.n	80036ec <HAL_RCC_OscConfig+0x108>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d157      	bne.n	80036ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e236      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003648:	d106      	bne.n	8003658 <HAL_RCC_OscConfig+0x74>
 800364a:	4b91      	ldr	r3, [pc, #580]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a90      	ldr	r2, [pc, #576]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e01d      	b.n	8003694 <HAL_RCC_OscConfig+0xb0>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0x98>
 8003662:	4b8b      	ldr	r3, [pc, #556]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a8a      	ldr	r2, [pc, #552]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4b88      	ldr	r3, [pc, #544]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a87      	ldr	r2, [pc, #540]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e00b      	b.n	8003694 <HAL_RCC_OscConfig+0xb0>
 800367c:	4b84      	ldr	r3, [pc, #528]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a83      	ldr	r2, [pc, #524]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	4b81      	ldr	r3, [pc, #516]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a80      	ldr	r2, [pc, #512]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 800368e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d013      	beq.n	80036c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fe f9cc 	bl	8001a38 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a4:	f7fe f9c8 	bl	8001a38 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	; 0x64
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e1fb      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b76      	ldr	r3, [pc, #472]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0xc0>
 80036c2:	e014      	b.n	80036ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fe f9b8 	bl	8001a38 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036cc:	f7fe f9b4 	bl	8001a38 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e1e7      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036de:	4b6c      	ldr	r3, [pc, #432]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0xe8>
 80036ea:	e000      	b.n	80036ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d063      	beq.n	80037c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036fa:	4b65      	ldr	r3, [pc, #404]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003706:	4b62      	ldr	r3, [pc, #392]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800370e:	2b08      	cmp	r3, #8
 8003710:	d11c      	bne.n	800374c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003712:	4b5f      	ldr	r3, [pc, #380]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d116      	bne.n	800374c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371e:	4b5c      	ldr	r3, [pc, #368]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_RCC_OscConfig+0x152>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d001      	beq.n	8003736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e1bb      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003736:	4b56      	ldr	r3, [pc, #344]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4952      	ldr	r1, [pc, #328]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374a:	e03a      	b.n	80037c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d020      	beq.n	8003796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003754:	4b4f      	ldr	r3, [pc, #316]	; (8003894 <HAL_RCC_OscConfig+0x2b0>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fe f96d 	bl	8001a38 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003762:	f7fe f969 	bl	8001a38 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e19c      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003774:	4b46      	ldr	r3, [pc, #280]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003780:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4940      	ldr	r1, [pc, #256]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]
 8003794:	e015      	b.n	80037c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003796:	4b3f      	ldr	r3, [pc, #252]	; (8003894 <HAL_RCC_OscConfig+0x2b0>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fe f94c 	bl	8001a38 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a4:	f7fe f948 	bl	8001a38 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e17b      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	4b36      	ldr	r3, [pc, #216]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d030      	beq.n	8003830 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d016      	beq.n	8003804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d6:	4b30      	ldr	r3, [pc, #192]	; (8003898 <HAL_RCC_OscConfig+0x2b4>)
 80037d8:	2201      	movs	r2, #1
 80037da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037dc:	f7fe f92c 	bl	8001a38 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e4:	f7fe f928 	bl	8001a38 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e15b      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	4b26      	ldr	r3, [pc, #152]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x200>
 8003802:	e015      	b.n	8003830 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003804:	4b24      	ldr	r3, [pc, #144]	; (8003898 <HAL_RCC_OscConfig+0x2b4>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380a:	f7fe f915 	bl	8001a38 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003812:	f7fe f911 	bl	8001a38 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e144      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f0      	bne.n	8003812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a0 	beq.w	800397e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003842:	4b13      	ldr	r3, [pc, #76]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	4a0e      	ldr	r2, [pc, #56]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385c:	6413      	str	r3, [r2, #64]	; 0x40
 800385e:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386a:	2301      	movs	r3, #1
 800386c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_RCC_OscConfig+0x2b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d121      	bne.n	80038be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387a:	4b08      	ldr	r3, [pc, #32]	; (800389c <HAL_RCC_OscConfig+0x2b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a07      	ldr	r2, [pc, #28]	; (800389c <HAL_RCC_OscConfig+0x2b8>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003886:	f7fe f8d7 	bl	8001a38 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388c:	e011      	b.n	80038b2 <HAL_RCC_OscConfig+0x2ce>
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800
 8003894:	42470000 	.word	0x42470000
 8003898:	42470e80 	.word	0x42470e80
 800389c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a0:	f7fe f8ca 	bl	8001a38 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e0fd      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b2:	4b81      	ldr	r3, [pc, #516]	; (8003ab8 <HAL_RCC_OscConfig+0x4d4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d106      	bne.n	80038d4 <HAL_RCC_OscConfig+0x2f0>
 80038c6:	4b7d      	ldr	r3, [pc, #500]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	4a7c      	ldr	r2, [pc, #496]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	6713      	str	r3, [r2, #112]	; 0x70
 80038d2:	e01c      	b.n	800390e <HAL_RCC_OscConfig+0x32a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b05      	cmp	r3, #5
 80038da:	d10c      	bne.n	80038f6 <HAL_RCC_OscConfig+0x312>
 80038dc:	4b77      	ldr	r3, [pc, #476]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	4a76      	ldr	r2, [pc, #472]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 80038e2:	f043 0304 	orr.w	r3, r3, #4
 80038e6:	6713      	str	r3, [r2, #112]	; 0x70
 80038e8:	4b74      	ldr	r3, [pc, #464]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	4a73      	ldr	r2, [pc, #460]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	6713      	str	r3, [r2, #112]	; 0x70
 80038f4:	e00b      	b.n	800390e <HAL_RCC_OscConfig+0x32a>
 80038f6:	4b71      	ldr	r3, [pc, #452]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	4a70      	ldr	r2, [pc, #448]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 80038fc:	f023 0301 	bic.w	r3, r3, #1
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
 8003902:	4b6e      	ldr	r3, [pc, #440]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	4a6d      	ldr	r2, [pc, #436]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 8003908:	f023 0304 	bic.w	r3, r3, #4
 800390c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d015      	beq.n	8003942 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003916:	f7fe f88f 	bl	8001a38 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391c:	e00a      	b.n	8003934 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391e:	f7fe f88b 	bl	8001a38 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	f241 3288 	movw	r2, #5000	; 0x1388
 800392c:	4293      	cmp	r3, r2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e0bc      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003934:	4b61      	ldr	r3, [pc, #388]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ee      	beq.n	800391e <HAL_RCC_OscConfig+0x33a>
 8003940:	e014      	b.n	800396c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003942:	f7fe f879 	bl	8001a38 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003948:	e00a      	b.n	8003960 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fe f875 	bl	8001a38 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f241 3288 	movw	r2, #5000	; 0x1388
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e0a6      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003960:	4b56      	ldr	r3, [pc, #344]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1ee      	bne.n	800394a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d105      	bne.n	800397e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003972:	4b52      	ldr	r3, [pc, #328]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	4a51      	ldr	r2, [pc, #324]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 8003978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 8092 	beq.w	8003aac <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003988:	4b4c      	ldr	r3, [pc, #304]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 030c 	and.w	r3, r3, #12
 8003990:	2b08      	cmp	r3, #8
 8003992:	d05c      	beq.n	8003a4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b02      	cmp	r3, #2
 800399a:	d141      	bne.n	8003a20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399c:	4b48      	ldr	r3, [pc, #288]	; (8003ac0 <HAL_RCC_OscConfig+0x4dc>)
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a2:	f7fe f849 	bl	8001a38 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039aa:	f7fe f845 	bl	8001a38 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e078      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039bc:	4b3f      	ldr	r3, [pc, #252]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f0      	bne.n	80039aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	019b      	lsls	r3, r3, #6
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	3b01      	subs	r3, #1
 80039e2:	041b      	lsls	r3, r3, #16
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	061b      	lsls	r3, r3, #24
 80039ec:	4933      	ldr	r1, [pc, #204]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f2:	4b33      	ldr	r3, [pc, #204]	; (8003ac0 <HAL_RCC_OscConfig+0x4dc>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7fe f81e 	bl	8001a38 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fe f81a 	bl	8001a38 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e04d      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a12:	4b2a      	ldr	r3, [pc, #168]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x41c>
 8003a1e:	e045      	b.n	8003aac <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a20:	4b27      	ldr	r3, [pc, #156]	; (8003ac0 <HAL_RCC_OscConfig+0x4dc>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a26:	f7fe f807 	bl	8001a38 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2e:	f7fe f803 	bl	8001a38 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e036      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a40:	4b1e      	ldr	r3, [pc, #120]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f0      	bne.n	8003a2e <HAL_RCC_OscConfig+0x44a>
 8003a4c:	e02e      	b.n	8003aac <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e029      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a5a:	4b18      	ldr	r3, [pc, #96]	; (8003abc <HAL_RCC_OscConfig+0x4d8>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	69db      	ldr	r3, [r3, #28]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d11c      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d115      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a7c:	68fa      	ldr	r2, [r7, #12]
 8003a7e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a82:	4013      	ands	r3, r2
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d10d      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003a96:	429a      	cmp	r2, r3
 8003a98:	d106      	bne.n	8003aa8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d001      	beq.n	8003aac <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e000      	b.n	8003aae <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3718      	adds	r7, #24
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	40007000 	.word	0x40007000
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	42470060 	.word	0x42470060

08003ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b084      	sub	sp, #16
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d101      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e0cc      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad8:	4b68      	ldr	r3, [pc, #416]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 030f 	and.w	r3, r3, #15
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d90c      	bls.n	8003b00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae6:	4b65      	ldr	r3, [pc, #404]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aee:	4b63      	ldr	r3, [pc, #396]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 030f 	and.w	r3, r3, #15
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	d001      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e0b8      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0302 	and.w	r3, r3, #2
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d020      	beq.n	8003b4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b18:	4b59      	ldr	r3, [pc, #356]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a58      	ldr	r2, [pc, #352]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f003 0308 	and.w	r3, r3, #8
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d005      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b30:	4b53      	ldr	r3, [pc, #332]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	689b      	ldr	r3, [r3, #8]
 8003b34:	4a52      	ldr	r2, [pc, #328]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b3c:	4b50      	ldr	r3, [pc, #320]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	494d      	ldr	r1, [pc, #308]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d044      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d107      	bne.n	8003b72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b62:	4b47      	ldr	r3, [pc, #284]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d119      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6e:	2301      	movs	r3, #1
 8003b70:	e07f      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d003      	beq.n	8003b82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d107      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b82:	4b3f      	ldr	r3, [pc, #252]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d109      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e06f      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b92:	4b3b      	ldr	r3, [pc, #236]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 0302 	and.w	r3, r3, #2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e067      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ba2:	4b37      	ldr	r3, [pc, #220]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	689b      	ldr	r3, [r3, #8]
 8003ba6:	f023 0203 	bic.w	r2, r3, #3
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4934      	ldr	r1, [pc, #208]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb4:	f7fd ff40 	bl	8001a38 <HAL_GetTick>
 8003bb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	e00a      	b.n	8003bd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bbc:	f7fd ff3c 	bl	8001a38 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d901      	bls.n	8003bd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e04f      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bd2:	4b2b      	ldr	r3, [pc, #172]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 020c 	and.w	r2, r3, #12
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d1eb      	bne.n	8003bbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be4:	4b25      	ldr	r3, [pc, #148]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 030f 	and.w	r3, r3, #15
 8003bec:	683a      	ldr	r2, [r7, #0]
 8003bee:	429a      	cmp	r2, r3
 8003bf0:	d20c      	bcs.n	8003c0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf2:	4b22      	ldr	r3, [pc, #136]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf4:	683a      	ldr	r2, [r7, #0]
 8003bf6:	b2d2      	uxtb	r2, r2
 8003bf8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bfa:	4b20      	ldr	r3, [pc, #128]	; (8003c7c <HAL_RCC_ClockConfig+0x1b8>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f003 030f 	and.w	r3, r3, #15
 8003c02:	683a      	ldr	r2, [r7, #0]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d001      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e032      	b.n	8003c72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d008      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c18:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	4916      	ldr	r1, [pc, #88]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	4313      	orrs	r3, r2
 8003c28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0308 	and.w	r3, r3, #8
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d009      	beq.n	8003c4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c36:	4b12      	ldr	r3, [pc, #72]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	00db      	lsls	r3, r3, #3
 8003c44:	490e      	ldr	r1, [pc, #56]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c46:	4313      	orrs	r3, r2
 8003c48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c4a:	f000 f821 	bl	8003c90 <HAL_RCC_GetSysClockFreq>
 8003c4e:	4601      	mov	r1, r0
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	689b      	ldr	r3, [r3, #8]
 8003c54:	091b      	lsrs	r3, r3, #4
 8003c56:	f003 030f 	and.w	r3, r3, #15
 8003c5a:	4a0a      	ldr	r2, [pc, #40]	; (8003c84 <HAL_RCC_ClockConfig+0x1c0>)
 8003c5c:	5cd3      	ldrb	r3, [r2, r3]
 8003c5e:	fa21 f303 	lsr.w	r3, r1, r3
 8003c62:	4a09      	ldr	r2, [pc, #36]	; (8003c88 <HAL_RCC_ClockConfig+0x1c4>)
 8003c64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c66:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_RCC_ClockConfig+0x1c8>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fd fea0 	bl	80019b0 <HAL_InitTick>

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3710      	adds	r7, #16
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	40023c00 	.word	0x40023c00
 8003c80:	40023800 	.word	0x40023800
 8003c84:	08004f2c 	.word	0x08004f2c
 8003c88:	2000000c 	.word	0x2000000c
 8003c8c:	20000010 	.word	0x20000010

08003c90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	607b      	str	r3, [r7, #4]
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	60fb      	str	r3, [r7, #12]
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ca6:	4b63      	ldr	r3, [pc, #396]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d007      	beq.n	8003cc2 <HAL_RCC_GetSysClockFreq+0x32>
 8003cb2:	2b08      	cmp	r3, #8
 8003cb4:	d008      	beq.n	8003cc8 <HAL_RCC_GetSysClockFreq+0x38>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	f040 80b4 	bne.w	8003e24 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cbc:	4b5e      	ldr	r3, [pc, #376]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003cbe:	60bb      	str	r3, [r7, #8]
       break;
 8003cc0:	e0b3      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cc2:	4b5e      	ldr	r3, [pc, #376]	; (8003e3c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8003cc4:	60bb      	str	r3, [r7, #8]
      break;
 8003cc6:	e0b0      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cc8:	4b5a      	ldr	r3, [pc, #360]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cd2:	4b58      	ldr	r3, [pc, #352]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d04a      	beq.n	8003d74 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cde:	4b55      	ldr	r3, [pc, #340]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	099b      	lsrs	r3, r3, #6
 8003ce4:	f04f 0400 	mov.w	r4, #0
 8003ce8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003cec:	f04f 0200 	mov.w	r2, #0
 8003cf0:	ea03 0501 	and.w	r5, r3, r1
 8003cf4:	ea04 0602 	and.w	r6, r4, r2
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	4632      	mov	r2, r6
 8003cfc:	f04f 0300 	mov.w	r3, #0
 8003d00:	f04f 0400 	mov.w	r4, #0
 8003d04:	0154      	lsls	r4, r2, #5
 8003d06:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003d0a:	014b      	lsls	r3, r1, #5
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4622      	mov	r2, r4
 8003d10:	1b49      	subs	r1, r1, r5
 8003d12:	eb62 0206 	sbc.w	r2, r2, r6
 8003d16:	f04f 0300 	mov.w	r3, #0
 8003d1a:	f04f 0400 	mov.w	r4, #0
 8003d1e:	0194      	lsls	r4, r2, #6
 8003d20:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003d24:	018b      	lsls	r3, r1, #6
 8003d26:	1a5b      	subs	r3, r3, r1
 8003d28:	eb64 0402 	sbc.w	r4, r4, r2
 8003d2c:	f04f 0100 	mov.w	r1, #0
 8003d30:	f04f 0200 	mov.w	r2, #0
 8003d34:	00e2      	lsls	r2, r4, #3
 8003d36:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003d3a:	00d9      	lsls	r1, r3, #3
 8003d3c:	460b      	mov	r3, r1
 8003d3e:	4614      	mov	r4, r2
 8003d40:	195b      	adds	r3, r3, r5
 8003d42:	eb44 0406 	adc.w	r4, r4, r6
 8003d46:	f04f 0100 	mov.w	r1, #0
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	0262      	lsls	r2, r4, #9
 8003d50:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003d54:	0259      	lsls	r1, r3, #9
 8003d56:	460b      	mov	r3, r1
 8003d58:	4614      	mov	r4, r2
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	4621      	mov	r1, r4
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f04f 0400 	mov.w	r4, #0
 8003d64:	461a      	mov	r2, r3
 8003d66:	4623      	mov	r3, r4
 8003d68:	f7fc fe70 	bl	8000a4c <__aeabi_uldivmod>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	460c      	mov	r4, r1
 8003d70:	60fb      	str	r3, [r7, #12]
 8003d72:	e049      	b.n	8003e08 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d74:	4b2f      	ldr	r3, [pc, #188]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	099b      	lsrs	r3, r3, #6
 8003d7a:	f04f 0400 	mov.w	r4, #0
 8003d7e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	ea03 0501 	and.w	r5, r3, r1
 8003d8a:	ea04 0602 	and.w	r6, r4, r2
 8003d8e:	4629      	mov	r1, r5
 8003d90:	4632      	mov	r2, r6
 8003d92:	f04f 0300 	mov.w	r3, #0
 8003d96:	f04f 0400 	mov.w	r4, #0
 8003d9a:	0154      	lsls	r4, r2, #5
 8003d9c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003da0:	014b      	lsls	r3, r1, #5
 8003da2:	4619      	mov	r1, r3
 8003da4:	4622      	mov	r2, r4
 8003da6:	1b49      	subs	r1, r1, r5
 8003da8:	eb62 0206 	sbc.w	r2, r2, r6
 8003dac:	f04f 0300 	mov.w	r3, #0
 8003db0:	f04f 0400 	mov.w	r4, #0
 8003db4:	0194      	lsls	r4, r2, #6
 8003db6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003dba:	018b      	lsls	r3, r1, #6
 8003dbc:	1a5b      	subs	r3, r3, r1
 8003dbe:	eb64 0402 	sbc.w	r4, r4, r2
 8003dc2:	f04f 0100 	mov.w	r1, #0
 8003dc6:	f04f 0200 	mov.w	r2, #0
 8003dca:	00e2      	lsls	r2, r4, #3
 8003dcc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003dd0:	00d9      	lsls	r1, r3, #3
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4614      	mov	r4, r2
 8003dd6:	195b      	adds	r3, r3, r5
 8003dd8:	eb44 0406 	adc.w	r4, r4, r6
 8003ddc:	f04f 0100 	mov.w	r1, #0
 8003de0:	f04f 0200 	mov.w	r2, #0
 8003de4:	02a2      	lsls	r2, r4, #10
 8003de6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003dea:	0299      	lsls	r1, r3, #10
 8003dec:	460b      	mov	r3, r1
 8003dee:	4614      	mov	r4, r2
 8003df0:	4618      	mov	r0, r3
 8003df2:	4621      	mov	r1, r4
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f04f 0400 	mov.w	r4, #0
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	4623      	mov	r3, r4
 8003dfe:	f7fc fe25 	bl	8000a4c <__aeabi_uldivmod>
 8003e02:	4603      	mov	r3, r0
 8003e04:	460c      	mov	r4, r1
 8003e06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e08:	4b0a      	ldr	r3, [pc, #40]	; (8003e34 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	0c1b      	lsrs	r3, r3, #16
 8003e0e:	f003 0303 	and.w	r3, r3, #3
 8003e12:	3301      	adds	r3, #1
 8003e14:	005b      	lsls	r3, r3, #1
 8003e16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e18:	68fa      	ldr	r2, [r7, #12]
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e20:	60bb      	str	r3, [r7, #8]
      break;
 8003e22:	e002      	b.n	8003e2a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e24:	4b04      	ldr	r3, [pc, #16]	; (8003e38 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003e26:	60bb      	str	r3, [r7, #8]
      break;
 8003e28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e2a:	68bb      	ldr	r3, [r7, #8]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e34:	40023800 	.word	0x40023800
 8003e38:	00f42400 	.word	0x00f42400
 8003e3c:	007a1200 	.word	0x007a1200

08003e40 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e40:	b480      	push	{r7}
 8003e42:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e44:	4b03      	ldr	r3, [pc, #12]	; (8003e54 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e46:	681b      	ldr	r3, [r3, #0]
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	2000000c 	.word	0x2000000c

08003e58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e5c:	f7ff fff0 	bl	8003e40 <HAL_RCC_GetHCLKFreq>
 8003e60:	4601      	mov	r1, r0
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	0a9b      	lsrs	r3, r3, #10
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	4a03      	ldr	r2, [pc, #12]	; (8003e7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e6e:	5cd3      	ldrb	r3, [r2, r3]
 8003e70:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	08004f3c 	.word	0x08004f3c

08003e80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e01d      	b.n	8003ece <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d106      	bne.n	8003eac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f7fd fc30 	bl	800170c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2202      	movs	r2, #2
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	f000 fa14 	bl	80042ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b085      	sub	sp, #20
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	68da      	ldr	r2, [r3, #12]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f042 0201 	orr.w	r2, r2, #1
 8003eec:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0307 	and.w	r3, r3, #7
 8003ef8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2b06      	cmp	r3, #6
 8003efe:	d007      	beq.n	8003f10 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0201 	orr.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f10:	2300      	movs	r3, #0
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b082      	sub	sp, #8
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	f003 0302 	and.w	r3, r3, #2
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d122      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d11b      	bne.n	8003f7a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f06f 0202 	mvn.w	r2, #2
 8003f4a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	699b      	ldr	r3, [r3, #24]
 8003f58:	f003 0303 	and.w	r3, r3, #3
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d003      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f000 f9a5 	bl	80042b0 <HAL_TIM_IC_CaptureCallback>
 8003f66:	e005      	b.n	8003f74 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f997 	bl	800429c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f9a8 	bl	80042c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	f003 0304 	and.w	r3, r3, #4
 8003f84:	2b04      	cmp	r3, #4
 8003f86:	d122      	bne.n	8003fce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	68db      	ldr	r3, [r3, #12]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d11b      	bne.n	8003fce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f06f 0204 	mvn.w	r2, #4
 8003f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2202      	movs	r2, #2
 8003fa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	699b      	ldr	r3, [r3, #24]
 8003fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d003      	beq.n	8003fbc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f97b 	bl	80042b0 <HAL_TIM_IC_CaptureCallback>
 8003fba:	e005      	b.n	8003fc8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f96d 	bl	800429c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f97e 	bl	80042c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	691b      	ldr	r3, [r3, #16]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d122      	bne.n	8004022 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d11b      	bne.n	8004022 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f06f 0208 	mvn.w	r2, #8
 8003ff2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2204      	movs	r2, #4
 8003ff8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	69db      	ldr	r3, [r3, #28]
 8004000:	f003 0303 	and.w	r3, r3, #3
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f951 	bl	80042b0 <HAL_TIM_IC_CaptureCallback>
 800400e:	e005      	b.n	800401c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f943 	bl	800429c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f954 	bl	80042c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	f003 0310 	and.w	r3, r3, #16
 800402c:	2b10      	cmp	r3, #16
 800402e:	d122      	bne.n	8004076 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b10      	cmp	r3, #16
 800403c:	d11b      	bne.n	8004076 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f06f 0210 	mvn.w	r2, #16
 8004046:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2208      	movs	r2, #8
 800404c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	69db      	ldr	r3, [r3, #28]
 8004054:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004058:	2b00      	cmp	r3, #0
 800405a:	d003      	beq.n	8004064 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f927 	bl	80042b0 <HAL_TIM_IC_CaptureCallback>
 8004062:	e005      	b.n	8004070 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f919 	bl	800429c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f92a 	bl	80042c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d10e      	bne.n	80040a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b01      	cmp	r3, #1
 8004090:	d107      	bne.n	80040a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f06f 0201 	mvn.w	r2, #1
 800409a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800409c:	6878      	ldr	r0, [r7, #4]
 800409e:	f7fc ffff 	bl	80010a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ac:	2b80      	cmp	r3, #128	; 0x80
 80040ae:	d10e      	bne.n	80040ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ba:	2b80      	cmp	r3, #128	; 0x80
 80040bc:	d107      	bne.n	80040ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	f000 facf 	bl	800466c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691b      	ldr	r3, [r3, #16]
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	d10e      	bne.n	80040fa <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040e6:	2b40      	cmp	r3, #64	; 0x40
 80040e8:	d107      	bne.n	80040fa <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f8ef 	bl	80042d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	f003 0320 	and.w	r3, r3, #32
 8004104:	2b20      	cmp	r3, #32
 8004106:	d10e      	bne.n	8004126 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68db      	ldr	r3, [r3, #12]
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b20      	cmp	r3, #32
 8004114:	d107      	bne.n	8004126 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f06f 0220 	mvn.w	r2, #32
 800411e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 fa99 	bl	8004658 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004126:	bf00      	nop
 8004128:	3708      	adds	r7, #8
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	6078      	str	r0, [r7, #4]
 8004136:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800413e:	2b01      	cmp	r3, #1
 8004140:	d101      	bne.n	8004146 <HAL_TIM_ConfigClockSource+0x18>
 8004142:	2302      	movs	r3, #2
 8004144:	e0a6      	b.n	8004294 <HAL_TIM_ConfigClockSource+0x166>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2201      	movs	r2, #1
 800414a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2202      	movs	r2, #2
 8004152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004164:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800416c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	2b40      	cmp	r3, #64	; 0x40
 800417c:	d067      	beq.n	800424e <HAL_TIM_ConfigClockSource+0x120>
 800417e:	2b40      	cmp	r3, #64	; 0x40
 8004180:	d80b      	bhi.n	800419a <HAL_TIM_ConfigClockSource+0x6c>
 8004182:	2b10      	cmp	r3, #16
 8004184:	d073      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x140>
 8004186:	2b10      	cmp	r3, #16
 8004188:	d802      	bhi.n	8004190 <HAL_TIM_ConfigClockSource+0x62>
 800418a:	2b00      	cmp	r3, #0
 800418c:	d06f      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800418e:	e078      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004190:	2b20      	cmp	r3, #32
 8004192:	d06c      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x140>
 8004194:	2b30      	cmp	r3, #48	; 0x30
 8004196:	d06a      	beq.n	800426e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004198:	e073      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800419a:	2b70      	cmp	r3, #112	; 0x70
 800419c:	d00d      	beq.n	80041ba <HAL_TIM_ConfigClockSource+0x8c>
 800419e:	2b70      	cmp	r3, #112	; 0x70
 80041a0:	d804      	bhi.n	80041ac <HAL_TIM_ConfigClockSource+0x7e>
 80041a2:	2b50      	cmp	r3, #80	; 0x50
 80041a4:	d033      	beq.n	800420e <HAL_TIM_ConfigClockSource+0xe0>
 80041a6:	2b60      	cmp	r3, #96	; 0x60
 80041a8:	d041      	beq.n	800422e <HAL_TIM_ConfigClockSource+0x100>
      break;
 80041aa:	e06a      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80041ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041b0:	d066      	beq.n	8004280 <HAL_TIM_ConfigClockSource+0x152>
 80041b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b6:	d017      	beq.n	80041e8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80041b8:	e063      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6818      	ldr	r0, [r3, #0]
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	6899      	ldr	r1, [r3, #8]
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685a      	ldr	r2, [r3, #4]
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	f000 f9a9 	bl	8004520 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80041dc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	609a      	str	r2, [r3, #8]
      break;
 80041e6:	e04c      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6818      	ldr	r0, [r3, #0]
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	6899      	ldr	r1, [r3, #8]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	685a      	ldr	r2, [r3, #4]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	68db      	ldr	r3, [r3, #12]
 80041f8:	f000 f992 	bl	8004520 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800420a:	609a      	str	r2, [r3, #8]
      break;
 800420c:	e039      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6818      	ldr	r0, [r3, #0]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	6859      	ldr	r1, [r3, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	461a      	mov	r2, r3
 800421c:	f000 f906 	bl	800442c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	2150      	movs	r1, #80	; 0x50
 8004226:	4618      	mov	r0, r3
 8004228:	f000 f95f 	bl	80044ea <TIM_ITRx_SetConfig>
      break;
 800422c:	e029      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6818      	ldr	r0, [r3, #0]
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	6859      	ldr	r1, [r3, #4]
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	68db      	ldr	r3, [r3, #12]
 800423a:	461a      	mov	r2, r3
 800423c:	f000 f925 	bl	800448a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2160      	movs	r1, #96	; 0x60
 8004246:	4618      	mov	r0, r3
 8004248:	f000 f94f 	bl	80044ea <TIM_ITRx_SetConfig>
      break;
 800424c:	e019      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6818      	ldr	r0, [r3, #0]
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	6859      	ldr	r1, [r3, #4]
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	68db      	ldr	r3, [r3, #12]
 800425a:	461a      	mov	r2, r3
 800425c:	f000 f8e6 	bl	800442c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	2140      	movs	r1, #64	; 0x40
 8004266:	4618      	mov	r0, r3
 8004268:	f000 f93f 	bl	80044ea <TIM_ITRx_SetConfig>
      break;
 800426c:	e009      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f000 f936 	bl	80044ea <TIM_ITRx_SetConfig>
      break;
 800427e:	e000      	b.n	8004282 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004280:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3710      	adds	r7, #16
 8004298:	46bd      	mov	sp, r7
 800429a:	bd80      	pop	{r7, pc}

0800429c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042a4:	bf00      	nop
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042cc:	bf00      	nop
 80042ce:	370c      	adds	r7, #12
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042d8:	b480      	push	{r7}
 80042da:	b083      	sub	sp, #12
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042e0:	bf00      	nop
 80042e2:	370c      	adds	r7, #12
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr

080042ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b085      	sub	sp, #20
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a40      	ldr	r2, [pc, #256]	; (8004400 <TIM_Base_SetConfig+0x114>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d013      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430a:	d00f      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a3d      	ldr	r2, [pc, #244]	; (8004404 <TIM_Base_SetConfig+0x118>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d00b      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	4a3c      	ldr	r2, [pc, #240]	; (8004408 <TIM_Base_SetConfig+0x11c>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d007      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	4a3b      	ldr	r2, [pc, #236]	; (800440c <TIM_Base_SetConfig+0x120>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d003      	beq.n	800432c <TIM_Base_SetConfig+0x40>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	4a3a      	ldr	r2, [pc, #232]	; (8004410 <TIM_Base_SetConfig+0x124>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d108      	bne.n	800433e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004332:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	4313      	orrs	r3, r2
 800433c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	4a2f      	ldr	r2, [pc, #188]	; (8004400 <TIM_Base_SetConfig+0x114>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d02b      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800434c:	d027      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a2c      	ldr	r2, [pc, #176]	; (8004404 <TIM_Base_SetConfig+0x118>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d023      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a2b      	ldr	r2, [pc, #172]	; (8004408 <TIM_Base_SetConfig+0x11c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d01f      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a2a      	ldr	r2, [pc, #168]	; (800440c <TIM_Base_SetConfig+0x120>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d01b      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	4a29      	ldr	r2, [pc, #164]	; (8004410 <TIM_Base_SetConfig+0x124>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d017      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	4a28      	ldr	r2, [pc, #160]	; (8004414 <TIM_Base_SetConfig+0x128>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d013      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	4a27      	ldr	r2, [pc, #156]	; (8004418 <TIM_Base_SetConfig+0x12c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d00f      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a26      	ldr	r2, [pc, #152]	; (800441c <TIM_Base_SetConfig+0x130>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d00b      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a25      	ldr	r2, [pc, #148]	; (8004420 <TIM_Base_SetConfig+0x134>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d007      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	4a24      	ldr	r2, [pc, #144]	; (8004424 <TIM_Base_SetConfig+0x138>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d003      	beq.n	800439e <TIM_Base_SetConfig+0xb2>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a23      	ldr	r2, [pc, #140]	; (8004428 <TIM_Base_SetConfig+0x13c>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d108      	bne.n	80043b0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	68db      	ldr	r3, [r3, #12]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	4313      	orrs	r3, r2
 80043ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	695b      	ldr	r3, [r3, #20]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	689a      	ldr	r2, [r3, #8]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043cc:	683b      	ldr	r3, [r7, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <TIM_Base_SetConfig+0x114>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d003      	beq.n	80043e4 <TIM_Base_SetConfig+0xf8>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	4a0c      	ldr	r2, [pc, #48]	; (8004410 <TIM_Base_SetConfig+0x124>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d103      	bne.n	80043ec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	691a      	ldr	r2, [r3, #16]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	615a      	str	r2, [r3, #20]
}
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	40010000 	.word	0x40010000
 8004404:	40000400 	.word	0x40000400
 8004408:	40000800 	.word	0x40000800
 800440c:	40000c00 	.word	0x40000c00
 8004410:	40010400 	.word	0x40010400
 8004414:	40014000 	.word	0x40014000
 8004418:	40014400 	.word	0x40014400
 800441c:	40014800 	.word	0x40014800
 8004420:	40001800 	.word	0x40001800
 8004424:	40001c00 	.word	0x40001c00
 8004428:	40002000 	.word	0x40002000

0800442c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f023 0201 	bic.w	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f023 030a 	bic.w	r3, r3, #10
 8004468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800448a:	b480      	push	{r7}
 800448c:	b087      	sub	sp, #28
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	f023 0210 	bic.w	r2, r3, #16
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6a1b      	ldr	r3, [r3, #32]
 80044ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	031b      	lsls	r3, r3, #12
 80044ba:	697a      	ldr	r2, [r7, #20]
 80044bc:	4313      	orrs	r3, r2
 80044be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	011b      	lsls	r3, r3, #4
 80044cc:	693a      	ldr	r2, [r7, #16]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	697a      	ldr	r2, [r7, #20]
 80044d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	693a      	ldr	r2, [r7, #16]
 80044dc:	621a      	str	r2, [r3, #32]
}
 80044de:	bf00      	nop
 80044e0:	371c      	adds	r7, #28
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b085      	sub	sp, #20
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
 80044f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004500:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004502:	683a      	ldr	r2, [r7, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	f043 0307 	orr.w	r3, r3, #7
 800450c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	609a      	str	r2, [r3, #8]
}
 8004514:	bf00      	nop
 8004516:	3714      	adds	r7, #20
 8004518:	46bd      	mov	sp, r7
 800451a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451e:	4770      	bx	lr

08004520 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004520:	b480      	push	{r7}
 8004522:	b087      	sub	sp, #28
 8004524:	af00      	add	r7, sp, #0
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	689b      	ldr	r3, [r3, #8]
 8004532:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800453a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	021a      	lsls	r2, r3, #8
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	431a      	orrs	r2, r3
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	4313      	orrs	r3, r2
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	609a      	str	r2, [r3, #8]
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr

08004560 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004560:	b480      	push	{r7}
 8004562:	b085      	sub	sp, #20
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004570:	2b01      	cmp	r3, #1
 8004572:	d101      	bne.n	8004578 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004574:	2302      	movs	r3, #2
 8004576:	e05a      	b.n	800462e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2202      	movs	r2, #2
 8004584:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800459e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	68fa      	ldr	r2, [r7, #12]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a21      	ldr	r2, [pc, #132]	; (800463c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d022      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045c4:	d01d      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a1d      	ldr	r2, [pc, #116]	; (8004640 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d018      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	4a1b      	ldr	r2, [pc, #108]	; (8004644 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d013      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a1a      	ldr	r2, [pc, #104]	; (8004648 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d00e      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a18      	ldr	r2, [pc, #96]	; (800464c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80045ea:	4293      	cmp	r3, r2
 80045ec:	d009      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4a17      	ldr	r2, [pc, #92]	; (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d004      	beq.n	8004602 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a15      	ldr	r2, [pc, #84]	; (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d10c      	bne.n	800461c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004608:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	4313      	orrs	r3, r2
 8004612:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68ba      	ldr	r2, [r7, #8]
 800461a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800
 8004648:	40000c00 	.word	0x40000c00
 800464c:	40010400 	.word	0x40010400
 8004650:	40014000 	.word	0x40014000
 8004654:	40001800 	.word	0x40001800

08004658 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004658:	b480      	push	{r7}
 800465a:	b083      	sub	sp, #12
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr

0800466c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800466c:	b480      	push	{r7}
 800466e:	b083      	sub	sp, #12
 8004670:	af00      	add	r7, sp, #0
 8004672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr

08004680 <__errno>:
 8004680:	4b01      	ldr	r3, [pc, #4]	; (8004688 <__errno+0x8>)
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	4770      	bx	lr
 8004686:	bf00      	nop
 8004688:	20000018 	.word	0x20000018

0800468c <__libc_init_array>:
 800468c:	b570      	push	{r4, r5, r6, lr}
 800468e:	4e0d      	ldr	r6, [pc, #52]	; (80046c4 <__libc_init_array+0x38>)
 8004690:	4c0d      	ldr	r4, [pc, #52]	; (80046c8 <__libc_init_array+0x3c>)
 8004692:	1ba4      	subs	r4, r4, r6
 8004694:	10a4      	asrs	r4, r4, #2
 8004696:	2500      	movs	r5, #0
 8004698:	42a5      	cmp	r5, r4
 800469a:	d109      	bne.n	80046b0 <__libc_init_array+0x24>
 800469c:	4e0b      	ldr	r6, [pc, #44]	; (80046cc <__libc_init_array+0x40>)
 800469e:	4c0c      	ldr	r4, [pc, #48]	; (80046d0 <__libc_init_array+0x44>)
 80046a0:	f000 fc26 	bl	8004ef0 <_init>
 80046a4:	1ba4      	subs	r4, r4, r6
 80046a6:	10a4      	asrs	r4, r4, #2
 80046a8:	2500      	movs	r5, #0
 80046aa:	42a5      	cmp	r5, r4
 80046ac:	d105      	bne.n	80046ba <__libc_init_array+0x2e>
 80046ae:	bd70      	pop	{r4, r5, r6, pc}
 80046b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046b4:	4798      	blx	r3
 80046b6:	3501      	adds	r5, #1
 80046b8:	e7ee      	b.n	8004698 <__libc_init_array+0xc>
 80046ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046be:	4798      	blx	r3
 80046c0:	3501      	adds	r5, #1
 80046c2:	e7f2      	b.n	80046aa <__libc_init_array+0x1e>
 80046c4:	08004f80 	.word	0x08004f80
 80046c8:	08004f80 	.word	0x08004f80
 80046cc:	08004f80 	.word	0x08004f80
 80046d0:	08004f84 	.word	0x08004f84

080046d4 <memset>:
 80046d4:	4402      	add	r2, r0
 80046d6:	4603      	mov	r3, r0
 80046d8:	4293      	cmp	r3, r2
 80046da:	d100      	bne.n	80046de <memset+0xa>
 80046dc:	4770      	bx	lr
 80046de:	f803 1b01 	strb.w	r1, [r3], #1
 80046e2:	e7f9      	b.n	80046d8 <memset+0x4>

080046e4 <siprintf>:
 80046e4:	b40e      	push	{r1, r2, r3}
 80046e6:	b500      	push	{lr}
 80046e8:	b09c      	sub	sp, #112	; 0x70
 80046ea:	ab1d      	add	r3, sp, #116	; 0x74
 80046ec:	9002      	str	r0, [sp, #8]
 80046ee:	9006      	str	r0, [sp, #24]
 80046f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80046f4:	4809      	ldr	r0, [pc, #36]	; (800471c <siprintf+0x38>)
 80046f6:	9107      	str	r1, [sp, #28]
 80046f8:	9104      	str	r1, [sp, #16]
 80046fa:	4909      	ldr	r1, [pc, #36]	; (8004720 <siprintf+0x3c>)
 80046fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004700:	9105      	str	r1, [sp, #20]
 8004702:	6800      	ldr	r0, [r0, #0]
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	a902      	add	r1, sp, #8
 8004708:	f000 f866 	bl	80047d8 <_svfiprintf_r>
 800470c:	9b02      	ldr	r3, [sp, #8]
 800470e:	2200      	movs	r2, #0
 8004710:	701a      	strb	r2, [r3, #0]
 8004712:	b01c      	add	sp, #112	; 0x70
 8004714:	f85d eb04 	ldr.w	lr, [sp], #4
 8004718:	b003      	add	sp, #12
 800471a:	4770      	bx	lr
 800471c:	20000018 	.word	0x20000018
 8004720:	ffff0208 	.word	0xffff0208

08004724 <__ssputs_r>:
 8004724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004728:	688e      	ldr	r6, [r1, #8]
 800472a:	429e      	cmp	r6, r3
 800472c:	4682      	mov	sl, r0
 800472e:	460c      	mov	r4, r1
 8004730:	4690      	mov	r8, r2
 8004732:	4699      	mov	r9, r3
 8004734:	d837      	bhi.n	80047a6 <__ssputs_r+0x82>
 8004736:	898a      	ldrh	r2, [r1, #12]
 8004738:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800473c:	d031      	beq.n	80047a2 <__ssputs_r+0x7e>
 800473e:	6825      	ldr	r5, [r4, #0]
 8004740:	6909      	ldr	r1, [r1, #16]
 8004742:	1a6f      	subs	r7, r5, r1
 8004744:	6965      	ldr	r5, [r4, #20]
 8004746:	2302      	movs	r3, #2
 8004748:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800474c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004750:	f109 0301 	add.w	r3, r9, #1
 8004754:	443b      	add	r3, r7
 8004756:	429d      	cmp	r5, r3
 8004758:	bf38      	it	cc
 800475a:	461d      	movcc	r5, r3
 800475c:	0553      	lsls	r3, r2, #21
 800475e:	d530      	bpl.n	80047c2 <__ssputs_r+0x9e>
 8004760:	4629      	mov	r1, r5
 8004762:	f000 fb2b 	bl	8004dbc <_malloc_r>
 8004766:	4606      	mov	r6, r0
 8004768:	b950      	cbnz	r0, 8004780 <__ssputs_r+0x5c>
 800476a:	230c      	movs	r3, #12
 800476c:	f8ca 3000 	str.w	r3, [sl]
 8004770:	89a3      	ldrh	r3, [r4, #12]
 8004772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004776:	81a3      	strh	r3, [r4, #12]
 8004778:	f04f 30ff 	mov.w	r0, #4294967295
 800477c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004780:	463a      	mov	r2, r7
 8004782:	6921      	ldr	r1, [r4, #16]
 8004784:	f000 faa8 	bl	8004cd8 <memcpy>
 8004788:	89a3      	ldrh	r3, [r4, #12]
 800478a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800478e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004792:	81a3      	strh	r3, [r4, #12]
 8004794:	6126      	str	r6, [r4, #16]
 8004796:	6165      	str	r5, [r4, #20]
 8004798:	443e      	add	r6, r7
 800479a:	1bed      	subs	r5, r5, r7
 800479c:	6026      	str	r6, [r4, #0]
 800479e:	60a5      	str	r5, [r4, #8]
 80047a0:	464e      	mov	r6, r9
 80047a2:	454e      	cmp	r6, r9
 80047a4:	d900      	bls.n	80047a8 <__ssputs_r+0x84>
 80047a6:	464e      	mov	r6, r9
 80047a8:	4632      	mov	r2, r6
 80047aa:	4641      	mov	r1, r8
 80047ac:	6820      	ldr	r0, [r4, #0]
 80047ae:	f000 fa9e 	bl	8004cee <memmove>
 80047b2:	68a3      	ldr	r3, [r4, #8]
 80047b4:	1b9b      	subs	r3, r3, r6
 80047b6:	60a3      	str	r3, [r4, #8]
 80047b8:	6823      	ldr	r3, [r4, #0]
 80047ba:	441e      	add	r6, r3
 80047bc:	6026      	str	r6, [r4, #0]
 80047be:	2000      	movs	r0, #0
 80047c0:	e7dc      	b.n	800477c <__ssputs_r+0x58>
 80047c2:	462a      	mov	r2, r5
 80047c4:	f000 fb54 	bl	8004e70 <_realloc_r>
 80047c8:	4606      	mov	r6, r0
 80047ca:	2800      	cmp	r0, #0
 80047cc:	d1e2      	bne.n	8004794 <__ssputs_r+0x70>
 80047ce:	6921      	ldr	r1, [r4, #16]
 80047d0:	4650      	mov	r0, sl
 80047d2:	f000 faa5 	bl	8004d20 <_free_r>
 80047d6:	e7c8      	b.n	800476a <__ssputs_r+0x46>

080047d8 <_svfiprintf_r>:
 80047d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047dc:	461d      	mov	r5, r3
 80047de:	898b      	ldrh	r3, [r1, #12]
 80047e0:	061f      	lsls	r7, r3, #24
 80047e2:	b09d      	sub	sp, #116	; 0x74
 80047e4:	4680      	mov	r8, r0
 80047e6:	460c      	mov	r4, r1
 80047e8:	4616      	mov	r6, r2
 80047ea:	d50f      	bpl.n	800480c <_svfiprintf_r+0x34>
 80047ec:	690b      	ldr	r3, [r1, #16]
 80047ee:	b96b      	cbnz	r3, 800480c <_svfiprintf_r+0x34>
 80047f0:	2140      	movs	r1, #64	; 0x40
 80047f2:	f000 fae3 	bl	8004dbc <_malloc_r>
 80047f6:	6020      	str	r0, [r4, #0]
 80047f8:	6120      	str	r0, [r4, #16]
 80047fa:	b928      	cbnz	r0, 8004808 <_svfiprintf_r+0x30>
 80047fc:	230c      	movs	r3, #12
 80047fe:	f8c8 3000 	str.w	r3, [r8]
 8004802:	f04f 30ff 	mov.w	r0, #4294967295
 8004806:	e0c8      	b.n	800499a <_svfiprintf_r+0x1c2>
 8004808:	2340      	movs	r3, #64	; 0x40
 800480a:	6163      	str	r3, [r4, #20]
 800480c:	2300      	movs	r3, #0
 800480e:	9309      	str	r3, [sp, #36]	; 0x24
 8004810:	2320      	movs	r3, #32
 8004812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004816:	2330      	movs	r3, #48	; 0x30
 8004818:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800481c:	9503      	str	r5, [sp, #12]
 800481e:	f04f 0b01 	mov.w	fp, #1
 8004822:	4637      	mov	r7, r6
 8004824:	463d      	mov	r5, r7
 8004826:	f815 3b01 	ldrb.w	r3, [r5], #1
 800482a:	b10b      	cbz	r3, 8004830 <_svfiprintf_r+0x58>
 800482c:	2b25      	cmp	r3, #37	; 0x25
 800482e:	d13e      	bne.n	80048ae <_svfiprintf_r+0xd6>
 8004830:	ebb7 0a06 	subs.w	sl, r7, r6
 8004834:	d00b      	beq.n	800484e <_svfiprintf_r+0x76>
 8004836:	4653      	mov	r3, sl
 8004838:	4632      	mov	r2, r6
 800483a:	4621      	mov	r1, r4
 800483c:	4640      	mov	r0, r8
 800483e:	f7ff ff71 	bl	8004724 <__ssputs_r>
 8004842:	3001      	adds	r0, #1
 8004844:	f000 80a4 	beq.w	8004990 <_svfiprintf_r+0x1b8>
 8004848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800484a:	4453      	add	r3, sl
 800484c:	9309      	str	r3, [sp, #36]	; 0x24
 800484e:	783b      	ldrb	r3, [r7, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 809d 	beq.w	8004990 <_svfiprintf_r+0x1b8>
 8004856:	2300      	movs	r3, #0
 8004858:	f04f 32ff 	mov.w	r2, #4294967295
 800485c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004860:	9304      	str	r3, [sp, #16]
 8004862:	9307      	str	r3, [sp, #28]
 8004864:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004868:	931a      	str	r3, [sp, #104]	; 0x68
 800486a:	462f      	mov	r7, r5
 800486c:	2205      	movs	r2, #5
 800486e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004872:	4850      	ldr	r0, [pc, #320]	; (80049b4 <_svfiprintf_r+0x1dc>)
 8004874:	f7fb fcac 	bl	80001d0 <memchr>
 8004878:	9b04      	ldr	r3, [sp, #16]
 800487a:	b9d0      	cbnz	r0, 80048b2 <_svfiprintf_r+0xda>
 800487c:	06d9      	lsls	r1, r3, #27
 800487e:	bf44      	itt	mi
 8004880:	2220      	movmi	r2, #32
 8004882:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004886:	071a      	lsls	r2, r3, #28
 8004888:	bf44      	itt	mi
 800488a:	222b      	movmi	r2, #43	; 0x2b
 800488c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004890:	782a      	ldrb	r2, [r5, #0]
 8004892:	2a2a      	cmp	r2, #42	; 0x2a
 8004894:	d015      	beq.n	80048c2 <_svfiprintf_r+0xea>
 8004896:	9a07      	ldr	r2, [sp, #28]
 8004898:	462f      	mov	r7, r5
 800489a:	2000      	movs	r0, #0
 800489c:	250a      	movs	r5, #10
 800489e:	4639      	mov	r1, r7
 80048a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80048a4:	3b30      	subs	r3, #48	; 0x30
 80048a6:	2b09      	cmp	r3, #9
 80048a8:	d94d      	bls.n	8004946 <_svfiprintf_r+0x16e>
 80048aa:	b1b8      	cbz	r0, 80048dc <_svfiprintf_r+0x104>
 80048ac:	e00f      	b.n	80048ce <_svfiprintf_r+0xf6>
 80048ae:	462f      	mov	r7, r5
 80048b0:	e7b8      	b.n	8004824 <_svfiprintf_r+0x4c>
 80048b2:	4a40      	ldr	r2, [pc, #256]	; (80049b4 <_svfiprintf_r+0x1dc>)
 80048b4:	1a80      	subs	r0, r0, r2
 80048b6:	fa0b f000 	lsl.w	r0, fp, r0
 80048ba:	4318      	orrs	r0, r3
 80048bc:	9004      	str	r0, [sp, #16]
 80048be:	463d      	mov	r5, r7
 80048c0:	e7d3      	b.n	800486a <_svfiprintf_r+0x92>
 80048c2:	9a03      	ldr	r2, [sp, #12]
 80048c4:	1d11      	adds	r1, r2, #4
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	9103      	str	r1, [sp, #12]
 80048ca:	2a00      	cmp	r2, #0
 80048cc:	db01      	blt.n	80048d2 <_svfiprintf_r+0xfa>
 80048ce:	9207      	str	r2, [sp, #28]
 80048d0:	e004      	b.n	80048dc <_svfiprintf_r+0x104>
 80048d2:	4252      	negs	r2, r2
 80048d4:	f043 0302 	orr.w	r3, r3, #2
 80048d8:	9207      	str	r2, [sp, #28]
 80048da:	9304      	str	r3, [sp, #16]
 80048dc:	783b      	ldrb	r3, [r7, #0]
 80048de:	2b2e      	cmp	r3, #46	; 0x2e
 80048e0:	d10c      	bne.n	80048fc <_svfiprintf_r+0x124>
 80048e2:	787b      	ldrb	r3, [r7, #1]
 80048e4:	2b2a      	cmp	r3, #42	; 0x2a
 80048e6:	d133      	bne.n	8004950 <_svfiprintf_r+0x178>
 80048e8:	9b03      	ldr	r3, [sp, #12]
 80048ea:	1d1a      	adds	r2, r3, #4
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	9203      	str	r2, [sp, #12]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	bfb8      	it	lt
 80048f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80048f8:	3702      	adds	r7, #2
 80048fa:	9305      	str	r3, [sp, #20]
 80048fc:	4d2e      	ldr	r5, [pc, #184]	; (80049b8 <_svfiprintf_r+0x1e0>)
 80048fe:	7839      	ldrb	r1, [r7, #0]
 8004900:	2203      	movs	r2, #3
 8004902:	4628      	mov	r0, r5
 8004904:	f7fb fc64 	bl	80001d0 <memchr>
 8004908:	b138      	cbz	r0, 800491a <_svfiprintf_r+0x142>
 800490a:	2340      	movs	r3, #64	; 0x40
 800490c:	1b40      	subs	r0, r0, r5
 800490e:	fa03 f000 	lsl.w	r0, r3, r0
 8004912:	9b04      	ldr	r3, [sp, #16]
 8004914:	4303      	orrs	r3, r0
 8004916:	3701      	adds	r7, #1
 8004918:	9304      	str	r3, [sp, #16]
 800491a:	7839      	ldrb	r1, [r7, #0]
 800491c:	4827      	ldr	r0, [pc, #156]	; (80049bc <_svfiprintf_r+0x1e4>)
 800491e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004922:	2206      	movs	r2, #6
 8004924:	1c7e      	adds	r6, r7, #1
 8004926:	f7fb fc53 	bl	80001d0 <memchr>
 800492a:	2800      	cmp	r0, #0
 800492c:	d038      	beq.n	80049a0 <_svfiprintf_r+0x1c8>
 800492e:	4b24      	ldr	r3, [pc, #144]	; (80049c0 <_svfiprintf_r+0x1e8>)
 8004930:	bb13      	cbnz	r3, 8004978 <_svfiprintf_r+0x1a0>
 8004932:	9b03      	ldr	r3, [sp, #12]
 8004934:	3307      	adds	r3, #7
 8004936:	f023 0307 	bic.w	r3, r3, #7
 800493a:	3308      	adds	r3, #8
 800493c:	9303      	str	r3, [sp, #12]
 800493e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004940:	444b      	add	r3, r9
 8004942:	9309      	str	r3, [sp, #36]	; 0x24
 8004944:	e76d      	b.n	8004822 <_svfiprintf_r+0x4a>
 8004946:	fb05 3202 	mla	r2, r5, r2, r3
 800494a:	2001      	movs	r0, #1
 800494c:	460f      	mov	r7, r1
 800494e:	e7a6      	b.n	800489e <_svfiprintf_r+0xc6>
 8004950:	2300      	movs	r3, #0
 8004952:	3701      	adds	r7, #1
 8004954:	9305      	str	r3, [sp, #20]
 8004956:	4619      	mov	r1, r3
 8004958:	250a      	movs	r5, #10
 800495a:	4638      	mov	r0, r7
 800495c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004960:	3a30      	subs	r2, #48	; 0x30
 8004962:	2a09      	cmp	r2, #9
 8004964:	d903      	bls.n	800496e <_svfiprintf_r+0x196>
 8004966:	2b00      	cmp	r3, #0
 8004968:	d0c8      	beq.n	80048fc <_svfiprintf_r+0x124>
 800496a:	9105      	str	r1, [sp, #20]
 800496c:	e7c6      	b.n	80048fc <_svfiprintf_r+0x124>
 800496e:	fb05 2101 	mla	r1, r5, r1, r2
 8004972:	2301      	movs	r3, #1
 8004974:	4607      	mov	r7, r0
 8004976:	e7f0      	b.n	800495a <_svfiprintf_r+0x182>
 8004978:	ab03      	add	r3, sp, #12
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	4622      	mov	r2, r4
 800497e:	4b11      	ldr	r3, [pc, #68]	; (80049c4 <_svfiprintf_r+0x1ec>)
 8004980:	a904      	add	r1, sp, #16
 8004982:	4640      	mov	r0, r8
 8004984:	f3af 8000 	nop.w
 8004988:	f1b0 3fff 	cmp.w	r0, #4294967295
 800498c:	4681      	mov	r9, r0
 800498e:	d1d6      	bne.n	800493e <_svfiprintf_r+0x166>
 8004990:	89a3      	ldrh	r3, [r4, #12]
 8004992:	065b      	lsls	r3, r3, #25
 8004994:	f53f af35 	bmi.w	8004802 <_svfiprintf_r+0x2a>
 8004998:	9809      	ldr	r0, [sp, #36]	; 0x24
 800499a:	b01d      	add	sp, #116	; 0x74
 800499c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80049a0:	ab03      	add	r3, sp, #12
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	4622      	mov	r2, r4
 80049a6:	4b07      	ldr	r3, [pc, #28]	; (80049c4 <_svfiprintf_r+0x1ec>)
 80049a8:	a904      	add	r1, sp, #16
 80049aa:	4640      	mov	r0, r8
 80049ac:	f000 f882 	bl	8004ab4 <_printf_i>
 80049b0:	e7ea      	b.n	8004988 <_svfiprintf_r+0x1b0>
 80049b2:	bf00      	nop
 80049b4:	08004f44 	.word	0x08004f44
 80049b8:	08004f4a 	.word	0x08004f4a
 80049bc:	08004f4e 	.word	0x08004f4e
 80049c0:	00000000 	.word	0x00000000
 80049c4:	08004725 	.word	0x08004725

080049c8 <_printf_common>:
 80049c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049cc:	4691      	mov	r9, r2
 80049ce:	461f      	mov	r7, r3
 80049d0:	688a      	ldr	r2, [r1, #8]
 80049d2:	690b      	ldr	r3, [r1, #16]
 80049d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80049d8:	4293      	cmp	r3, r2
 80049da:	bfb8      	it	lt
 80049dc:	4613      	movlt	r3, r2
 80049de:	f8c9 3000 	str.w	r3, [r9]
 80049e2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80049e6:	4606      	mov	r6, r0
 80049e8:	460c      	mov	r4, r1
 80049ea:	b112      	cbz	r2, 80049f2 <_printf_common+0x2a>
 80049ec:	3301      	adds	r3, #1
 80049ee:	f8c9 3000 	str.w	r3, [r9]
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	0699      	lsls	r1, r3, #26
 80049f6:	bf42      	ittt	mi
 80049f8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80049fc:	3302      	addmi	r3, #2
 80049fe:	f8c9 3000 	strmi.w	r3, [r9]
 8004a02:	6825      	ldr	r5, [r4, #0]
 8004a04:	f015 0506 	ands.w	r5, r5, #6
 8004a08:	d107      	bne.n	8004a1a <_printf_common+0x52>
 8004a0a:	f104 0a19 	add.w	sl, r4, #25
 8004a0e:	68e3      	ldr	r3, [r4, #12]
 8004a10:	f8d9 2000 	ldr.w	r2, [r9]
 8004a14:	1a9b      	subs	r3, r3, r2
 8004a16:	42ab      	cmp	r3, r5
 8004a18:	dc28      	bgt.n	8004a6c <_printf_common+0xa4>
 8004a1a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a1e:	6822      	ldr	r2, [r4, #0]
 8004a20:	3300      	adds	r3, #0
 8004a22:	bf18      	it	ne
 8004a24:	2301      	movne	r3, #1
 8004a26:	0692      	lsls	r2, r2, #26
 8004a28:	d42d      	bmi.n	8004a86 <_printf_common+0xbe>
 8004a2a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004a2e:	4639      	mov	r1, r7
 8004a30:	4630      	mov	r0, r6
 8004a32:	47c0      	blx	r8
 8004a34:	3001      	adds	r0, #1
 8004a36:	d020      	beq.n	8004a7a <_printf_common+0xb2>
 8004a38:	6823      	ldr	r3, [r4, #0]
 8004a3a:	68e5      	ldr	r5, [r4, #12]
 8004a3c:	f8d9 2000 	ldr.w	r2, [r9]
 8004a40:	f003 0306 	and.w	r3, r3, #6
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	bf08      	it	eq
 8004a48:	1aad      	subeq	r5, r5, r2
 8004a4a:	68a3      	ldr	r3, [r4, #8]
 8004a4c:	6922      	ldr	r2, [r4, #16]
 8004a4e:	bf0c      	ite	eq
 8004a50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a54:	2500      	movne	r5, #0
 8004a56:	4293      	cmp	r3, r2
 8004a58:	bfc4      	itt	gt
 8004a5a:	1a9b      	subgt	r3, r3, r2
 8004a5c:	18ed      	addgt	r5, r5, r3
 8004a5e:	f04f 0900 	mov.w	r9, #0
 8004a62:	341a      	adds	r4, #26
 8004a64:	454d      	cmp	r5, r9
 8004a66:	d11a      	bne.n	8004a9e <_printf_common+0xd6>
 8004a68:	2000      	movs	r0, #0
 8004a6a:	e008      	b.n	8004a7e <_printf_common+0xb6>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	4652      	mov	r2, sl
 8004a70:	4639      	mov	r1, r7
 8004a72:	4630      	mov	r0, r6
 8004a74:	47c0      	blx	r8
 8004a76:	3001      	adds	r0, #1
 8004a78:	d103      	bne.n	8004a82 <_printf_common+0xba>
 8004a7a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a82:	3501      	adds	r5, #1
 8004a84:	e7c3      	b.n	8004a0e <_printf_common+0x46>
 8004a86:	18e1      	adds	r1, r4, r3
 8004a88:	1c5a      	adds	r2, r3, #1
 8004a8a:	2030      	movs	r0, #48	; 0x30
 8004a8c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004a90:	4422      	add	r2, r4
 8004a92:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004a96:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004a9a:	3302      	adds	r3, #2
 8004a9c:	e7c5      	b.n	8004a2a <_printf_common+0x62>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	4622      	mov	r2, r4
 8004aa2:	4639      	mov	r1, r7
 8004aa4:	4630      	mov	r0, r6
 8004aa6:	47c0      	blx	r8
 8004aa8:	3001      	adds	r0, #1
 8004aaa:	d0e6      	beq.n	8004a7a <_printf_common+0xb2>
 8004aac:	f109 0901 	add.w	r9, r9, #1
 8004ab0:	e7d8      	b.n	8004a64 <_printf_common+0x9c>
	...

08004ab4 <_printf_i>:
 8004ab4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004ab8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004abc:	460c      	mov	r4, r1
 8004abe:	7e09      	ldrb	r1, [r1, #24]
 8004ac0:	b085      	sub	sp, #20
 8004ac2:	296e      	cmp	r1, #110	; 0x6e
 8004ac4:	4617      	mov	r7, r2
 8004ac6:	4606      	mov	r6, r0
 8004ac8:	4698      	mov	r8, r3
 8004aca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004acc:	f000 80b3 	beq.w	8004c36 <_printf_i+0x182>
 8004ad0:	d822      	bhi.n	8004b18 <_printf_i+0x64>
 8004ad2:	2963      	cmp	r1, #99	; 0x63
 8004ad4:	d036      	beq.n	8004b44 <_printf_i+0x90>
 8004ad6:	d80a      	bhi.n	8004aee <_printf_i+0x3a>
 8004ad8:	2900      	cmp	r1, #0
 8004ada:	f000 80b9 	beq.w	8004c50 <_printf_i+0x19c>
 8004ade:	2958      	cmp	r1, #88	; 0x58
 8004ae0:	f000 8083 	beq.w	8004bea <_printf_i+0x136>
 8004ae4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ae8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004aec:	e032      	b.n	8004b54 <_printf_i+0xa0>
 8004aee:	2964      	cmp	r1, #100	; 0x64
 8004af0:	d001      	beq.n	8004af6 <_printf_i+0x42>
 8004af2:	2969      	cmp	r1, #105	; 0x69
 8004af4:	d1f6      	bne.n	8004ae4 <_printf_i+0x30>
 8004af6:	6820      	ldr	r0, [r4, #0]
 8004af8:	6813      	ldr	r3, [r2, #0]
 8004afa:	0605      	lsls	r5, r0, #24
 8004afc:	f103 0104 	add.w	r1, r3, #4
 8004b00:	d52a      	bpl.n	8004b58 <_printf_i+0xa4>
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	6011      	str	r1, [r2, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	da03      	bge.n	8004b12 <_printf_i+0x5e>
 8004b0a:	222d      	movs	r2, #45	; 0x2d
 8004b0c:	425b      	negs	r3, r3
 8004b0e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b12:	486f      	ldr	r0, [pc, #444]	; (8004cd0 <_printf_i+0x21c>)
 8004b14:	220a      	movs	r2, #10
 8004b16:	e039      	b.n	8004b8c <_printf_i+0xd8>
 8004b18:	2973      	cmp	r1, #115	; 0x73
 8004b1a:	f000 809d 	beq.w	8004c58 <_printf_i+0x1a4>
 8004b1e:	d808      	bhi.n	8004b32 <_printf_i+0x7e>
 8004b20:	296f      	cmp	r1, #111	; 0x6f
 8004b22:	d020      	beq.n	8004b66 <_printf_i+0xb2>
 8004b24:	2970      	cmp	r1, #112	; 0x70
 8004b26:	d1dd      	bne.n	8004ae4 <_printf_i+0x30>
 8004b28:	6823      	ldr	r3, [r4, #0]
 8004b2a:	f043 0320 	orr.w	r3, r3, #32
 8004b2e:	6023      	str	r3, [r4, #0]
 8004b30:	e003      	b.n	8004b3a <_printf_i+0x86>
 8004b32:	2975      	cmp	r1, #117	; 0x75
 8004b34:	d017      	beq.n	8004b66 <_printf_i+0xb2>
 8004b36:	2978      	cmp	r1, #120	; 0x78
 8004b38:	d1d4      	bne.n	8004ae4 <_printf_i+0x30>
 8004b3a:	2378      	movs	r3, #120	; 0x78
 8004b3c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b40:	4864      	ldr	r0, [pc, #400]	; (8004cd4 <_printf_i+0x220>)
 8004b42:	e055      	b.n	8004bf0 <_printf_i+0x13c>
 8004b44:	6813      	ldr	r3, [r2, #0]
 8004b46:	1d19      	adds	r1, r3, #4
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6011      	str	r1, [r2, #0]
 8004b4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b50:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004b54:	2301      	movs	r3, #1
 8004b56:	e08c      	b.n	8004c72 <_printf_i+0x1be>
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	6011      	str	r1, [r2, #0]
 8004b5c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004b60:	bf18      	it	ne
 8004b62:	b21b      	sxthne	r3, r3
 8004b64:	e7cf      	b.n	8004b06 <_printf_i+0x52>
 8004b66:	6813      	ldr	r3, [r2, #0]
 8004b68:	6825      	ldr	r5, [r4, #0]
 8004b6a:	1d18      	adds	r0, r3, #4
 8004b6c:	6010      	str	r0, [r2, #0]
 8004b6e:	0628      	lsls	r0, r5, #24
 8004b70:	d501      	bpl.n	8004b76 <_printf_i+0xc2>
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	e002      	b.n	8004b7c <_printf_i+0xc8>
 8004b76:	0668      	lsls	r0, r5, #25
 8004b78:	d5fb      	bpl.n	8004b72 <_printf_i+0xbe>
 8004b7a:	881b      	ldrh	r3, [r3, #0]
 8004b7c:	4854      	ldr	r0, [pc, #336]	; (8004cd0 <_printf_i+0x21c>)
 8004b7e:	296f      	cmp	r1, #111	; 0x6f
 8004b80:	bf14      	ite	ne
 8004b82:	220a      	movne	r2, #10
 8004b84:	2208      	moveq	r2, #8
 8004b86:	2100      	movs	r1, #0
 8004b88:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004b8c:	6865      	ldr	r5, [r4, #4]
 8004b8e:	60a5      	str	r5, [r4, #8]
 8004b90:	2d00      	cmp	r5, #0
 8004b92:	f2c0 8095 	blt.w	8004cc0 <_printf_i+0x20c>
 8004b96:	6821      	ldr	r1, [r4, #0]
 8004b98:	f021 0104 	bic.w	r1, r1, #4
 8004b9c:	6021      	str	r1, [r4, #0]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d13d      	bne.n	8004c1e <_printf_i+0x16a>
 8004ba2:	2d00      	cmp	r5, #0
 8004ba4:	f040 808e 	bne.w	8004cc4 <_printf_i+0x210>
 8004ba8:	4665      	mov	r5, ip
 8004baa:	2a08      	cmp	r2, #8
 8004bac:	d10b      	bne.n	8004bc6 <_printf_i+0x112>
 8004bae:	6823      	ldr	r3, [r4, #0]
 8004bb0:	07db      	lsls	r3, r3, #31
 8004bb2:	d508      	bpl.n	8004bc6 <_printf_i+0x112>
 8004bb4:	6923      	ldr	r3, [r4, #16]
 8004bb6:	6862      	ldr	r2, [r4, #4]
 8004bb8:	429a      	cmp	r2, r3
 8004bba:	bfde      	ittt	le
 8004bbc:	2330      	movle	r3, #48	; 0x30
 8004bbe:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004bc2:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004bc6:	ebac 0305 	sub.w	r3, ip, r5
 8004bca:	6123      	str	r3, [r4, #16]
 8004bcc:	f8cd 8000 	str.w	r8, [sp]
 8004bd0:	463b      	mov	r3, r7
 8004bd2:	aa03      	add	r2, sp, #12
 8004bd4:	4621      	mov	r1, r4
 8004bd6:	4630      	mov	r0, r6
 8004bd8:	f7ff fef6 	bl	80049c8 <_printf_common>
 8004bdc:	3001      	adds	r0, #1
 8004bde:	d14d      	bne.n	8004c7c <_printf_i+0x1c8>
 8004be0:	f04f 30ff 	mov.w	r0, #4294967295
 8004be4:	b005      	add	sp, #20
 8004be6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004bea:	4839      	ldr	r0, [pc, #228]	; (8004cd0 <_printf_i+0x21c>)
 8004bec:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004bf0:	6813      	ldr	r3, [r2, #0]
 8004bf2:	6821      	ldr	r1, [r4, #0]
 8004bf4:	1d1d      	adds	r5, r3, #4
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6015      	str	r5, [r2, #0]
 8004bfa:	060a      	lsls	r2, r1, #24
 8004bfc:	d50b      	bpl.n	8004c16 <_printf_i+0x162>
 8004bfe:	07ca      	lsls	r2, r1, #31
 8004c00:	bf44      	itt	mi
 8004c02:	f041 0120 	orrmi.w	r1, r1, #32
 8004c06:	6021      	strmi	r1, [r4, #0]
 8004c08:	b91b      	cbnz	r3, 8004c12 <_printf_i+0x15e>
 8004c0a:	6822      	ldr	r2, [r4, #0]
 8004c0c:	f022 0220 	bic.w	r2, r2, #32
 8004c10:	6022      	str	r2, [r4, #0]
 8004c12:	2210      	movs	r2, #16
 8004c14:	e7b7      	b.n	8004b86 <_printf_i+0xd2>
 8004c16:	064d      	lsls	r5, r1, #25
 8004c18:	bf48      	it	mi
 8004c1a:	b29b      	uxthmi	r3, r3
 8004c1c:	e7ef      	b.n	8004bfe <_printf_i+0x14a>
 8004c1e:	4665      	mov	r5, ip
 8004c20:	fbb3 f1f2 	udiv	r1, r3, r2
 8004c24:	fb02 3311 	mls	r3, r2, r1, r3
 8004c28:	5cc3      	ldrb	r3, [r0, r3]
 8004c2a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004c2e:	460b      	mov	r3, r1
 8004c30:	2900      	cmp	r1, #0
 8004c32:	d1f5      	bne.n	8004c20 <_printf_i+0x16c>
 8004c34:	e7b9      	b.n	8004baa <_printf_i+0xf6>
 8004c36:	6813      	ldr	r3, [r2, #0]
 8004c38:	6825      	ldr	r5, [r4, #0]
 8004c3a:	6961      	ldr	r1, [r4, #20]
 8004c3c:	1d18      	adds	r0, r3, #4
 8004c3e:	6010      	str	r0, [r2, #0]
 8004c40:	0628      	lsls	r0, r5, #24
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	d501      	bpl.n	8004c4a <_printf_i+0x196>
 8004c46:	6019      	str	r1, [r3, #0]
 8004c48:	e002      	b.n	8004c50 <_printf_i+0x19c>
 8004c4a:	066a      	lsls	r2, r5, #25
 8004c4c:	d5fb      	bpl.n	8004c46 <_printf_i+0x192>
 8004c4e:	8019      	strh	r1, [r3, #0]
 8004c50:	2300      	movs	r3, #0
 8004c52:	6123      	str	r3, [r4, #16]
 8004c54:	4665      	mov	r5, ip
 8004c56:	e7b9      	b.n	8004bcc <_printf_i+0x118>
 8004c58:	6813      	ldr	r3, [r2, #0]
 8004c5a:	1d19      	adds	r1, r3, #4
 8004c5c:	6011      	str	r1, [r2, #0]
 8004c5e:	681d      	ldr	r5, [r3, #0]
 8004c60:	6862      	ldr	r2, [r4, #4]
 8004c62:	2100      	movs	r1, #0
 8004c64:	4628      	mov	r0, r5
 8004c66:	f7fb fab3 	bl	80001d0 <memchr>
 8004c6a:	b108      	cbz	r0, 8004c70 <_printf_i+0x1bc>
 8004c6c:	1b40      	subs	r0, r0, r5
 8004c6e:	6060      	str	r0, [r4, #4]
 8004c70:	6863      	ldr	r3, [r4, #4]
 8004c72:	6123      	str	r3, [r4, #16]
 8004c74:	2300      	movs	r3, #0
 8004c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c7a:	e7a7      	b.n	8004bcc <_printf_i+0x118>
 8004c7c:	6923      	ldr	r3, [r4, #16]
 8004c7e:	462a      	mov	r2, r5
 8004c80:	4639      	mov	r1, r7
 8004c82:	4630      	mov	r0, r6
 8004c84:	47c0      	blx	r8
 8004c86:	3001      	adds	r0, #1
 8004c88:	d0aa      	beq.n	8004be0 <_printf_i+0x12c>
 8004c8a:	6823      	ldr	r3, [r4, #0]
 8004c8c:	079b      	lsls	r3, r3, #30
 8004c8e:	d413      	bmi.n	8004cb8 <_printf_i+0x204>
 8004c90:	68e0      	ldr	r0, [r4, #12]
 8004c92:	9b03      	ldr	r3, [sp, #12]
 8004c94:	4298      	cmp	r0, r3
 8004c96:	bfb8      	it	lt
 8004c98:	4618      	movlt	r0, r3
 8004c9a:	e7a3      	b.n	8004be4 <_printf_i+0x130>
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	464a      	mov	r2, r9
 8004ca0:	4639      	mov	r1, r7
 8004ca2:	4630      	mov	r0, r6
 8004ca4:	47c0      	blx	r8
 8004ca6:	3001      	adds	r0, #1
 8004ca8:	d09a      	beq.n	8004be0 <_printf_i+0x12c>
 8004caa:	3501      	adds	r5, #1
 8004cac:	68e3      	ldr	r3, [r4, #12]
 8004cae:	9a03      	ldr	r2, [sp, #12]
 8004cb0:	1a9b      	subs	r3, r3, r2
 8004cb2:	42ab      	cmp	r3, r5
 8004cb4:	dcf2      	bgt.n	8004c9c <_printf_i+0x1e8>
 8004cb6:	e7eb      	b.n	8004c90 <_printf_i+0x1dc>
 8004cb8:	2500      	movs	r5, #0
 8004cba:	f104 0919 	add.w	r9, r4, #25
 8004cbe:	e7f5      	b.n	8004cac <_printf_i+0x1f8>
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1ac      	bne.n	8004c1e <_printf_i+0x16a>
 8004cc4:	7803      	ldrb	r3, [r0, #0]
 8004cc6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004cca:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004cce:	e76c      	b.n	8004baa <_printf_i+0xf6>
 8004cd0:	08004f55 	.word	0x08004f55
 8004cd4:	08004f66 	.word	0x08004f66

08004cd8 <memcpy>:
 8004cd8:	b510      	push	{r4, lr}
 8004cda:	1e43      	subs	r3, r0, #1
 8004cdc:	440a      	add	r2, r1
 8004cde:	4291      	cmp	r1, r2
 8004ce0:	d100      	bne.n	8004ce4 <memcpy+0xc>
 8004ce2:	bd10      	pop	{r4, pc}
 8004ce4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ce8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cec:	e7f7      	b.n	8004cde <memcpy+0x6>

08004cee <memmove>:
 8004cee:	4288      	cmp	r0, r1
 8004cf0:	b510      	push	{r4, lr}
 8004cf2:	eb01 0302 	add.w	r3, r1, r2
 8004cf6:	d807      	bhi.n	8004d08 <memmove+0x1a>
 8004cf8:	1e42      	subs	r2, r0, #1
 8004cfa:	4299      	cmp	r1, r3
 8004cfc:	d00a      	beq.n	8004d14 <memmove+0x26>
 8004cfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d02:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004d06:	e7f8      	b.n	8004cfa <memmove+0xc>
 8004d08:	4283      	cmp	r3, r0
 8004d0a:	d9f5      	bls.n	8004cf8 <memmove+0xa>
 8004d0c:	1881      	adds	r1, r0, r2
 8004d0e:	1ad2      	subs	r2, r2, r3
 8004d10:	42d3      	cmn	r3, r2
 8004d12:	d100      	bne.n	8004d16 <memmove+0x28>
 8004d14:	bd10      	pop	{r4, pc}
 8004d16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d1a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004d1e:	e7f7      	b.n	8004d10 <memmove+0x22>

08004d20 <_free_r>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	4605      	mov	r5, r0
 8004d24:	2900      	cmp	r1, #0
 8004d26:	d045      	beq.n	8004db4 <_free_r+0x94>
 8004d28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d2c:	1f0c      	subs	r4, r1, #4
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	bfb8      	it	lt
 8004d32:	18e4      	addlt	r4, r4, r3
 8004d34:	f000 f8d2 	bl	8004edc <__malloc_lock>
 8004d38:	4a1f      	ldr	r2, [pc, #124]	; (8004db8 <_free_r+0x98>)
 8004d3a:	6813      	ldr	r3, [r2, #0]
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	b933      	cbnz	r3, 8004d4e <_free_r+0x2e>
 8004d40:	6063      	str	r3, [r4, #4]
 8004d42:	6014      	str	r4, [r2, #0]
 8004d44:	4628      	mov	r0, r5
 8004d46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d4a:	f000 b8c8 	b.w	8004ede <__malloc_unlock>
 8004d4e:	42a3      	cmp	r3, r4
 8004d50:	d90c      	bls.n	8004d6c <_free_r+0x4c>
 8004d52:	6821      	ldr	r1, [r4, #0]
 8004d54:	1862      	adds	r2, r4, r1
 8004d56:	4293      	cmp	r3, r2
 8004d58:	bf04      	itt	eq
 8004d5a:	681a      	ldreq	r2, [r3, #0]
 8004d5c:	685b      	ldreq	r3, [r3, #4]
 8004d5e:	6063      	str	r3, [r4, #4]
 8004d60:	bf04      	itt	eq
 8004d62:	1852      	addeq	r2, r2, r1
 8004d64:	6022      	streq	r2, [r4, #0]
 8004d66:	6004      	str	r4, [r0, #0]
 8004d68:	e7ec      	b.n	8004d44 <_free_r+0x24>
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	b10a      	cbz	r2, 8004d74 <_free_r+0x54>
 8004d70:	42a2      	cmp	r2, r4
 8004d72:	d9fa      	bls.n	8004d6a <_free_r+0x4a>
 8004d74:	6819      	ldr	r1, [r3, #0]
 8004d76:	1858      	adds	r0, r3, r1
 8004d78:	42a0      	cmp	r0, r4
 8004d7a:	d10b      	bne.n	8004d94 <_free_r+0x74>
 8004d7c:	6820      	ldr	r0, [r4, #0]
 8004d7e:	4401      	add	r1, r0
 8004d80:	1858      	adds	r0, r3, r1
 8004d82:	4282      	cmp	r2, r0
 8004d84:	6019      	str	r1, [r3, #0]
 8004d86:	d1dd      	bne.n	8004d44 <_free_r+0x24>
 8004d88:	6810      	ldr	r0, [r2, #0]
 8004d8a:	6852      	ldr	r2, [r2, #4]
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	4401      	add	r1, r0
 8004d90:	6019      	str	r1, [r3, #0]
 8004d92:	e7d7      	b.n	8004d44 <_free_r+0x24>
 8004d94:	d902      	bls.n	8004d9c <_free_r+0x7c>
 8004d96:	230c      	movs	r3, #12
 8004d98:	602b      	str	r3, [r5, #0]
 8004d9a:	e7d3      	b.n	8004d44 <_free_r+0x24>
 8004d9c:	6820      	ldr	r0, [r4, #0]
 8004d9e:	1821      	adds	r1, r4, r0
 8004da0:	428a      	cmp	r2, r1
 8004da2:	bf04      	itt	eq
 8004da4:	6811      	ldreq	r1, [r2, #0]
 8004da6:	6852      	ldreq	r2, [r2, #4]
 8004da8:	6062      	str	r2, [r4, #4]
 8004daa:	bf04      	itt	eq
 8004dac:	1809      	addeq	r1, r1, r0
 8004dae:	6021      	streq	r1, [r4, #0]
 8004db0:	605c      	str	r4, [r3, #4]
 8004db2:	e7c7      	b.n	8004d44 <_free_r+0x24>
 8004db4:	bd38      	pop	{r3, r4, r5, pc}
 8004db6:	bf00      	nop
 8004db8:	200000a8 	.word	0x200000a8

08004dbc <_malloc_r>:
 8004dbc:	b570      	push	{r4, r5, r6, lr}
 8004dbe:	1ccd      	adds	r5, r1, #3
 8004dc0:	f025 0503 	bic.w	r5, r5, #3
 8004dc4:	3508      	adds	r5, #8
 8004dc6:	2d0c      	cmp	r5, #12
 8004dc8:	bf38      	it	cc
 8004dca:	250c      	movcc	r5, #12
 8004dcc:	2d00      	cmp	r5, #0
 8004dce:	4606      	mov	r6, r0
 8004dd0:	db01      	blt.n	8004dd6 <_malloc_r+0x1a>
 8004dd2:	42a9      	cmp	r1, r5
 8004dd4:	d903      	bls.n	8004dde <_malloc_r+0x22>
 8004dd6:	230c      	movs	r3, #12
 8004dd8:	6033      	str	r3, [r6, #0]
 8004dda:	2000      	movs	r0, #0
 8004ddc:	bd70      	pop	{r4, r5, r6, pc}
 8004dde:	f000 f87d 	bl	8004edc <__malloc_lock>
 8004de2:	4a21      	ldr	r2, [pc, #132]	; (8004e68 <_malloc_r+0xac>)
 8004de4:	6814      	ldr	r4, [r2, #0]
 8004de6:	4621      	mov	r1, r4
 8004de8:	b991      	cbnz	r1, 8004e10 <_malloc_r+0x54>
 8004dea:	4c20      	ldr	r4, [pc, #128]	; (8004e6c <_malloc_r+0xb0>)
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	b91b      	cbnz	r3, 8004df8 <_malloc_r+0x3c>
 8004df0:	4630      	mov	r0, r6
 8004df2:	f000 f863 	bl	8004ebc <_sbrk_r>
 8004df6:	6020      	str	r0, [r4, #0]
 8004df8:	4629      	mov	r1, r5
 8004dfa:	4630      	mov	r0, r6
 8004dfc:	f000 f85e 	bl	8004ebc <_sbrk_r>
 8004e00:	1c43      	adds	r3, r0, #1
 8004e02:	d124      	bne.n	8004e4e <_malloc_r+0x92>
 8004e04:	230c      	movs	r3, #12
 8004e06:	6033      	str	r3, [r6, #0]
 8004e08:	4630      	mov	r0, r6
 8004e0a:	f000 f868 	bl	8004ede <__malloc_unlock>
 8004e0e:	e7e4      	b.n	8004dda <_malloc_r+0x1e>
 8004e10:	680b      	ldr	r3, [r1, #0]
 8004e12:	1b5b      	subs	r3, r3, r5
 8004e14:	d418      	bmi.n	8004e48 <_malloc_r+0x8c>
 8004e16:	2b0b      	cmp	r3, #11
 8004e18:	d90f      	bls.n	8004e3a <_malloc_r+0x7e>
 8004e1a:	600b      	str	r3, [r1, #0]
 8004e1c:	50cd      	str	r5, [r1, r3]
 8004e1e:	18cc      	adds	r4, r1, r3
 8004e20:	4630      	mov	r0, r6
 8004e22:	f000 f85c 	bl	8004ede <__malloc_unlock>
 8004e26:	f104 000b 	add.w	r0, r4, #11
 8004e2a:	1d23      	adds	r3, r4, #4
 8004e2c:	f020 0007 	bic.w	r0, r0, #7
 8004e30:	1ac3      	subs	r3, r0, r3
 8004e32:	d0d3      	beq.n	8004ddc <_malloc_r+0x20>
 8004e34:	425a      	negs	r2, r3
 8004e36:	50e2      	str	r2, [r4, r3]
 8004e38:	e7d0      	b.n	8004ddc <_malloc_r+0x20>
 8004e3a:	428c      	cmp	r4, r1
 8004e3c:	684b      	ldr	r3, [r1, #4]
 8004e3e:	bf16      	itet	ne
 8004e40:	6063      	strne	r3, [r4, #4]
 8004e42:	6013      	streq	r3, [r2, #0]
 8004e44:	460c      	movne	r4, r1
 8004e46:	e7eb      	b.n	8004e20 <_malloc_r+0x64>
 8004e48:	460c      	mov	r4, r1
 8004e4a:	6849      	ldr	r1, [r1, #4]
 8004e4c:	e7cc      	b.n	8004de8 <_malloc_r+0x2c>
 8004e4e:	1cc4      	adds	r4, r0, #3
 8004e50:	f024 0403 	bic.w	r4, r4, #3
 8004e54:	42a0      	cmp	r0, r4
 8004e56:	d005      	beq.n	8004e64 <_malloc_r+0xa8>
 8004e58:	1a21      	subs	r1, r4, r0
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	f000 f82e 	bl	8004ebc <_sbrk_r>
 8004e60:	3001      	adds	r0, #1
 8004e62:	d0cf      	beq.n	8004e04 <_malloc_r+0x48>
 8004e64:	6025      	str	r5, [r4, #0]
 8004e66:	e7db      	b.n	8004e20 <_malloc_r+0x64>
 8004e68:	200000a8 	.word	0x200000a8
 8004e6c:	200000ac 	.word	0x200000ac

08004e70 <_realloc_r>:
 8004e70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e72:	4607      	mov	r7, r0
 8004e74:	4614      	mov	r4, r2
 8004e76:	460e      	mov	r6, r1
 8004e78:	b921      	cbnz	r1, 8004e84 <_realloc_r+0x14>
 8004e7a:	4611      	mov	r1, r2
 8004e7c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004e80:	f7ff bf9c 	b.w	8004dbc <_malloc_r>
 8004e84:	b922      	cbnz	r2, 8004e90 <_realloc_r+0x20>
 8004e86:	f7ff ff4b 	bl	8004d20 <_free_r>
 8004e8a:	4625      	mov	r5, r4
 8004e8c:	4628      	mov	r0, r5
 8004e8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e90:	f000 f826 	bl	8004ee0 <_malloc_usable_size_r>
 8004e94:	42a0      	cmp	r0, r4
 8004e96:	d20f      	bcs.n	8004eb8 <_realloc_r+0x48>
 8004e98:	4621      	mov	r1, r4
 8004e9a:	4638      	mov	r0, r7
 8004e9c:	f7ff ff8e 	bl	8004dbc <_malloc_r>
 8004ea0:	4605      	mov	r5, r0
 8004ea2:	2800      	cmp	r0, #0
 8004ea4:	d0f2      	beq.n	8004e8c <_realloc_r+0x1c>
 8004ea6:	4631      	mov	r1, r6
 8004ea8:	4622      	mov	r2, r4
 8004eaa:	f7ff ff15 	bl	8004cd8 <memcpy>
 8004eae:	4631      	mov	r1, r6
 8004eb0:	4638      	mov	r0, r7
 8004eb2:	f7ff ff35 	bl	8004d20 <_free_r>
 8004eb6:	e7e9      	b.n	8004e8c <_realloc_r+0x1c>
 8004eb8:	4635      	mov	r5, r6
 8004eba:	e7e7      	b.n	8004e8c <_realloc_r+0x1c>

08004ebc <_sbrk_r>:
 8004ebc:	b538      	push	{r3, r4, r5, lr}
 8004ebe:	4c06      	ldr	r4, [pc, #24]	; (8004ed8 <_sbrk_r+0x1c>)
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	4605      	mov	r5, r0
 8004ec4:	4608      	mov	r0, r1
 8004ec6:	6023      	str	r3, [r4, #0]
 8004ec8:	f7fc fce4 	bl	8001894 <_sbrk>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_sbrk_r+0x1a>
 8004ed0:	6823      	ldr	r3, [r4, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_sbrk_r+0x1a>
 8004ed4:	602b      	str	r3, [r5, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	20000208 	.word	0x20000208

08004edc <__malloc_lock>:
 8004edc:	4770      	bx	lr

08004ede <__malloc_unlock>:
 8004ede:	4770      	bx	lr

08004ee0 <_malloc_usable_size_r>:
 8004ee0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ee4:	1f18      	subs	r0, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	bfbc      	itt	lt
 8004eea:	580b      	ldrlt	r3, [r1, r0]
 8004eec:	18c0      	addlt	r0, r0, r3
 8004eee:	4770      	bx	lr

08004ef0 <_init>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	bf00      	nop
 8004ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ef6:	bc08      	pop	{r3}
 8004ef8:	469e      	mov	lr, r3
 8004efa:	4770      	bx	lr

08004efc <_fini>:
 8004efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efe:	bf00      	nop
 8004f00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f02:	bc08      	pop	{r3}
 8004f04:	469e      	mov	lr, r3
 8004f06:	4770      	bx	lr


Proje_MotorSpeedControl_Unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003620  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800372c  0800372c  0001372c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800376c  0800376c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800376c  0800376c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800376c  0800376c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800376c  0800376c  0001376c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003770  08003770  00013770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003774  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000018c  20000010  08003784  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000019c  08003784  0002019c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c733  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a89  00000000  00000000  0002c76c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d98  00000000  00000000  0002e1f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ce8  00000000  00000000  0002ef90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001706  00000000  00000000  0002fc78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a1e3  00000000  00000000  0003137e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00088b08  00000000  00000000  0003b561  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c4069  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039e4  00000000  00000000  000c40e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08003714 	.word	0x08003714

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08003714 	.word	0x08003714

0800014c <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup for blue lcd: 0x4E // green: 0x7E

void lcd_send_cmd (char cmd)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af02      	add	r7, sp, #8
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f023 030f 	bic.w	r3, r3, #15
 800015c:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	011b      	lsls	r3, r3, #4
 8000162:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000164:	7bfb      	ldrb	r3, [r7, #15]
 8000166:	f043 030c 	orr.w	r3, r3, #12
 800016a:	b2db      	uxtb	r3, r3
 800016c:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800016e:	7bfb      	ldrb	r3, [r7, #15]
 8000170:	f043 0308 	orr.w	r3, r3, #8
 8000174:	b2db      	uxtb	r3, r3
 8000176:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000178:	7bbb      	ldrb	r3, [r7, #14]
 800017a:	f043 030c 	orr.w	r3, r3, #12
 800017e:	b2db      	uxtb	r3, r3
 8000180:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000182:	7bbb      	ldrb	r3, [r7, #14]
 8000184:	f043 0308 	orr.w	r3, r3, #8
 8000188:	b2db      	uxtb	r3, r3
 800018a:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 800018c:	f107 0208 	add.w	r2, r7, #8
 8000190:	2364      	movs	r3, #100	; 0x64
 8000192:	9300      	str	r3, [sp, #0]
 8000194:	2304      	movs	r3, #4
 8000196:	214e      	movs	r1, #78	; 0x4e
 8000198:	4803      	ldr	r0, [pc, #12]	; (80001a8 <lcd_send_cmd+0x5c>)
 800019a:	f001 ff13 	bl	8001fc4 <HAL_I2C_Master_Transmit>
}
 800019e:	bf00      	nop
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000058 	.word	0x20000058

080001ac <lcd_send_data>:

void lcd_send_data (char data)
{
 80001ac:	b580      	push	{r7, lr}
 80001ae:	b086      	sub	sp, #24
 80001b0:	af02      	add	r7, sp, #8
 80001b2:	4603      	mov	r3, r0
 80001b4:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80001b6:	79fb      	ldrb	r3, [r7, #7]
 80001b8:	f023 030f 	bic.w	r3, r3, #15
 80001bc:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80001be:	79fb      	ldrb	r3, [r7, #7]
 80001c0:	011b      	lsls	r3, r3, #4
 80001c2:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80001c4:	7bfb      	ldrb	r3, [r7, #15]
 80001c6:	f043 030d 	orr.w	r3, r3, #13
 80001ca:	b2db      	uxtb	r3, r3
 80001cc:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80001ce:	7bfb      	ldrb	r3, [r7, #15]
 80001d0:	f043 0309 	orr.w	r3, r3, #9
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80001d8:	7bbb      	ldrb	r3, [r7, #14]
 80001da:	f043 030d 	orr.w	r3, r3, #13
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80001e2:	7bbb      	ldrb	r3, [r7, #14]
 80001e4:	f043 0309 	orr.w	r3, r3, #9
 80001e8:	b2db      	uxtb	r3, r3
 80001ea:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80001ec:	f107 0208 	add.w	r2, r7, #8
 80001f0:	2364      	movs	r3, #100	; 0x64
 80001f2:	9300      	str	r3, [sp, #0]
 80001f4:	2304      	movs	r3, #4
 80001f6:	214e      	movs	r1, #78	; 0x4e
 80001f8:	4803      	ldr	r0, [pc, #12]	; (8000208 <lcd_send_data+0x5c>)
 80001fa:	f001 fee3 	bl	8001fc4 <HAL_I2C_Master_Transmit>
}
 80001fe:	bf00      	nop
 8000200:	3710      	adds	r7, #16
 8000202:	46bd      	mov	sp, r7
 8000204:	bd80      	pop	{r7, pc}
 8000206:	bf00      	nop
 8000208:	20000058 	.word	0x20000058

0800020c <lcd_clear>:

void lcd_clear (void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b082      	sub	sp, #8
 8000210:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000212:	2080      	movs	r0, #128	; 0x80
 8000214:	f7ff ff9a 	bl	800014c <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000218:	2300      	movs	r3, #0
 800021a:	607b      	str	r3, [r7, #4]
 800021c:	e005      	b.n	800022a <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 800021e:	2020      	movs	r0, #32
 8000220:	f7ff ffc4 	bl	80001ac <lcd_send_data>
	for (int i=0; i<70; i++)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	3301      	adds	r3, #1
 8000228:	607b      	str	r3, [r7, #4]
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	2b45      	cmp	r3, #69	; 0x45
 800022e:	ddf6      	ble.n	800021e <lcd_clear+0x12>
	}
}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}

08000238 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b082      	sub	sp, #8
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
 8000240:	6039      	str	r1, [r7, #0]
    switch (row)
 8000242:	687b      	ldr	r3, [r7, #4]
 8000244:	2b00      	cmp	r3, #0
 8000246:	d002      	beq.n	800024e <lcd_put_cur+0x16>
 8000248:	2b01      	cmp	r3, #1
 800024a:	d005      	beq.n	8000258 <lcd_put_cur+0x20>
 800024c:	e009      	b.n	8000262 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 800024e:	683b      	ldr	r3, [r7, #0]
 8000250:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000254:	603b      	str	r3, [r7, #0]
            break;
 8000256:	e004      	b.n	8000262 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 8000258:	683b      	ldr	r3, [r7, #0]
 800025a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800025e:	603b      	str	r3, [r7, #0]
            break;
 8000260:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000262:	683b      	ldr	r3, [r7, #0]
 8000264:	b2db      	uxtb	r3, r3
 8000266:	4618      	mov	r0, r3
 8000268:	f7ff ff70 	bl	800014c <lcd_send_cmd>
}
 800026c:	bf00      	nop
 800026e:	3708      	adds	r7, #8
 8000270:	46bd      	mov	sp, r7
 8000272:	bd80      	pop	{r7, pc}

08000274 <lcd_init>:


void lcd_init (void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000278:	2032      	movs	r0, #50	; 0x32
 800027a:	f000 fca3 	bl	8000bc4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800027e:	2030      	movs	r0, #48	; 0x30
 8000280:	f7ff ff64 	bl	800014c <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000284:	2005      	movs	r0, #5
 8000286:	f000 fc9d 	bl	8000bc4 <HAL_Delay>
	lcd_send_cmd (0x30);
 800028a:	2030      	movs	r0, #48	; 0x30
 800028c:	f7ff ff5e 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000290:	2001      	movs	r0, #1
 8000292:	f000 fc97 	bl	8000bc4 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000296:	2030      	movs	r0, #48	; 0x30
 8000298:	f7ff ff58 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 800029c:	200a      	movs	r0, #10
 800029e:	f000 fc91 	bl	8000bc4 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80002a2:	2020      	movs	r0, #32
 80002a4:	f7ff ff52 	bl	800014c <lcd_send_cmd>
	HAL_Delay(10);
 80002a8:	200a      	movs	r0, #10
 80002aa:	f000 fc8b 	bl	8000bc4 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80002ae:	2028      	movs	r0, #40	; 0x28
 80002b0:	f7ff ff4c 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002b4:	2001      	movs	r0, #1
 80002b6:	f000 fc85 	bl	8000bc4 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80002ba:	2008      	movs	r0, #8
 80002bc:	f7ff ff46 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002c0:	2001      	movs	r0, #1
 80002c2:	f000 fc7f 	bl	8000bc4 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80002c6:	2001      	movs	r0, #1
 80002c8:	f7ff ff40 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002cc:	2001      	movs	r0, #1
 80002ce:	f000 fc79 	bl	8000bc4 <HAL_Delay>
	HAL_Delay(1);
 80002d2:	2001      	movs	r0, #1
 80002d4:	f000 fc76 	bl	8000bc4 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80002d8:	2006      	movs	r0, #6
 80002da:	f7ff ff37 	bl	800014c <lcd_send_cmd>
	HAL_Delay(1);
 80002de:	2001      	movs	r0, #1
 80002e0:	f000 fc70 	bl	8000bc4 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 80002e4:	200c      	movs	r0, #12
 80002e6:	f7ff ff31 	bl	800014c <lcd_send_cmd>
}
 80002ea:	bf00      	nop
 80002ec:	bd80      	pop	{r7, pc}

080002ee <lcd_send_string>:

void lcd_send_string (char *str)
{
 80002ee:	b580      	push	{r7, lr}
 80002f0:	b082      	sub	sp, #8
 80002f2:	af00      	add	r7, sp, #0
 80002f4:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 80002f6:	e006      	b.n	8000306 <lcd_send_string+0x18>
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	1c5a      	adds	r2, r3, #1
 80002fc:	607a      	str	r2, [r7, #4]
 80002fe:	781b      	ldrb	r3, [r3, #0]
 8000300:	4618      	mov	r0, r3
 8000302:	f7ff ff53 	bl	80001ac <lcd_send_data>
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	781b      	ldrb	r3, [r3, #0]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d1f4      	bne.n	80002f8 <lcd_send_string+0xa>
}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <Init_Tx_Can_Config>:
}
*/

// CAN Transmit Configuration
void Init_Tx_Can_Config()
{   // Set Transmit parameters
 8000318:	b480      	push	{r7}
 800031a:	af00      	add	r7, sp, #0
	  pTxHeader.DLC = 2;
 800031c:	4b08      	ldr	r3, [pc, #32]	; (8000340 <Init_Tx_Can_Config+0x28>)
 800031e:	2202      	movs	r2, #2
 8000320:	611a      	str	r2, [r3, #16]
	  pTxHeader.IDE = CAN_ID_STD;
 8000322:	4b07      	ldr	r3, [pc, #28]	; (8000340 <Init_Tx_Can_Config+0x28>)
 8000324:	2200      	movs	r2, #0
 8000326:	609a      	str	r2, [r3, #8]
	  pTxHeader.RTR = CAN_RTR_DATA;
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <Init_Tx_Can_Config+0x28>)
 800032a:	2200      	movs	r2, #0
 800032c:	60da      	str	r2, [r3, #12]
	  pTxHeader.StdId = 0x0299; // Id of MotorSpeedControl Message
 800032e:	4b04      	ldr	r3, [pc, #16]	; (8000340 <Init_Tx_Can_Config+0x28>)
 8000330:	f240 2299 	movw	r2, #665	; 0x299
 8000334:	601a      	str	r2, [r3, #0]
}
 8000336:	bf00      	nop
 8000338:	46bd      	mov	sp, r7
 800033a:	bc80      	pop	{r7}
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	200000d4 	.word	0x200000d4

08000344 <Init_Filter_Can_Config>:

void Init_Filter_Can_Config()
{   // Set Filter Parameters
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0
	sFilterConfig.FilterActivation =ENABLE;
 8000348:	4b11      	ldr	r3, [pc, #68]	; (8000390 <Init_Filter_Can_Config+0x4c>)
 800034a:	2201      	movs	r2, #1
 800034c:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterBank = 0;
 800034e:	4b10      	ldr	r3, [pc, #64]	; (8000390 <Init_Filter_Can_Config+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
 8000354:	4b0e      	ldr	r3, [pc, #56]	; (8000390 <Init_Filter_Can_Config+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0x0155<<5; // Id of LedControl Message
 800035a:	4b0d      	ldr	r3, [pc, #52]	; (8000390 <Init_Filter_Can_Config+0x4c>)
 800035c:	f642 22a0 	movw	r2, #10912	; 0x2aa0
 8000360:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000362:	4b0b      	ldr	r3, [pc, #44]	; (8000390 <Init_Filter_Can_Config+0x4c>)
 8000364:	2200      	movs	r2, #0
 8000366:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF;
 8000368:	4b09      	ldr	r3, [pc, #36]	; (8000390 <Init_Filter_Can_Config+0x4c>)
 800036a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800036e:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000370:	4b07      	ldr	r3, [pc, #28]	; (8000390 <Init_Filter_Can_Config+0x4c>)
 8000372:	2200      	movs	r2, #0
 8000374:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000376:	4b06      	ldr	r3, [pc, #24]	; (8000390 <Init_Filter_Can_Config+0x4c>)
 8000378:	2200      	movs	r2, #0
 800037a:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800037c:	4b04      	ldr	r3, [pc, #16]	; (8000390 <Init_Filter_Can_Config+0x4c>)
 800037e:	2201      	movs	r2, #1
 8000380:	61da      	str	r2, [r3, #28]
	HAL_CAN_ConfigFilter(&hcan, &sFilterConfig);
 8000382:	4903      	ldr	r1, [pc, #12]	; (8000390 <Init_Filter_Can_Config+0x4c>)
 8000384:	4803      	ldr	r0, [pc, #12]	; (8000394 <Init_Filter_Can_Config+0x50>)
 8000386:	f000 fd3a 	bl	8000dfe <HAL_CAN_ConfigFilter>

}
 800038a:	bf00      	nop
 800038c:	bd80      	pop	{r7, pc}
 800038e:	bf00      	nop
 8000390:	20000030 	.word	0x20000030
 8000394:	200000ac 	.word	0x200000ac

08000398 <MotorServoControl>:


void MotorServoControl(uint32_t A, uint32_t B,uint8_t speed)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b086      	sub	sp, #24
 800039c:	af00      	add	r7, sp, #0
 800039e:	60f8      	str	r0, [r7, #12]
 80003a0:	60b9      	str	r1, [r7, #8]
 80003a2:	4613      	mov	r3, r2
 80003a4:	71fb      	strb	r3, [r7, #7]
	MotorSpeed_t mMotorSpeed;
	mMotorSpeed.id = CanReceiveData[0];
 80003a6:	4b3f      	ldr	r3, [pc, #252]	; (80004a4 <MotorServoControl+0x10c>)
 80003a8:	781b      	ldrb	r3, [r3, #0]
 80003aa:	753b      	strb	r3, [r7, #20]
	mMotorSpeed.data = CanReceiveData[1];
 80003ac:	4b3d      	ldr	r3, [pc, #244]	; (80004a4 <MotorServoControl+0x10c>)
 80003ae:	785b      	ldrb	r3, [r3, #1]
 80003b0:	757b      	strb	r3, [r7, #21]

	// CAN Transmit Message
	CanTransData[0] = mMotorSpeed.id;
 80003b2:	7d3a      	ldrb	r2, [r7, #20]
 80003b4:	4b3c      	ldr	r3, [pc, #240]	; (80004a8 <MotorServoControl+0x110>)
 80003b6:	701a      	strb	r2, [r3, #0]
	CanTransData[1] = mMotorSpeed.data;
 80003b8:	7d7a      	ldrb	r2, [r7, #21]
 80003ba:	4b3b      	ldr	r3, [pc, #236]	; (80004a8 <MotorServoControl+0x110>)
 80003bc:	705a      	strb	r2, [r3, #1]
	HAL_CAN_AddTxMessage(&hcan, &pTxHeader, CanTransData, &mTxMailbox);
 80003be:	4b3b      	ldr	r3, [pc, #236]	; (80004ac <MotorServoControl+0x114>)
 80003c0:	4a39      	ldr	r2, [pc, #228]	; (80004a8 <MotorServoControl+0x110>)
 80003c2:	493b      	ldr	r1, [pc, #236]	; (80004b0 <MotorServoControl+0x118>)
 80003c4:	483b      	ldr	r0, [pc, #236]	; (80004b4 <MotorServoControl+0x11c>)
 80003c6:	f000 fe27 	bl	8001018 <HAL_CAN_AddTxMessage>

	switch(mMotorSpeed.data)
 80003ca:	7d7b      	ldrb	r3, [r7, #21]
 80003cc:	2b01      	cmp	r3, #1
 80003ce:	d00a      	beq.n	80003e6 <MotorServoControl+0x4e>
 80003d0:	2b02      	cmp	r3, #2
 80003d2:	d035      	beq.n	8000440 <MotorServoControl+0xa8>
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d000      	beq.n	80003da <MotorServoControl+0x42>
		}

	}


}
 80003d8:	e05f      	b.n	800049a <MotorServoControl+0x102>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,pwm_value);
 80003da:	4b37      	ldr	r3, [pc, #220]	; (80004b8 <MotorServoControl+0x120>)
 80003dc:	681b      	ldr	r3, [r3, #0]
 80003de:	4a37      	ldr	r2, [pc, #220]	; (80004bc <MotorServoControl+0x124>)
 80003e0:	6812      	ldr	r2, [r2, #0]
 80003e2:	635a      	str	r2, [r3, #52]	; 0x34
			break;
 80003e4:	e059      	b.n	800049a <MotorServoControl+0x102>
			for(pwm_value=A; pwm_value<B; pwm_value++)
 80003e6:	4a35      	ldr	r2, [pc, #212]	; (80004bc <MotorServoControl+0x124>)
 80003e8:	68fb      	ldr	r3, [r7, #12]
 80003ea:	6013      	str	r3, [r2, #0]
 80003ec:	e00c      	b.n	8000408 <MotorServoControl+0x70>
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, pwm_value);
 80003ee:	4b32      	ldr	r3, [pc, #200]	; (80004b8 <MotorServoControl+0x120>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	4a32      	ldr	r2, [pc, #200]	; (80004bc <MotorServoControl+0x124>)
 80003f4:	6812      	ldr	r2, [r2, #0]
 80003f6:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(5);
 80003f8:	2005      	movs	r0, #5
 80003fa:	f000 fbe3 	bl	8000bc4 <HAL_Delay>
			for(pwm_value=A; pwm_value<B; pwm_value++)
 80003fe:	4b2f      	ldr	r3, [pc, #188]	; (80004bc <MotorServoControl+0x124>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	3301      	adds	r3, #1
 8000404:	4a2d      	ldr	r2, [pc, #180]	; (80004bc <MotorServoControl+0x124>)
 8000406:	6013      	str	r3, [r2, #0]
 8000408:	4b2c      	ldr	r3, [pc, #176]	; (80004bc <MotorServoControl+0x124>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	68ba      	ldr	r2, [r7, #8]
 800040e:	429a      	cmp	r2, r3
 8000410:	d8ed      	bhi.n	80003ee <MotorServoControl+0x56>
			for(pwm_value=B; pwm_value>A; pwm_value--)
 8000412:	4a2a      	ldr	r2, [pc, #168]	; (80004bc <MotorServoControl+0x124>)
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	6013      	str	r3, [r2, #0]
 8000418:	e00c      	b.n	8000434 <MotorServoControl+0x9c>
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1, pwm_value);
 800041a:	4b27      	ldr	r3, [pc, #156]	; (80004b8 <MotorServoControl+0x120>)
 800041c:	681b      	ldr	r3, [r3, #0]
 800041e:	4a27      	ldr	r2, [pc, #156]	; (80004bc <MotorServoControl+0x124>)
 8000420:	6812      	ldr	r2, [r2, #0]
 8000422:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(5);
 8000424:	2005      	movs	r0, #5
 8000426:	f000 fbcd 	bl	8000bc4 <HAL_Delay>
			for(pwm_value=B; pwm_value>A; pwm_value--)
 800042a:	4b24      	ldr	r3, [pc, #144]	; (80004bc <MotorServoControl+0x124>)
 800042c:	681b      	ldr	r3, [r3, #0]
 800042e:	3b01      	subs	r3, #1
 8000430:	4a22      	ldr	r2, [pc, #136]	; (80004bc <MotorServoControl+0x124>)
 8000432:	6013      	str	r3, [r2, #0]
 8000434:	4b21      	ldr	r3, [pc, #132]	; (80004bc <MotorServoControl+0x124>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	68fa      	ldr	r2, [r7, #12]
 800043a:	429a      	cmp	r2, r3
 800043c:	d3ed      	bcc.n	800041a <MotorServoControl+0x82>
			break;
 800043e:	e02c      	b.n	800049a <MotorServoControl+0x102>
			for(pwm_value=A; pwm_value<B; pwm_value++)
 8000440:	4a1e      	ldr	r2, [pc, #120]	; (80004bc <MotorServoControl+0x124>)
 8000442:	68fb      	ldr	r3, [r7, #12]
 8000444:	6013      	str	r3, [r2, #0]
 8000446:	e00c      	b.n	8000462 <MotorServoControl+0xca>
				__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,pwm_value);
 8000448:	4b1b      	ldr	r3, [pc, #108]	; (80004b8 <MotorServoControl+0x120>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a1b      	ldr	r2, [pc, #108]	; (80004bc <MotorServoControl+0x124>)
 800044e:	6812      	ldr	r2, [r2, #0]
 8000450:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(0.25);
 8000452:	2000      	movs	r0, #0
 8000454:	f000 fbb6 	bl	8000bc4 <HAL_Delay>
			for(pwm_value=A; pwm_value<B; pwm_value++)
 8000458:	4b18      	ldr	r3, [pc, #96]	; (80004bc <MotorServoControl+0x124>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	3301      	adds	r3, #1
 800045e:	4a17      	ldr	r2, [pc, #92]	; (80004bc <MotorServoControl+0x124>)
 8000460:	6013      	str	r3, [r2, #0]
 8000462:	4b16      	ldr	r3, [pc, #88]	; (80004bc <MotorServoControl+0x124>)
 8000464:	681b      	ldr	r3, [r3, #0]
 8000466:	68ba      	ldr	r2, [r7, #8]
 8000468:	429a      	cmp	r2, r3
 800046a:	d8ed      	bhi.n	8000448 <MotorServoControl+0xb0>
			for(pwm_value=B; pwm_value>A; pwm_value--)
 800046c:	4a13      	ldr	r2, [pc, #76]	; (80004bc <MotorServoControl+0x124>)
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	6013      	str	r3, [r2, #0]
 8000472:	e00c      	b.n	800048e <MotorServoControl+0xf6>
				 __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,pwm_value);
 8000474:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <MotorServoControl+0x120>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	4a10      	ldr	r2, [pc, #64]	; (80004bc <MotorServoControl+0x124>)
 800047a:	6812      	ldr	r2, [r2, #0]
 800047c:	635a      	str	r2, [r3, #52]	; 0x34
				HAL_Delay(0.25);
 800047e:	2000      	movs	r0, #0
 8000480:	f000 fba0 	bl	8000bc4 <HAL_Delay>
			for(pwm_value=B; pwm_value>A; pwm_value--)
 8000484:	4b0d      	ldr	r3, [pc, #52]	; (80004bc <MotorServoControl+0x124>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	3b01      	subs	r3, #1
 800048a:	4a0c      	ldr	r2, [pc, #48]	; (80004bc <MotorServoControl+0x124>)
 800048c:	6013      	str	r3, [r2, #0]
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <MotorServoControl+0x124>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	68fa      	ldr	r2, [r7, #12]
 8000494:	429a      	cmp	r2, r3
 8000496:	d3ed      	bcc.n	8000474 <MotorServoControl+0xdc>
			break;
 8000498:	bf00      	nop
}
 800049a:	bf00      	nop
 800049c:	3718      	adds	r7, #24
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
 80004a2:	bf00      	nop
 80004a4:	20000000 	.word	0x20000000
 80004a8:	20000194 	.word	0x20000194
 80004ac:	20000134 	.word	0x20000134
 80004b0:	200000d4 	.word	0x200000d4
 80004b4:	200000ac 	.word	0x200000ac
 80004b8:	200000ec 	.word	0x200000ec
 80004bc:	2000002c 	.word	0x2000002c

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f000 fb1c 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f838 	bl	800053c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 f964 	bl	8000798 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004d0:	f000 f8b0 	bl	8000634 <MX_I2C1_Init>
  MX_TIM1_Init();
 80004d4:	f000 f8dc 	bl	8000690 <MX_TIM1_Init>
  MX_CAN_Init();
 80004d8:	f000 f876 	bl	80005c8 <MX_CAN_Init>
  /* USER CODE BEGIN 2 */

  //Start PWM Genaration for Timer1
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80004dc:	2100      	movs	r1, #0
 80004de:	4814      	ldr	r0, [pc, #80]	; (8000530 <main+0x70>)
 80004e0:	f002 fcce 	bl	8002e80 <HAL_TIM_PWM_Start>

  // Initialize CAN Interrupts
  HAL_CAN_ActivateNotification(&hcan, CAN_IT_RX_FIFO0_MSG_PENDING);
 80004e4:	2102      	movs	r1, #2
 80004e6:	4813      	ldr	r0, [pc, #76]	; (8000534 <main+0x74>)
 80004e8:	f000 ff81 	bl	80013ee <HAL_CAN_ActivateNotification>

  // Initialize CAN Config
  Init_Tx_Can_Config();
 80004ec:	f7ff ff14 	bl	8000318 <Init_Tx_Can_Config>
  Init_Filter_Can_Config();
 80004f0:	f7ff ff28 	bl	8000344 <Init_Filter_Can_Config>

  // Start CAN Comminications
  HAL_CAN_Start(&hcan);
 80004f4:	480f      	ldr	r0, [pc, #60]	; (8000534 <main+0x74>)
 80004f6:	f000 fd4b 	bl	8000f90 <HAL_CAN_Start>

  // Print LCD Config
  lcd_init();
 80004fa:	f7ff febb 	bl	8000274 <lcd_init>
  HAL_Delay(10);
 80004fe:	200a      	movs	r0, #10
 8000500:	f000 fb60 	bl	8000bc4 <HAL_Delay>
  lcd_clear();
 8000504:	f7ff fe82 	bl	800020c <lcd_clear>
  lcd_put_cur(0, 0);
 8000508:	2100      	movs	r1, #0
 800050a:	2000      	movs	r0, #0
 800050c:	f7ff fe94 	bl	8000238 <lcd_put_cur>
  lcd_send_string("MotorSpeedControl");
 8000510:	4809      	ldr	r0, [pc, #36]	; (8000538 <main+0x78>)
 8000512:	f7ff feec 	bl	80002ee <lcd_send_string>
  HAL_Delay(1000);
 8000516:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051a:	f000 fb53 	bl	8000bc4 <HAL_Delay>

    /* USER CODE BEGIN 3 */


      // Convert adc_value between 500 and 2500 pwm values
	  MotorServoControl(500,2500,1);
 800051e:	2201      	movs	r2, #1
 8000520:	f640 11c4 	movw	r1, #2500	; 0x9c4
 8000524:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000528:	f7ff ff36 	bl	8000398 <MotorServoControl>
 800052c:	e7f7      	b.n	800051e <main+0x5e>
 800052e:	bf00      	nop
 8000530:	200000ec 	.word	0x200000ec
 8000534:	200000ac 	.word	0x200000ac
 8000538:	0800372c 	.word	0x0800372c

0800053c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b090      	sub	sp, #64	; 0x40
 8000540:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000542:	f107 0318 	add.w	r3, r7, #24
 8000546:	2228      	movs	r2, #40	; 0x28
 8000548:	2100      	movs	r1, #0
 800054a:	4618      	mov	r0, r3
 800054c:	f003 f8da 	bl	8003704 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000550:	1d3b      	adds	r3, r7, #4
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]
 8000556:	605a      	str	r2, [r3, #4]
 8000558:	609a      	str	r2, [r3, #8]
 800055a:	60da      	str	r2, [r3, #12]
 800055c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800055e:	2301      	movs	r3, #1
 8000560:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000562:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000566:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000568:	2300      	movs	r3, #0
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800056c:	2301      	movs	r3, #1
 800056e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000570:	2302      	movs	r3, #2
 8000572:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000574:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000578:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800057a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800057e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0318 	add.w	r3, r7, #24
 8000584:	4618      	mov	r0, r3
 8000586:	f002 f823 	bl	80025d0 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000590:	f000 f930 	bl	80007f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000594:	230f      	movs	r3, #15
 8000596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000598:	2302      	movs	r3, #2
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	2102      	movs	r1, #2
 80005ae:	4618      	mov	r0, r3
 80005b0:	f002 fa8e 	bl	8002ad0 <HAL_RCC_ClockConfig>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ba:	f000 f91b 	bl	80007f4 <Error_Handler>
  }
}
 80005be:	bf00      	nop
 80005c0:	3740      	adds	r7, #64	; 0x40
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
	...

080005c8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */

  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80005cc:	4b17      	ldr	r3, [pc, #92]	; (800062c <MX_CAN_Init+0x64>)
 80005ce:	4a18      	ldr	r2, [pc, #96]	; (8000630 <MX_CAN_Init+0x68>)
 80005d0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 18;
 80005d2:	4b16      	ldr	r3, [pc, #88]	; (800062c <MX_CAN_Init+0x64>)
 80005d4:	2212      	movs	r2, #18
 80005d6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_CAN_Init+0x64>)
 80005da:	2200      	movs	r2, #0
 80005dc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <MX_CAN_Init+0x64>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_10TQ;
 80005e4:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_CAN_Init+0x64>)
 80005e6:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 80005ea:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_5TQ;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_CAN_Init+0x64>)
 80005ee:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80005f2:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <MX_CAN_Init+0x64>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 80005fa:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_CAN_Init+0x64>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <MX_CAN_Init+0x64>)
 8000602:	2200      	movs	r2, #0
 8000604:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8000606:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_CAN_Init+0x64>)
 8000608:	2200      	movs	r2, #0
 800060a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <MX_CAN_Init+0x64>)
 800060e:	2200      	movs	r2, #0
 8000610:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8000612:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_CAN_Init+0x64>)
 8000614:	2200      	movs	r2, #0
 8000616:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <MX_CAN_Init+0x64>)
 800061a:	f000 faf5 	bl	8000c08 <HAL_CAN_Init>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_CAN_Init+0x60>
  {
    Error_Handler();
 8000624:	f000 f8e6 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */

  /* USER CODE END CAN_Init 2 */

}
 8000628:	bf00      	nop
 800062a:	bd80      	pop	{r7, pc}
 800062c:	200000ac 	.word	0x200000ac
 8000630:	40006400 	.word	0x40006400

08000634 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_I2C1_Init+0x50>)
 800063a:	4a13      	ldr	r2, [pc, #76]	; (8000688 <MX_I2C1_Init+0x54>)
 800063c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_I2C1_Init+0x50>)
 8000640:	4a12      	ldr	r2, [pc, #72]	; (800068c <MX_I2C1_Init+0x58>)
 8000642:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000644:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_I2C1_Init+0x50>)
 8000646:	2200      	movs	r2, #0
 8000648:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800064a:	4b0e      	ldr	r3, [pc, #56]	; (8000684 <MX_I2C1_Init+0x50>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000650:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_I2C1_Init+0x50>)
 8000652:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000656:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_I2C1_Init+0x50>)
 800065a:	2200      	movs	r2, #0
 800065c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_I2C1_Init+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_I2C1_Init+0x50>)
 8000672:	f001 fb6f 	bl	8001d54 <HAL_I2C_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800067c:	f000 f8ba 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000058 	.word	0x20000058
 8000688:	40005400 	.word	0x40005400
 800068c:	000186a0 	.word	0x000186a0

08000690 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b092      	sub	sp, #72	; 0x48
 8000694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000696:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800069a:	2200      	movs	r2, #0
 800069c:	601a      	str	r2, [r3, #0]
 800069e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
 80006b0:	615a      	str	r2, [r3, #20]
 80006b2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80006b4:	1d3b      	adds	r3, r7, #4
 80006b6:	2220      	movs	r2, #32
 80006b8:	2100      	movs	r1, #0
 80006ba:	4618      	mov	r0, r3
 80006bc:	f003 f822 	bl	8003704 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006c0:	4b33      	ldr	r3, [pc, #204]	; (8000790 <MX_TIM1_Init+0x100>)
 80006c2:	4a34      	ldr	r2, [pc, #208]	; (8000794 <MX_TIM1_Init+0x104>)
 80006c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 80006c6:	4b32      	ldr	r3, [pc, #200]	; (8000790 <MX_TIM1_Init+0x100>)
 80006c8:	2247      	movs	r2, #71	; 0x47
 80006ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006cc:	4b30      	ldr	r3, [pc, #192]	; (8000790 <MX_TIM1_Init+0x100>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 80006d2:	4b2f      	ldr	r3, [pc, #188]	; (8000790 <MX_TIM1_Init+0x100>)
 80006d4:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80006d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <MX_TIM1_Init+0x100>)
 80006dc:	2200      	movs	r2, #0
 80006de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006e0:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MX_TIM1_Init+0x100>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <MX_TIM1_Init+0x100>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80006ec:	4828      	ldr	r0, [pc, #160]	; (8000790 <MX_TIM1_Init+0x100>)
 80006ee:	f002 fb77 	bl	8002de0 <HAL_TIM_PWM_Init>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80006f8:	f000 f87c 	bl	80007f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006fc:	2300      	movs	r3, #0
 80006fe:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000700:	2300      	movs	r3, #0
 8000702:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000704:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000708:	4619      	mov	r1, r3
 800070a:	4821      	ldr	r0, [pc, #132]	; (8000790 <MX_TIM1_Init+0x100>)
 800070c:	f002 ff26 	bl	800355c <HAL_TIMEx_MasterConfigSynchronization>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8000716:	f000 f86d 	bl	80007f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800071a:	2360      	movs	r3, #96	; 0x60
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000722:	2300      	movs	r3, #0
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000726:	2300      	movs	r3, #0
 8000728:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800072a:	2300      	movs	r3, #0
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800072e:	2300      	movs	r3, #0
 8000730:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000732:	2300      	movs	r3, #0
 8000734:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000736:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073a:	2200      	movs	r2, #0
 800073c:	4619      	mov	r1, r3
 800073e:	4814      	ldr	r0, [pc, #80]	; (8000790 <MX_TIM1_Init+0x100>)
 8000740:	f002 fc40 	bl	8002fc4 <HAL_TIM_PWM_ConfigChannel>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d001      	beq.n	800074e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800074a:	f000 f853 	bl	80007f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800074e:	2300      	movs	r3, #0
 8000750:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000752:	2300      	movs	r3, #0
 8000754:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000756:	2300      	movs	r3, #0
 8000758:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800075a:	2300      	movs	r3, #0
 800075c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000762:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000766:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	4619      	mov	r1, r3
 8000770:	4807      	ldr	r0, [pc, #28]	; (8000790 <MX_TIM1_Init+0x100>)
 8000772:	f002 ff51 	bl	8003618 <HAL_TIMEx_ConfigBreakDeadTime>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 800077c:	f000 f83a 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000780:	4803      	ldr	r0, [pc, #12]	; (8000790 <MX_TIM1_Init+0x100>)
 8000782:	f000 f91f 	bl	80009c4 <HAL_TIM_MspPostInit>

}
 8000786:	bf00      	nop
 8000788:	3748      	adds	r7, #72	; 0x48
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	200000ec 	.word	0x200000ec
 8000794:	40012c00 	.word	0x40012c00

08000798 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000798:	b480      	push	{r7}
 800079a:	b085      	sub	sp, #20
 800079c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	4b14      	ldr	r3, [pc, #80]	; (80007f0 <MX_GPIO_Init+0x58>)
 80007a0:	699b      	ldr	r3, [r3, #24]
 80007a2:	4a13      	ldr	r2, [pc, #76]	; (80007f0 <MX_GPIO_Init+0x58>)
 80007a4:	f043 0320 	orr.w	r3, r3, #32
 80007a8:	6193      	str	r3, [r2, #24]
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <MX_GPIO_Init+0x58>)
 80007ac:	699b      	ldr	r3, [r3, #24]
 80007ae:	f003 0320 	and.w	r3, r3, #32
 80007b2:	60fb      	str	r3, [r7, #12]
 80007b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <MX_GPIO_Init+0x58>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	4a0d      	ldr	r2, [pc, #52]	; (80007f0 <MX_GPIO_Init+0x58>)
 80007bc:	f043 0304 	orr.w	r3, r3, #4
 80007c0:	6193      	str	r3, [r2, #24]
 80007c2:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <MX_GPIO_Init+0x58>)
 80007c4:	699b      	ldr	r3, [r3, #24]
 80007c6:	f003 0304 	and.w	r3, r3, #4
 80007ca:	60bb      	str	r3, [r7, #8]
 80007cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <MX_GPIO_Init+0x58>)
 80007d0:	699b      	ldr	r3, [r3, #24]
 80007d2:	4a07      	ldr	r2, [pc, #28]	; (80007f0 <MX_GPIO_Init+0x58>)
 80007d4:	f043 0308 	orr.w	r3, r3, #8
 80007d8:	6193      	str	r3, [r2, #24]
 80007da:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <MX_GPIO_Init+0x58>)
 80007dc:	699b      	ldr	r3, [r3, #24]
 80007de:	f003 0308 	and.w	r3, r3, #8
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	687b      	ldr	r3, [r7, #4]

}
 80007e6:	bf00      	nop
 80007e8:	3714      	adds	r7, #20
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr
 80007f0:	40021000 	.word	0x40021000

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000806:	4b15      	ldr	r3, [pc, #84]	; (800085c <HAL_MspInit+0x5c>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	4a14      	ldr	r2, [pc, #80]	; (800085c <HAL_MspInit+0x5c>)
 800080c:	f043 0301 	orr.w	r3, r3, #1
 8000810:	6193      	str	r3, [r2, #24]
 8000812:	4b12      	ldr	r3, [pc, #72]	; (800085c <HAL_MspInit+0x5c>)
 8000814:	699b      	ldr	r3, [r3, #24]
 8000816:	f003 0301 	and.w	r3, r3, #1
 800081a:	60bb      	str	r3, [r7, #8]
 800081c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	4b0f      	ldr	r3, [pc, #60]	; (800085c <HAL_MspInit+0x5c>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	4a0e      	ldr	r2, [pc, #56]	; (800085c <HAL_MspInit+0x5c>)
 8000824:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000828:	61d3      	str	r3, [r2, #28]
 800082a:	4b0c      	ldr	r3, [pc, #48]	; (800085c <HAL_MspInit+0x5c>)
 800082c:	69db      	ldr	r3, [r3, #28]
 800082e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000836:	4b0a      	ldr	r3, [pc, #40]	; (8000860 <HAL_MspInit+0x60>)
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
 800083e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000842:	60fb      	str	r3, [r7, #12]
 8000844:	68fb      	ldr	r3, [r7, #12]
 8000846:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	4a04      	ldr	r2, [pc, #16]	; (8000860 <HAL_MspInit+0x60>)
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000852:	bf00      	nop
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	40021000 	.word	0x40021000
 8000860:	40010000 	.word	0x40010000

08000864 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b088      	sub	sp, #32
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4a20      	ldr	r2, [pc, #128]	; (8000900 <HAL_CAN_MspInit+0x9c>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d139      	bne.n	80008f8 <HAL_CAN_MspInit+0x94>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000884:	4b1f      	ldr	r3, [pc, #124]	; (8000904 <HAL_CAN_MspInit+0xa0>)
 8000886:	69db      	ldr	r3, [r3, #28]
 8000888:	4a1e      	ldr	r2, [pc, #120]	; (8000904 <HAL_CAN_MspInit+0xa0>)
 800088a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800088e:	61d3      	str	r3, [r2, #28]
 8000890:	4b1c      	ldr	r3, [pc, #112]	; (8000904 <HAL_CAN_MspInit+0xa0>)
 8000892:	69db      	ldr	r3, [r3, #28]
 8000894:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089c:	4b19      	ldr	r3, [pc, #100]	; (8000904 <HAL_CAN_MspInit+0xa0>)
 800089e:	699b      	ldr	r3, [r3, #24]
 80008a0:	4a18      	ldr	r2, [pc, #96]	; (8000904 <HAL_CAN_MspInit+0xa0>)
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	6193      	str	r3, [r2, #24]
 80008a8:	4b16      	ldr	r3, [pc, #88]	; (8000904 <HAL_CAN_MspInit+0xa0>)
 80008aa:	699b      	ldr	r3, [r3, #24]
 80008ac:	f003 0304 	and.w	r3, r3, #4
 80008b0:	60bb      	str	r3, [r7, #8]
 80008b2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration    
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80008b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008be:	2300      	movs	r3, #0
 80008c0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008c2:	f107 0310 	add.w	r3, r7, #16
 80008c6:	4619      	mov	r1, r3
 80008c8:	480f      	ldr	r0, [pc, #60]	; (8000908 <HAL_CAN_MspInit+0xa4>)
 80008ca:	f001 f8e9 	bl	8001aa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008d2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d4:	2302      	movs	r3, #2
 80008d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008dc:	f107 0310 	add.w	r3, r7, #16
 80008e0:	4619      	mov	r1, r3
 80008e2:	4809      	ldr	r0, [pc, #36]	; (8000908 <HAL_CAN_MspInit+0xa4>)
 80008e4:	f001 f8dc 	bl	8001aa0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 2, 0);
 80008e8:	2200      	movs	r2, #0
 80008ea:	2102      	movs	r1, #2
 80008ec:	2014      	movs	r0, #20
 80008ee:	f001 f8a0 	bl	8001a32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 80008f2:	2014      	movs	r0, #20
 80008f4:	f001 f8b9 	bl	8001a6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80008f8:	bf00      	nop
 80008fa:	3720      	adds	r7, #32
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40006400 	.word	0x40006400
 8000904:	40021000 	.word	0x40021000
 8000908:	40010800 	.word	0x40010800

0800090c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b088      	sub	sp, #32
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
 800091c:	605a      	str	r2, [r3, #4]
 800091e:	609a      	str	r2, [r3, #8]
 8000920:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	4a15      	ldr	r2, [pc, #84]	; (800097c <HAL_I2C_MspInit+0x70>)
 8000928:	4293      	cmp	r3, r2
 800092a:	d123      	bne.n	8000974 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <HAL_I2C_MspInit+0x74>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <HAL_I2C_MspInit+0x74>)
 8000932:	f043 0308 	orr.w	r3, r3, #8
 8000936:	6193      	str	r3, [r2, #24]
 8000938:	4b11      	ldr	r3, [pc, #68]	; (8000980 <HAL_I2C_MspInit+0x74>)
 800093a:	699b      	ldr	r3, [r3, #24]
 800093c:	f003 0308 	and.w	r3, r3, #8
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000944:	23c0      	movs	r3, #192	; 0xc0
 8000946:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000948:	2312      	movs	r3, #18
 800094a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	4619      	mov	r1, r3
 8000956:	480b      	ldr	r0, [pc, #44]	; (8000984 <HAL_I2C_MspInit+0x78>)
 8000958:	f001 f8a2 	bl	8001aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800095c:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_I2C_MspInit+0x74>)
 800095e:	69db      	ldr	r3, [r3, #28]
 8000960:	4a07      	ldr	r2, [pc, #28]	; (8000980 <HAL_I2C_MspInit+0x74>)
 8000962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000966:	61d3      	str	r3, [r2, #28]
 8000968:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_I2C_MspInit+0x74>)
 800096a:	69db      	ldr	r3, [r3, #28]
 800096c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000970:	60bb      	str	r3, [r7, #8]
 8000972:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000974:	bf00      	nop
 8000976:	3720      	adds	r7, #32
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40005400 	.word	0x40005400
 8000980:	40021000 	.word	0x40021000
 8000984:	40010c00 	.word	0x40010c00

08000988 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000988:	b480      	push	{r7}
 800098a:	b085      	sub	sp, #20
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a09      	ldr	r2, [pc, #36]	; (80009bc <HAL_TIM_PWM_MspInit+0x34>)
 8000996:	4293      	cmp	r3, r2
 8000998:	d10b      	bne.n	80009b2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800099a:	4b09      	ldr	r3, [pc, #36]	; (80009c0 <HAL_TIM_PWM_MspInit+0x38>)
 800099c:	699b      	ldr	r3, [r3, #24]
 800099e:	4a08      	ldr	r2, [pc, #32]	; (80009c0 <HAL_TIM_PWM_MspInit+0x38>)
 80009a0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009a4:	6193      	str	r3, [r2, #24]
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_TIM_PWM_MspInit+0x38>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bc80      	pop	{r7}
 80009ba:	4770      	bx	lr
 80009bc:	40012c00 	.word	0x40012c00
 80009c0:	40021000 	.word	0x40021000

080009c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b088      	sub	sp, #32
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009cc:	f107 0310 	add.w	r3, r7, #16
 80009d0:	2200      	movs	r2, #0
 80009d2:	601a      	str	r2, [r3, #0]
 80009d4:	605a      	str	r2, [r3, #4]
 80009d6:	609a      	str	r2, [r3, #8]
 80009d8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <HAL_TIM_MspPostInit+0x5c>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d118      	bne.n	8000a16 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e4:	4b0f      	ldr	r3, [pc, #60]	; (8000a24 <HAL_TIM_MspPostInit+0x60>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <HAL_TIM_MspPostInit+0x60>)
 80009ea:	f043 0304 	orr.w	r3, r3, #4
 80009ee:	6193      	str	r3, [r2, #24]
 80009f0:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <HAL_TIM_MspPostInit+0x60>)
 80009f2:	699b      	ldr	r3, [r3, #24]
 80009f4:	f003 0304 	and.w	r3, r3, #4
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80009fc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a00:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a02:	2302      	movs	r3, #2
 8000a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a06:	2302      	movs	r3, #2
 8000a08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 0310 	add.w	r3, r7, #16
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4805      	ldr	r0, [pc, #20]	; (8000a28 <HAL_TIM_MspPostInit+0x64>)
 8000a12:	f001 f845 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000a16:	bf00      	nop
 8000a18:	3720      	adds	r7, #32
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	40012c00 	.word	0x40012c00
 8000a24:	40021000 	.word	0x40021000
 8000a28:	40010800 	.word	0x40010800

08000a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <HardFault_Handler+0x4>

08000a3e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a42:	e7fe      	b.n	8000a42 <MemManage_Handler+0x4>

08000a44 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a48:	e7fe      	b.n	8000a48 <BusFault_Handler+0x4>

08000a4a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a4e:	e7fe      	b.n	8000a4e <UsageFault_Handler+0x4>

08000a50 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bc80      	pop	{r7}
 8000a5a:	4770      	bx	lr

08000a5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bc80      	pop	{r7}
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a78:	f000 f888 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan);
 8000a84:	4805      	ldr	r0, [pc, #20]	; (8000a9c <USB_LP_CAN1_RX0_IRQHandler+0x1c>)
 8000a86:	f000 fcd7 	bl	8001438 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan, CAN_RX_FIFO0, &pRxHeader, CanReceiveData);
 8000a8a:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <USB_LP_CAN1_RX0_IRQHandler+0x20>)
 8000a8c:	4a05      	ldr	r2, [pc, #20]	; (8000aa4 <USB_LP_CAN1_RX0_IRQHandler+0x24>)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4802      	ldr	r0, [pc, #8]	; (8000a9c <USB_LP_CAN1_RX0_IRQHandler+0x1c>)
 8000a92:	f000 fb9b 	bl	80011cc <HAL_CAN_GetRxMessage>
  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	200000ac 	.word	0x200000ac
 8000aa0:	20000000 	.word	0x20000000
 8000aa4:	20000178 	.word	0x20000178

08000aa8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bc80      	pop	{r7}
 8000ab2:	4770      	bx	lr

08000ab4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000ab4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ab6:	e003      	b.n	8000ac0 <LoopCopyDataInit>

08000ab8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000aba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000abc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000abe:	3104      	adds	r1, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ac0:	480a      	ldr	r0, [pc, #40]	; (8000aec <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	; (8000af0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000ac4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000ac6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ac8:	d3f6      	bcc.n	8000ab8 <CopyDataInit>
  ldr r2, =_sbss
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000acc:	e002      	b.n	8000ad4 <LoopFillZerobss>

08000ace <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ace:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ad0:	f842 3b04 	str.w	r3, [r2], #4

08000ad4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000ad4:	4b08      	ldr	r3, [pc, #32]	; (8000af8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000ad6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ad8:	d3f9      	bcc.n	8000ace <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ada:	f7ff ffe5 	bl	8000aa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ade:	f002 fded 	bl	80036bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ae2:	f7ff fced 	bl	80004c0 <main>
  bx lr
 8000ae6:	4770      	bx	lr
  ldr r3, =_sidata
 8000ae8:	08003774 	.word	0x08003774
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000af0:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000af4:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000af8:	2000019c 	.word	0x2000019c

08000afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_2_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x28>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x28>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 ff83 	bl	8001a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fe70 	bl	8000800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 ff9b 	bl	8001a86 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 ff63 	bl	8001a32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000004 	.word	0x20000004
 8000b84:	2000000c 	.word	0x2000000c
 8000b88:	20000008 	.word	0x20000008

08000b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <HAL_IncTick+0x1c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_IncTick+0x20>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a03      	ldr	r2, [pc, #12]	; (8000bac <HAL_IncTick+0x20>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bc80      	pop	{r7}
 8000ba6:	4770      	bx	lr
 8000ba8:	2000000c 	.word	0x2000000c
 8000bac:	20000198 	.word	0x20000198

08000bb0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb4:	4b02      	ldr	r3, [pc, #8]	; (8000bc0 <HAL_GetTick+0x10>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	20000198 	.word	0x20000198

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff fff0 	bl	8000bb0 <HAL_GetTick>
 8000bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bde:	4b09      	ldr	r3, [pc, #36]	; (8000c04 <HAL_Delay+0x40>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bea:	bf00      	nop
 8000bec:	f7ff ffe0 	bl	8000bb0 <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	3710      	adds	r7, #16
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	2000000c 	.word	0x2000000c

08000c08 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d101      	bne.n	8000c1a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e0ed      	b.n	8000df6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d102      	bne.n	8000c2c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff fe1c 	bl	8000864 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f022 0202 	bic.w	r2, r2, #2
 8000c3a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c3c:	f7ff ffb8 	bl	8000bb0 <HAL_GetTick>
 8000c40:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c42:	e012      	b.n	8000c6a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c44:	f7ff ffb4 	bl	8000bb0 <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	2b0a      	cmp	r3, #10
 8000c50:	d90b      	bls.n	8000c6a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c56:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2205      	movs	r2, #5
 8000c62:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e0c5      	b.n	8000df6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	f003 0302 	and.w	r3, r3, #2
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1e5      	bne.n	8000c44 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f042 0201 	orr.w	r2, r2, #1
 8000c86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000c88:	f7ff ff92 	bl	8000bb0 <HAL_GetTick>
 8000c8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000c8e:	e012      	b.n	8000cb6 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000c90:	f7ff ff8e 	bl	8000bb0 <HAL_GetTick>
 8000c94:	4602      	mov	r2, r0
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	1ad3      	subs	r3, r2, r3
 8000c9a:	2b0a      	cmp	r3, #10
 8000c9c:	d90b      	bls.n	8000cb6 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	2205      	movs	r2, #5
 8000cae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e09f      	b.n	8000df6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	f003 0301 	and.w	r3, r3, #1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0e5      	beq.n	8000c90 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	7e1b      	ldrb	r3, [r3, #24]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d108      	bne.n	8000cde <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	681a      	ldr	r2, [r3, #0]
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	e007      	b.n	8000cee <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000cec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	7e5b      	ldrb	r3, [r3, #25]
 8000cf2:	2b01      	cmp	r3, #1
 8000cf4:	d108      	bne.n	8000d08 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	681a      	ldr	r2, [r3, #0]
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	e007      	b.n	8000d18 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000d16:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	7e9b      	ldrb	r3, [r3, #26]
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d108      	bne.n	8000d32 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	681a      	ldr	r2, [r3, #0]
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f042 0220 	orr.w	r2, r2, #32
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	e007      	b.n	8000d42 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f022 0220 	bic.w	r2, r2, #32
 8000d40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	7edb      	ldrb	r3, [r3, #27]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d108      	bne.n	8000d5c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	681a      	ldr	r2, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f022 0210 	bic.w	r2, r2, #16
 8000d58:	601a      	str	r2, [r3, #0]
 8000d5a:	e007      	b.n	8000d6c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681a      	ldr	r2, [r3, #0]
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f042 0210 	orr.w	r2, r2, #16
 8000d6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	7f1b      	ldrb	r3, [r3, #28]
 8000d70:	2b01      	cmp	r3, #1
 8000d72:	d108      	bne.n	8000d86 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f042 0208 	orr.w	r2, r2, #8
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	e007      	b.n	8000d96 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f022 0208 	bic.w	r2, r2, #8
 8000d94:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7f5b      	ldrb	r3, [r3, #29]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d108      	bne.n	8000db0 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	681a      	ldr	r2, [r3, #0]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f042 0204 	orr.w	r2, r2, #4
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	e007      	b.n	8000dc0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	681a      	ldr	r2, [r3, #0]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0204 	bic.w	r2, r2, #4
 8000dbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689a      	ldr	r2, [r3, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	691b      	ldr	r3, [r3, #16]
 8000dce:	431a      	orrs	r2, r3
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	ea42 0103 	orr.w	r1, r2, r3
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2200      	movs	r2, #0
 8000dea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2201      	movs	r2, #1
 8000df0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000df4:	2300      	movs	r3, #0
}
 8000df6:	4618      	mov	r0, r3
 8000df8:	3710      	adds	r7, #16
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	b087      	sub	sp, #28
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
 8000e06:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000e14:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000e16:	7cfb      	ldrb	r3, [r7, #19]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d003      	beq.n	8000e24 <HAL_CAN_ConfigFilter+0x26>
 8000e1c:	7cfb      	ldrb	r3, [r7, #19]
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	f040 80aa 	bne.w	8000f78 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000e2a:	f043 0201 	orr.w	r2, r3, #1
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	695b      	ldr	r3, [r3, #20]
 8000e38:	f003 031f 	and.w	r3, r3, #31
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	401a      	ands	r2, r3
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d123      	bne.n	8000ea6 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	401a      	ands	r2, r3
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	68db      	ldr	r3, [r3, #12]
 8000e74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000e80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3248      	adds	r2, #72	; 0x48
 8000e86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000e9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000e9c:	6979      	ldr	r1, [r7, #20]
 8000e9e:	3348      	adds	r3, #72	; 0x48
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	440b      	add	r3, r1
 8000ea4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	69db      	ldr	r3, [r3, #28]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d122      	bne.n	8000ef4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	431a      	orrs	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000eca:	683a      	ldr	r2, [r7, #0]
 8000ecc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ece:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ed0:	697b      	ldr	r3, [r7, #20]
 8000ed2:	3248      	adds	r2, #72	; 0x48
 8000ed4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8000ede:	683b      	ldr	r3, [r7, #0]
 8000ee0:	68db      	ldr	r3, [r3, #12]
 8000ee2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ee8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000eea:	6979      	ldr	r1, [r7, #20]
 8000eec:	3348      	adds	r3, #72	; 0x48
 8000eee:	00db      	lsls	r3, r3, #3
 8000ef0:	440b      	add	r3, r1
 8000ef2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d109      	bne.n	8000f10 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8000efc:	697b      	ldr	r3, [r7, #20]
 8000efe:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8000f0e:	e007      	b.n	8000f20 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000f16:	68fb      	ldr	r3, [r7, #12]
 8000f18:	431a      	orrs	r2, r3
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d109      	bne.n	8000f3c <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	43db      	mvns	r3, r3
 8000f32:	401a      	ands	r2, r3
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8000f3a:	e007      	b.n	8000f4c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	431a      	orrs	r2, r3
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	6a1b      	ldr	r3, [r3, #32]
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d107      	bne.n	8000f64 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	431a      	orrs	r2, r3
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f6a:	f023 0201 	bic.w	r2, r3, #1
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8000f74:	2300      	movs	r3, #0
 8000f76:	e006      	b.n	8000f86 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
  }
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	371c      	adds	r7, #28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b084      	sub	sp, #16
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d12e      	bne.n	8001002 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2202      	movs	r2, #2
 8000fa8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	681a      	ldr	r2, [r3, #0]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f022 0201 	bic.w	r2, r2, #1
 8000fba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8000fbc:	f7ff fdf8 	bl	8000bb0 <HAL_GetTick>
 8000fc0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fc2:	e012      	b.n	8000fea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000fc4:	f7ff fdf4 	bl	8000bb0 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b0a      	cmp	r3, #10
 8000fd0:	d90b      	bls.n	8000fea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2205      	movs	r2, #5
 8000fe2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e012      	b.n	8001010 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1e5      	bne.n	8000fc4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8000ffe:	2300      	movs	r3, #0
 8001000:	e006      	b.n	8001010 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001006:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
  }
}
 8001010:	4618      	mov	r0, r3
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001018:	b480      	push	{r7}
 800101a:	b089      	sub	sp, #36	; 0x24
 800101c:	af00      	add	r7, sp, #0
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	60b9      	str	r1, [r7, #8]
 8001022:	607a      	str	r2, [r7, #4]
 8001024:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800102c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	689b      	ldr	r3, [r3, #8]
 8001034:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001036:	7ffb      	ldrb	r3, [r7, #31]
 8001038:	2b01      	cmp	r3, #1
 800103a:	d003      	beq.n	8001044 <HAL_CAN_AddTxMessage+0x2c>
 800103c:	7ffb      	ldrb	r3, [r7, #31]
 800103e:	2b02      	cmp	r3, #2
 8001040:	f040 80b8 	bne.w	80011b4 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d10a      	bne.n	8001064 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001054:	2b00      	cmp	r3, #0
 8001056:	d105      	bne.n	8001064 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 80a0 	beq.w	80011a4 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	0e1b      	lsrs	r3, r3, #24
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2b02      	cmp	r3, #2
 8001072:	d907      	bls.n	8001084 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001078:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	e09e      	b.n	80011c2 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001084:	2201      	movs	r2, #1
 8001086:	697b      	ldr	r3, [r7, #20]
 8001088:	409a      	lsls	r2, r3
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d10d      	bne.n	80010b2 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80010a0:	68f9      	ldr	r1, [r7, #12]
 80010a2:	6809      	ldr	r1, [r1, #0]
 80010a4:	431a      	orrs	r2, r3
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	3318      	adds	r3, #24
 80010aa:	011b      	lsls	r3, r3, #4
 80010ac:	440b      	add	r3, r1
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	e00f      	b.n	80010d2 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010b2:	68bb      	ldr	r3, [r7, #8]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010bc:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010c2:	68f9      	ldr	r1, [r7, #12]
 80010c4:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80010c6:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	3318      	adds	r3, #24
 80010cc:	011b      	lsls	r3, r3, #4
 80010ce:	440b      	add	r3, r1
 80010d0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6819      	ldr	r1, [r3, #0]
 80010d6:	68bb      	ldr	r3, [r7, #8]
 80010d8:	691a      	ldr	r2, [r3, #16]
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3318      	adds	r3, #24
 80010de:	011b      	lsls	r3, r3, #4
 80010e0:	440b      	add	r3, r1
 80010e2:	3304      	adds	r3, #4
 80010e4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	7d1b      	ldrb	r3, [r3, #20]
 80010ea:	2b01      	cmp	r3, #1
 80010ec:	d111      	bne.n	8001112 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3318      	adds	r3, #24
 80010f6:	011b      	lsls	r3, r3, #4
 80010f8:	4413      	add	r3, r2
 80010fa:	3304      	adds	r3, #4
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68fa      	ldr	r2, [r7, #12]
 8001100:	6811      	ldr	r1, [r2, #0]
 8001102:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	3318      	adds	r3, #24
 800110a:	011b      	lsls	r3, r3, #4
 800110c:	440b      	add	r3, r1
 800110e:	3304      	adds	r3, #4
 8001110:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	3307      	adds	r3, #7
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	061a      	lsls	r2, r3, #24
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	3306      	adds	r3, #6
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	041b      	lsls	r3, r3, #16
 8001122:	431a      	orrs	r2, r3
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	3305      	adds	r3, #5
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	4313      	orrs	r3, r2
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	3204      	adds	r2, #4
 8001132:	7812      	ldrb	r2, [r2, #0]
 8001134:	4610      	mov	r0, r2
 8001136:	68fa      	ldr	r2, [r7, #12]
 8001138:	6811      	ldr	r1, [r2, #0]
 800113a:	ea43 0200 	orr.w	r2, r3, r0
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	011b      	lsls	r3, r3, #4
 8001142:	440b      	add	r3, r1
 8001144:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001148:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3303      	adds	r3, #3
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	061a      	lsls	r2, r3, #24
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	3302      	adds	r3, #2
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	041b      	lsls	r3, r3, #16
 800115a:	431a      	orrs	r2, r3
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	3301      	adds	r3, #1
 8001160:	781b      	ldrb	r3, [r3, #0]
 8001162:	021b      	lsls	r3, r3, #8
 8001164:	4313      	orrs	r3, r2
 8001166:	687a      	ldr	r2, [r7, #4]
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	4610      	mov	r0, r2
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	6811      	ldr	r1, [r2, #0]
 8001170:	ea43 0200 	orr.w	r2, r3, r0
 8001174:	697b      	ldr	r3, [r7, #20]
 8001176:	011b      	lsls	r3, r3, #4
 8001178:	440b      	add	r3, r1
 800117a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800117e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	3318      	adds	r3, #24
 8001188:	011b      	lsls	r3, r3, #4
 800118a:	4413      	add	r3, r2
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	6811      	ldr	r1, [r2, #0]
 8001192:	f043 0201 	orr.w	r2, r3, #1
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	3318      	adds	r3, #24
 800119a:	011b      	lsls	r3, r3, #4
 800119c:	440b      	add	r3, r1
 800119e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80011a0:	2300      	movs	r3, #0
 80011a2:	e00e      	b.n	80011c2 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80011b0:	2301      	movs	r3, #1
 80011b2:	e006      	b.n	80011c2 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
  }
}
 80011c2:	4618      	mov	r0, r3
 80011c4:	3724      	adds	r7, #36	; 0x24
 80011c6:	46bd      	mov	sp, r7
 80011c8:	bc80      	pop	{r7}
 80011ca:	4770      	bx	lr

080011cc <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80011cc:	b480      	push	{r7}
 80011ce:	b087      	sub	sp, #28
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	60f8      	str	r0, [r7, #12]
 80011d4:	60b9      	str	r1, [r7, #8]
 80011d6:	607a      	str	r2, [r7, #4]
 80011d8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80011e0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80011e2:	7dfb      	ldrb	r3, [r7, #23]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d003      	beq.n	80011f0 <HAL_CAN_GetRxMessage+0x24>
 80011e8:	7dfb      	ldrb	r3, [r7, #23]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	f040 80f3 	bne.w	80013d6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d10e      	bne.n	8001214 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	f003 0303 	and.w	r3, r3, #3
 8001200:	2b00      	cmp	r3, #0
 8001202:	d116      	bne.n	8001232 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001208:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e0e7      	b.n	80013e4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	691b      	ldr	r3, [r3, #16]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d107      	bne.n	8001232 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001226:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e0d8      	b.n	80013e4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	331b      	adds	r3, #27
 800123a:	011b      	lsls	r3, r3, #4
 800123c:	4413      	add	r3, r2
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0204 	and.w	r2, r3, #4
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10c      	bne.n	800126a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	331b      	adds	r3, #27
 8001258:	011b      	lsls	r3, r3, #4
 800125a:	4413      	add	r3, r2
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	0d5b      	lsrs	r3, r3, #21
 8001260:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e00b      	b.n	8001282 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	331b      	adds	r3, #27
 8001272:	011b      	lsls	r3, r3, #4
 8001274:	4413      	add	r3, r2
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	08db      	lsrs	r3, r3, #3
 800127a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	331b      	adds	r3, #27
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	4413      	add	r3, r2
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0202 	and.w	r2, r3, #2
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	331b      	adds	r3, #27
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	4413      	add	r3, r2
 80012a4:	3304      	adds	r3, #4
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 020f 	and.w	r2, r3, #15
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	331b      	adds	r3, #27
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	4413      	add	r3, r2
 80012bc:	3304      	adds	r3, #4
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681a      	ldr	r2, [r3, #0]
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	331b      	adds	r3, #27
 80012d0:	011b      	lsls	r3, r3, #4
 80012d2:	4413      	add	r3, r2
 80012d4:	3304      	adds	r3, #4
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	0c1b      	lsrs	r3, r3, #16
 80012da:	b29a      	uxth	r2, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	011b      	lsls	r3, r3, #4
 80012e8:	4413      	add	r3, r2
 80012ea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	b2da      	uxtb	r2, r3
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	011b      	lsls	r3, r3, #4
 80012fe:	4413      	add	r3, r2
 8001300:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	0a1a      	lsrs	r2, r3, #8
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	3301      	adds	r3, #1
 800130c:	b2d2      	uxtb	r2, r2
 800130e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	011b      	lsls	r3, r3, #4
 8001318:	4413      	add	r3, r2
 800131a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	0c1a      	lsrs	r2, r3, #16
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	3302      	adds	r3, #2
 8001326:	b2d2      	uxtb	r2, r2
 8001328:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681a      	ldr	r2, [r3, #0]
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	011b      	lsls	r3, r3, #4
 8001332:	4413      	add	r3, r2
 8001334:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	0e1a      	lsrs	r2, r3, #24
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	3303      	adds	r3, #3
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	681a      	ldr	r2, [r3, #0]
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	011b      	lsls	r3, r3, #4
 800134c:	4413      	add	r3, r2
 800134e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	3304      	adds	r3, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	011b      	lsls	r3, r3, #4
 8001364:	4413      	add	r3, r2
 8001366:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	0a1a      	lsrs	r2, r3, #8
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	3305      	adds	r3, #5
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	011b      	lsls	r3, r3, #4
 800137e:	4413      	add	r3, r2
 8001380:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	0c1a      	lsrs	r2, r3, #16
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	3306      	adds	r3, #6
 800138c:	b2d2      	uxtb	r2, r2
 800138e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	011b      	lsls	r3, r3, #4
 8001398:	4413      	add	r3, r2
 800139a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	0e1a      	lsrs	r2, r3, #24
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	3307      	adds	r3, #7
 80013a6:	b2d2      	uxtb	r2, r2
 80013a8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80013aa:	68bb      	ldr	r3, [r7, #8]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d108      	bne.n	80013c2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f042 0220 	orr.w	r2, r2, #32
 80013be:	60da      	str	r2, [r3, #12]
 80013c0:	e007      	b.n	80013d2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	691a      	ldr	r2, [r3, #16]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 0220 	orr.w	r2, r2, #32
 80013d0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80013d2:	2300      	movs	r3, #0
 80013d4:	e006      	b.n	80013e4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013da:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80013e2:	2301      	movs	r3, #1
  }
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	371c      	adds	r7, #28
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b085      	sub	sp, #20
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013fe:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d002      	beq.n	800140c <HAL_CAN_ActivateNotification+0x1e>
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d109      	bne.n	8001420 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	6959      	ldr	r1, [r3, #20]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	683a      	ldr	r2, [r7, #0]
 8001418:	430a      	orrs	r2, r1
 800141a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800141c:	2300      	movs	r3, #0
 800141e:	e006      	b.n	800142e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001424:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800142c:	2301      	movs	r3, #1
  }
}
 800142e:	4618      	mov	r0, r3
 8001430:	3714      	adds	r7, #20
 8001432:	46bd      	mov	sp, r7
 8001434:	bc80      	pop	{r7}
 8001436:	4770      	bx	lr

08001438 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	695b      	ldr	r3, [r3, #20]
 800144a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	68db      	ldr	r3, [r3, #12]
 8001462:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	691b      	ldr	r3, [r3, #16]
 800146a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	699b      	ldr	r3, [r3, #24]
 8001472:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	2b00      	cmp	r3, #0
 800147c:	d07c      	beq.n	8001578 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d023      	beq.n	80014d0 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	2201      	movs	r2, #1
 800148e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d003      	beq.n	80014a2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800149a:	6878      	ldr	r0, [r7, #4]
 800149c:	f000 f97d 	bl	800179a <HAL_CAN_TxMailbox0CompleteCallback>
 80014a0:	e016      	b.n	80014d0 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	f003 0304 	and.w	r3, r3, #4
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80014ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80014b2:	627b      	str	r3, [r7, #36]	; 0x24
 80014b4:	e00c      	b.n	80014d0 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80014b6:	69bb      	ldr	r3, [r7, #24]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d004      	beq.n	80014ca <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80014c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80014c6:	627b      	str	r3, [r7, #36]	; 0x24
 80014c8:	e002      	b.n	80014d0 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f980 	bl	80017d0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80014d0:	69bb      	ldr	r3, [r7, #24]
 80014d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d024      	beq.n	8001524 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80014e2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d003      	beq.n	80014f6 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f95c 	bl	80017ac <HAL_CAN_TxMailbox1CompleteCallback>
 80014f4:	e016      	b.n	8001524 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80014f6:	69bb      	ldr	r3, [r7, #24]
 80014f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d004      	beq.n	800150a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
 8001508:	e00c      	b.n	8001524 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001510:	2b00      	cmp	r3, #0
 8001512:	d004      	beq.n	800151e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151a:	627b      	str	r3, [r7, #36]	; 0x24
 800151c:	e002      	b.n	8001524 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f95f 	bl	80017e2 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152a:	2b00      	cmp	r3, #0
 800152c:	d024      	beq.n	8001578 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001536:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f000 f93b 	bl	80017be <HAL_CAN_TxMailbox2CompleteCallback>
 8001548:	e016      	b.n	8001578 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001550:	2b00      	cmp	r3, #0
 8001552:	d004      	beq.n	800155e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001556:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
 800155c:	e00c      	b.n	8001578 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d004      	beq.n	8001572 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800156e:	627b      	str	r3, [r7, #36]	; 0x24
 8001570:	e002      	b.n	8001578 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f000 f93e 	bl	80017f4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001578:	6a3b      	ldr	r3, [r7, #32]
 800157a:	f003 0308 	and.w	r3, r3, #8
 800157e:	2b00      	cmp	r3, #0
 8001580:	d00c      	beq.n	800159c <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	f003 0310 	and.w	r3, r3, #16
 8001588:	2b00      	cmp	r3, #0
 800158a:	d007      	beq.n	800159c <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800158c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001592:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	2210      	movs	r2, #16
 800159a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800159c:	6a3b      	ldr	r3, [r7, #32]
 800159e:	f003 0304 	and.w	r3, r3, #4
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d00b      	beq.n	80015be <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f003 0308 	and.w	r3, r3, #8
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d006      	beq.n	80015be <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2208      	movs	r2, #8
 80015b6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f000 f92d 	bl	8001818 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80015be:	6a3b      	ldr	r3, [r7, #32]
 80015c0:	f003 0302 	and.w	r3, r3, #2
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d009      	beq.n	80015dc <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	f003 0303 	and.w	r3, r3, #3
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d002      	beq.n	80015dc <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	f000 f915 	bl	8001806 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80015dc:	6a3b      	ldr	r3, [r7, #32]
 80015de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d00c      	beq.n	8001600 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	f003 0310 	and.w	r3, r3, #16
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d007      	beq.n	8001600 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015f6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2210      	movs	r2, #16
 80015fe:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001600:	6a3b      	ldr	r3, [r7, #32]
 8001602:	f003 0320 	and.w	r3, r3, #32
 8001606:	2b00      	cmp	r3, #0
 8001608:	d00b      	beq.n	8001622 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d006      	beq.n	8001622 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2208      	movs	r2, #8
 800161a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f000 f90d 	bl	800183c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001622:	6a3b      	ldr	r3, [r7, #32]
 8001624:	f003 0310 	and.w	r3, r3, #16
 8001628:	2b00      	cmp	r3, #0
 800162a:	d009      	beq.n	8001640 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	2b00      	cmp	r3, #0
 8001638:	d002      	beq.n	8001640 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f000 f8f5 	bl	800182a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001640:	6a3b      	ldr	r3, [r7, #32]
 8001642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00b      	beq.n	8001662 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f003 0310 	and.w	r3, r3, #16
 8001650:	2b00      	cmp	r3, #0
 8001652:	d006      	beq.n	8001662 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2210      	movs	r2, #16
 800165a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800165c:	6878      	ldr	r0, [r7, #4]
 800165e:	f000 f8f6 	bl	800184e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001662:	6a3b      	ldr	r3, [r7, #32]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	2b00      	cmp	r3, #0
 800166a:	d00b      	beq.n	8001684 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0308 	and.w	r3, r3, #8
 8001672:	2b00      	cmp	r3, #0
 8001674:	d006      	beq.n	8001684 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	2208      	movs	r2, #8
 800167c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f000 f8ee 	bl	8001860 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001684:	6a3b      	ldr	r3, [r7, #32]
 8001686:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d075      	beq.n	800177a <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	f003 0304 	and.w	r3, r3, #4
 8001694:	2b00      	cmp	r3, #0
 8001696:	d06c      	beq.n	8001772 <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001698:	6a3b      	ldr	r3, [r7, #32]
 800169a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d003      	beq.n	80016b4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016b4:	6a3b      	ldr	r3, [r7, #32]
 80016b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d008      	beq.n	80016d0 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d003      	beq.n	80016d0 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80016c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d008      	beq.n	80016ec <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80016e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e6:	f043 0304 	orr.w	r3, r3, #4
 80016ea:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016ec:	6a3b      	ldr	r3, [r7, #32]
 80016ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d03d      	beq.n	8001772 <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d038      	beq.n	8001772 <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001706:	2b30      	cmp	r3, #48	; 0x30
 8001708:	d017      	beq.n	800173a <HAL_CAN_IRQHandler+0x302>
 800170a:	2b30      	cmp	r3, #48	; 0x30
 800170c:	d804      	bhi.n	8001718 <HAL_CAN_IRQHandler+0x2e0>
 800170e:	2b10      	cmp	r3, #16
 8001710:	d009      	beq.n	8001726 <HAL_CAN_IRQHandler+0x2ee>
 8001712:	2b20      	cmp	r3, #32
 8001714:	d00c      	beq.n	8001730 <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001716:	e024      	b.n	8001762 <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001718:	2b50      	cmp	r3, #80	; 0x50
 800171a:	d018      	beq.n	800174e <HAL_CAN_IRQHandler+0x316>
 800171c:	2b60      	cmp	r3, #96	; 0x60
 800171e:	d01b      	beq.n	8001758 <HAL_CAN_IRQHandler+0x320>
 8001720:	2b40      	cmp	r3, #64	; 0x40
 8001722:	d00f      	beq.n	8001744 <HAL_CAN_IRQHandler+0x30c>
            break;
 8001724:	e01d      	b.n	8001762 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001728:	f043 0308 	orr.w	r3, r3, #8
 800172c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800172e:	e018      	b.n	8001762 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001732:	f043 0310 	orr.w	r3, r3, #16
 8001736:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001738:	e013      	b.n	8001762 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	f043 0320 	orr.w	r3, r3, #32
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001742:	e00e      	b.n	8001762 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001746:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800174a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800174c:	e009      	b.n	8001762 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800174e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001756:	e004      	b.n	8001762 <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001760:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	699a      	ldr	r2, [r3, #24]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001770:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	2204      	movs	r2, #4
 8001778:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800177a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800177c:	2b00      	cmp	r3, #0
 800177e:	d008      	beq.n	8001792 <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f000 f870 	bl	8001872 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001792:	bf00      	nop
 8001794:	3728      	adds	r7, #40	; 0x28
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}

0800179a <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800179a:	b480      	push	{r7}
 800179c:	b083      	sub	sp, #12
 800179e:	af00      	add	r7, sp, #0
 80017a0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80017a2:	bf00      	nop
 80017a4:	370c      	adds	r7, #12
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bc80      	pop	{r7}
 80017aa:	4770      	bx	lr

080017ac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	bc80      	pop	{r7}
 80017bc:	4770      	bx	lr

080017be <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80017be:	b480      	push	{r7}
 80017c0:	b083      	sub	sp, #12
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80017c6:	bf00      	nop
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bc80      	pop	{r7}
 80017ce:	4770      	bx	lr

080017d0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80017d8:	bf00      	nop
 80017da:	370c      	adds	r7, #12
 80017dc:	46bd      	mov	sp, r7
 80017de:	bc80      	pop	{r7}
 80017e0:	4770      	bx	lr

080017e2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bc80      	pop	{r7}
 80017f2:	4770      	bx	lr

080017f4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001806:	b480      	push	{r7}
 8001808:	b083      	sub	sp, #12
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 800180e:	bf00      	nop
 8001810:	370c      	adds	r7, #12
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001820:	bf00      	nop
 8001822:	370c      	adds	r7, #12
 8001824:	46bd      	mov	sp, r7
 8001826:	bc80      	pop	{r7}
 8001828:	4770      	bx	lr

0800182a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800182a:	b480      	push	{r7}
 800182c:	b083      	sub	sp, #12
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	bc80      	pop	{r7}
 800183a:	4770      	bx	lr

0800183c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr

0800184e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800184e:	b480      	push	{r7}
 8001850:	b083      	sub	sp, #12
 8001852:	af00      	add	r7, sp, #0
 8001854:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	bc80      	pop	{r7}
 800185e:	4770      	bx	lr

08001860 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001868:	bf00      	nop
 800186a:	370c      	adds	r7, #12
 800186c:	46bd      	mov	sp, r7
 800186e:	bc80      	pop	{r7}
 8001870:	4770      	bx	lr

08001872 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001872:	b480      	push	{r7}
 8001874:	b083      	sub	sp, #12
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b6:	4a04      	ldr	r2, [pc, #16]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018b8:	68bb      	ldr	r3, [r7, #8]
 80018ba:	60d3      	str	r3, [r2, #12]
}
 80018bc:	bf00      	nop
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	bc80      	pop	{r7}
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	e000ed00 	.word	0xe000ed00

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4906      	ldr	r1, [pc, #24]	; (800191c <__NVIC_EnableIRQ+0x34>)
 8001902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	bc80      	pop	{r7}
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019e8:	d301      	bcc.n	80019ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ea:	2301      	movs	r3, #1
 80019ec:	e00f      	b.n	8001a0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019ee:	4a0a      	ldr	r2, [pc, #40]	; (8001a18 <SysTick_Config+0x40>)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019f6:	210f      	movs	r1, #15
 80019f8:	f04f 30ff 	mov.w	r0, #4294967295
 80019fc:	f7ff ff90 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a00:	4b05      	ldr	r3, [pc, #20]	; (8001a18 <SysTick_Config+0x40>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a06:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <SysTick_Config+0x40>)
 8001a08:	2207      	movs	r2, #7
 8001a0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	e000e010 	.word	0xe000e010

08001a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f7ff ff2d 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 8001a2a:	bf00      	nop
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b086      	sub	sp, #24
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	60b9      	str	r1, [r7, #8]
 8001a3c:	607a      	str	r2, [r7, #4]
 8001a3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a44:	f7ff ff42 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4a:	687a      	ldr	r2, [r7, #4]
 8001a4c:	68b9      	ldr	r1, [r7, #8]
 8001a4e:	6978      	ldr	r0, [r7, #20]
 8001a50:	f7ff ff90 	bl	8001974 <NVIC_EncodePriority>
 8001a54:	4602      	mov	r2, r0
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff5f 	bl	8001920 <__NVIC_SetPriority>
}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	4603      	mov	r3, r0
 8001a72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff ff35 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b082      	sub	sp, #8
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a8e:	6878      	ldr	r0, [r7, #4]
 8001a90:	f7ff ffa2 	bl	80019d8 <SysTick_Config>
 8001a94:	4603      	mov	r3, r0
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3708      	adds	r7, #8
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
	...

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b08b      	sub	sp, #44	; 0x2c
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ab2:	e127      	b.n	8001d04 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	69fa      	ldr	r2, [r7, #28]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ac8:	69ba      	ldr	r2, [r7, #24]
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	f040 8116 	bne.w	8001cfe <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	2b12      	cmp	r3, #18
 8001ad8:	d034      	beq.n	8001b44 <HAL_GPIO_Init+0xa4>
 8001ada:	2b12      	cmp	r3, #18
 8001adc:	d80d      	bhi.n	8001afa <HAL_GPIO_Init+0x5a>
 8001ade:	2b02      	cmp	r3, #2
 8001ae0:	d02b      	beq.n	8001b3a <HAL_GPIO_Init+0x9a>
 8001ae2:	2b02      	cmp	r3, #2
 8001ae4:	d804      	bhi.n	8001af0 <HAL_GPIO_Init+0x50>
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d031      	beq.n	8001b4e <HAL_GPIO_Init+0xae>
 8001aea:	2b01      	cmp	r3, #1
 8001aec:	d01c      	beq.n	8001b28 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001aee:	e048      	b.n	8001b82 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001af0:	2b03      	cmp	r3, #3
 8001af2:	d043      	beq.n	8001b7c <HAL_GPIO_Init+0xdc>
 8001af4:	2b11      	cmp	r3, #17
 8001af6:	d01b      	beq.n	8001b30 <HAL_GPIO_Init+0x90>
          break;
 8001af8:	e043      	b.n	8001b82 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001afa:	4a89      	ldr	r2, [pc, #548]	; (8001d20 <HAL_GPIO_Init+0x280>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d026      	beq.n	8001b4e <HAL_GPIO_Init+0xae>
 8001b00:	4a87      	ldr	r2, [pc, #540]	; (8001d20 <HAL_GPIO_Init+0x280>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d806      	bhi.n	8001b14 <HAL_GPIO_Init+0x74>
 8001b06:	4a87      	ldr	r2, [pc, #540]	; (8001d24 <HAL_GPIO_Init+0x284>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d020      	beq.n	8001b4e <HAL_GPIO_Init+0xae>
 8001b0c:	4a86      	ldr	r2, [pc, #536]	; (8001d28 <HAL_GPIO_Init+0x288>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d01d      	beq.n	8001b4e <HAL_GPIO_Init+0xae>
          break;
 8001b12:	e036      	b.n	8001b82 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001b14:	4a85      	ldr	r2, [pc, #532]	; (8001d2c <HAL_GPIO_Init+0x28c>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d019      	beq.n	8001b4e <HAL_GPIO_Init+0xae>
 8001b1a:	4a85      	ldr	r2, [pc, #532]	; (8001d30 <HAL_GPIO_Init+0x290>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d016      	beq.n	8001b4e <HAL_GPIO_Init+0xae>
 8001b20:	4a84      	ldr	r2, [pc, #528]	; (8001d34 <HAL_GPIO_Init+0x294>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d013      	beq.n	8001b4e <HAL_GPIO_Init+0xae>
          break;
 8001b26:	e02c      	b.n	8001b82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	623b      	str	r3, [r7, #32]
          break;
 8001b2e:	e028      	b.n	8001b82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	3304      	adds	r3, #4
 8001b36:	623b      	str	r3, [r7, #32]
          break;
 8001b38:	e023      	b.n	8001b82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	68db      	ldr	r3, [r3, #12]
 8001b3e:	3308      	adds	r3, #8
 8001b40:	623b      	str	r3, [r7, #32]
          break;
 8001b42:	e01e      	b.n	8001b82 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	330c      	adds	r3, #12
 8001b4a:	623b      	str	r3, [r7, #32]
          break;
 8001b4c:	e019      	b.n	8001b82 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d102      	bne.n	8001b5c <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001b56:	2304      	movs	r3, #4
 8001b58:	623b      	str	r3, [r7, #32]
          break;
 8001b5a:	e012      	b.n	8001b82 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d105      	bne.n	8001b70 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b64:	2308      	movs	r3, #8
 8001b66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	611a      	str	r2, [r3, #16]
          break;
 8001b6e:	e008      	b.n	8001b82 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001b70:	2308      	movs	r3, #8
 8001b72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	69fa      	ldr	r2, [r7, #28]
 8001b78:	615a      	str	r2, [r3, #20]
          break;
 8001b7a:	e002      	b.n	8001b82 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
          break;
 8001b80:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001b82:	69bb      	ldr	r3, [r7, #24]
 8001b84:	2bff      	cmp	r3, #255	; 0xff
 8001b86:	d801      	bhi.n	8001b8c <HAL_GPIO_Init+0xec>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	e001      	b.n	8001b90 <HAL_GPIO_Init+0xf0>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	3304      	adds	r3, #4
 8001b90:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	2bff      	cmp	r3, #255	; 0xff
 8001b96:	d802      	bhi.n	8001b9e <HAL_GPIO_Init+0xfe>
 8001b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	e002      	b.n	8001ba4 <HAL_GPIO_Init+0x104>
 8001b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba0:	3b08      	subs	r3, #8
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	210f      	movs	r1, #15
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43db      	mvns	r3, r3
 8001bb4:	401a      	ands	r2, r3
 8001bb6:	6a39      	ldr	r1, [r7, #32]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	f000 8096 	beq.w	8001cfe <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001bd2:	4b59      	ldr	r3, [pc, #356]	; (8001d38 <HAL_GPIO_Init+0x298>)
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	4a58      	ldr	r2, [pc, #352]	; (8001d38 <HAL_GPIO_Init+0x298>)
 8001bd8:	f043 0301 	orr.w	r3, r3, #1
 8001bdc:	6193      	str	r3, [r2, #24]
 8001bde:	4b56      	ldr	r3, [pc, #344]	; (8001d38 <HAL_GPIO_Init+0x298>)
 8001be0:	699b      	ldr	r3, [r3, #24]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	60bb      	str	r3, [r7, #8]
 8001be8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001bea:	4a54      	ldr	r2, [pc, #336]	; (8001d3c <HAL_GPIO_Init+0x29c>)
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	089b      	lsrs	r3, r3, #2
 8001bf0:	3302      	adds	r3, #2
 8001bf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bf6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	220f      	movs	r2, #15
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4b      	ldr	r2, [pc, #300]	; (8001d40 <HAL_GPIO_Init+0x2a0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d013      	beq.n	8001c3e <HAL_GPIO_Init+0x19e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4a      	ldr	r2, [pc, #296]	; (8001d44 <HAL_GPIO_Init+0x2a4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d00d      	beq.n	8001c3a <HAL_GPIO_Init+0x19a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a49      	ldr	r2, [pc, #292]	; (8001d48 <HAL_GPIO_Init+0x2a8>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d007      	beq.n	8001c36 <HAL_GPIO_Init+0x196>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	4a48      	ldr	r2, [pc, #288]	; (8001d4c <HAL_GPIO_Init+0x2ac>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d101      	bne.n	8001c32 <HAL_GPIO_Init+0x192>
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e006      	b.n	8001c40 <HAL_GPIO_Init+0x1a0>
 8001c32:	2304      	movs	r3, #4
 8001c34:	e004      	b.n	8001c40 <HAL_GPIO_Init+0x1a0>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e002      	b.n	8001c40 <HAL_GPIO_Init+0x1a0>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e000      	b.n	8001c40 <HAL_GPIO_Init+0x1a0>
 8001c3e:	2300      	movs	r3, #0
 8001c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c42:	f002 0203 	and.w	r2, r2, #3
 8001c46:	0092      	lsls	r2, r2, #2
 8001c48:	4093      	lsls	r3, r2
 8001c4a:	68fa      	ldr	r2, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001c50:	493a      	ldr	r1, [pc, #232]	; (8001d3c <HAL_GPIO_Init+0x29c>)
 8001c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c54:	089b      	lsrs	r3, r3, #2
 8001c56:	3302      	adds	r3, #2
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d006      	beq.n	8001c78 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001c6a:	4b39      	ldr	r3, [pc, #228]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	4938      	ldr	r1, [pc, #224]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	600b      	str	r3, [r1, #0]
 8001c76:	e006      	b.n	8001c86 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001c78:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	4933      	ldr	r1, [pc, #204]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001c82:	4013      	ands	r3, r2
 8001c84:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d006      	beq.n	8001ca0 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001c92:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001c94:	685a      	ldr	r2, [r3, #4]
 8001c96:	492e      	ldr	r1, [pc, #184]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	4313      	orrs	r3, r2
 8001c9c:	604b      	str	r3, [r1, #4]
 8001c9e:	e006      	b.n	8001cae <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ca0:	4b2b      	ldr	r3, [pc, #172]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001ca2:	685a      	ldr	r2, [r3, #4]
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	4929      	ldr	r1, [pc, #164]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001caa:	4013      	ands	r3, r2
 8001cac:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d006      	beq.n	8001cc8 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001cba:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	4924      	ldr	r1, [pc, #144]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	608b      	str	r3, [r1, #8]
 8001cc6:	e006      	b.n	8001cd6 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	43db      	mvns	r3, r3
 8001cd0:	491f      	ldr	r1, [pc, #124]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685b      	ldr	r3, [r3, #4]
 8001cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d006      	beq.n	8001cf0 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ce2:	4b1b      	ldr	r3, [pc, #108]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001ce4:	68da      	ldr	r2, [r3, #12]
 8001ce6:	491a      	ldr	r1, [pc, #104]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	60cb      	str	r3, [r1, #12]
 8001cee:	e006      	b.n	8001cfe <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001cf0:	4b17      	ldr	r3, [pc, #92]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	43db      	mvns	r3, r3
 8001cf8:	4915      	ldr	r1, [pc, #84]	; (8001d50 <HAL_GPIO_Init+0x2b0>)
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d00:	3301      	adds	r3, #1
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	f47f aed0 	bne.w	8001ab4 <HAL_GPIO_Init+0x14>
  }
}
 8001d14:	bf00      	nop
 8001d16:	372c      	adds	r7, #44	; 0x2c
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bc80      	pop	{r7}
 8001d1c:	4770      	bx	lr
 8001d1e:	bf00      	nop
 8001d20:	10210000 	.word	0x10210000
 8001d24:	10110000 	.word	0x10110000
 8001d28:	10120000 	.word	0x10120000
 8001d2c:	10310000 	.word	0x10310000
 8001d30:	10320000 	.word	0x10320000
 8001d34:	10220000 	.word	0x10220000
 8001d38:	40021000 	.word	0x40021000
 8001d3c:	40010000 	.word	0x40010000
 8001d40:	40010800 	.word	0x40010800
 8001d44:	40010c00 	.word	0x40010c00
 8001d48:	40011000 	.word	0x40011000
 8001d4c:	40011400 	.word	0x40011400
 8001d50:	40010400 	.word	0x40010400

08001d54 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b084      	sub	sp, #16
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e11f      	b.n	8001fa6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d106      	bne.n	8001d80 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7fe fdc6 	bl	800090c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2224      	movs	r2, #36	; 0x24
 8001d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f022 0201 	bic.w	r2, r2, #1
 8001d96:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001da6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001db6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001db8:	f000 ffe0 	bl	8002d7c <HAL_RCC_GetPCLK1Freq>
 8001dbc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	4a7b      	ldr	r2, [pc, #492]	; (8001fb0 <HAL_I2C_Init+0x25c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d807      	bhi.n	8001dd8 <HAL_I2C_Init+0x84>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	4a7a      	ldr	r2, [pc, #488]	; (8001fb4 <HAL_I2C_Init+0x260>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	bf94      	ite	ls
 8001dd0:	2301      	movls	r3, #1
 8001dd2:	2300      	movhi	r3, #0
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	e006      	b.n	8001de6 <HAL_I2C_Init+0x92>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4a77      	ldr	r2, [pc, #476]	; (8001fb8 <HAL_I2C_Init+0x264>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	bf94      	ite	ls
 8001de0:	2301      	movls	r3, #1
 8001de2:	2300      	movhi	r3, #0
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e0db      	b.n	8001fa6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	4a72      	ldr	r2, [pc, #456]	; (8001fbc <HAL_I2C_Init+0x268>)
 8001df2:	fba2 2303 	umull	r2, r3, r2, r3
 8001df6:	0c9b      	lsrs	r3, r3, #18
 8001df8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68ba      	ldr	r2, [r7, #8]
 8001e0a:	430a      	orrs	r2, r1
 8001e0c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	4a64      	ldr	r2, [pc, #400]	; (8001fb0 <HAL_I2C_Init+0x25c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d802      	bhi.n	8001e28 <HAL_I2C_Init+0xd4>
 8001e22:	68bb      	ldr	r3, [r7, #8]
 8001e24:	3301      	adds	r3, #1
 8001e26:	e009      	b.n	8001e3c <HAL_I2C_Init+0xe8>
 8001e28:	68bb      	ldr	r3, [r7, #8]
 8001e2a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e2e:	fb02 f303 	mul.w	r3, r2, r3
 8001e32:	4a63      	ldr	r2, [pc, #396]	; (8001fc0 <HAL_I2C_Init+0x26c>)
 8001e34:	fba2 2303 	umull	r2, r3, r2, r3
 8001e38:	099b      	lsrs	r3, r3, #6
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	6812      	ldr	r2, [r2, #0]
 8001e40:	430b      	orrs	r3, r1
 8001e42:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001e4e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	4956      	ldr	r1, [pc, #344]	; (8001fb0 <HAL_I2C_Init+0x25c>)
 8001e58:	428b      	cmp	r3, r1
 8001e5a:	d80d      	bhi.n	8001e78 <HAL_I2C_Init+0x124>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	1e59      	subs	r1, r3, #1
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	fbb1 f3f3 	udiv	r3, r1, r3
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e70:	2b04      	cmp	r3, #4
 8001e72:	bf38      	it	cc
 8001e74:	2304      	movcc	r3, #4
 8001e76:	e04f      	b.n	8001f18 <HAL_I2C_Init+0x1c4>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d111      	bne.n	8001ea4 <HAL_I2C_Init+0x150>
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	1e58      	subs	r0, r3, #1
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6859      	ldr	r1, [r3, #4]
 8001e88:	460b      	mov	r3, r1
 8001e8a:	005b      	lsls	r3, r3, #1
 8001e8c:	440b      	add	r3, r1
 8001e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	bf0c      	ite	eq
 8001e9c:	2301      	moveq	r3, #1
 8001e9e:	2300      	movne	r3, #0
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	e012      	b.n	8001eca <HAL_I2C_Init+0x176>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	1e58      	subs	r0, r3, #1
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6859      	ldr	r1, [r3, #4]
 8001eac:	460b      	mov	r3, r1
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	0099      	lsls	r1, r3, #2
 8001eb4:	440b      	add	r3, r1
 8001eb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eba:	3301      	adds	r3, #1
 8001ebc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	bf0c      	ite	eq
 8001ec4:	2301      	moveq	r3, #1
 8001ec6:	2300      	movne	r3, #0
 8001ec8:	b2db      	uxtb	r3, r3
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <HAL_I2C_Init+0x17e>
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e022      	b.n	8001f18 <HAL_I2C_Init+0x1c4>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_I2C_Init+0x1a4>
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	1e58      	subs	r0, r3, #1
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6859      	ldr	r1, [r3, #4]
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	440b      	add	r3, r1
 8001ee8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001eec:	3301      	adds	r3, #1
 8001eee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ef6:	e00f      	b.n	8001f18 <HAL_I2C_Init+0x1c4>
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	1e58      	subs	r0, r3, #1
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6859      	ldr	r1, [r3, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	0099      	lsls	r1, r3, #2
 8001f08:	440b      	add	r3, r1
 8001f0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f0e:	3301      	adds	r3, #1
 8001f10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f18:	6879      	ldr	r1, [r7, #4]
 8001f1a:	6809      	ldr	r1, [r1, #0]
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	69da      	ldr	r2, [r3, #28]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6a1b      	ldr	r3, [r3, #32]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001f46:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6911      	ldr	r1, [r2, #16]
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68d2      	ldr	r2, [r2, #12]
 8001f52:	4311      	orrs	r1, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6812      	ldr	r2, [r2, #0]
 8001f58:	430b      	orrs	r3, r1
 8001f5a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f042 0201 	orr.w	r2, r2, #1
 8001f86:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2220      	movs	r2, #32
 8001f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	000186a0 	.word	0x000186a0
 8001fb4:	001e847f 	.word	0x001e847f
 8001fb8:	003d08ff 	.word	0x003d08ff
 8001fbc:	431bde83 	.word	0x431bde83
 8001fc0:	10624dd3 	.word	0x10624dd3

08001fc4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af02      	add	r7, sp, #8
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	607a      	str	r2, [r7, #4]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	817b      	strh	r3, [r7, #10]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001fd8:	f7fe fdea 	bl	8000bb0 <HAL_GetTick>
 8001fdc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	f040 80e0 	bne.w	80021ac <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	2319      	movs	r3, #25
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	4970      	ldr	r1, [pc, #448]	; (80021b8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001ff6:	68f8      	ldr	r0, [r7, #12]
 8001ff8:	f000 f964 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d001      	beq.n	8002006 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002002:	2302      	movs	r3, #2
 8002004:	e0d3      	b.n	80021ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_I2C_Master_Transmit+0x50>
 8002010:	2302      	movs	r3, #2
 8002012:	e0cc      	b.n	80021ae <HAL_I2C_Master_Transmit+0x1ea>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b01      	cmp	r3, #1
 8002028:	d007      	beq.n	800203a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f042 0201 	orr.w	r2, r2, #1
 8002038:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002048:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2221      	movs	r2, #33	; 0x21
 800204e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2210      	movs	r2, #16
 8002056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2200      	movs	r2, #0
 800205e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	893a      	ldrh	r2, [r7, #8]
 800206a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002070:	b29a      	uxth	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	4a50      	ldr	r2, [pc, #320]	; (80021bc <HAL_I2C_Master_Transmit+0x1f8>)
 800207a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800207c:	8979      	ldrh	r1, [r7, #10]
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	6a3a      	ldr	r2, [r7, #32]
 8002082:	68f8      	ldr	r0, [r7, #12]
 8002084:	f000 f89c 	bl	80021c0 <I2C_MasterRequestWrite>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e08d      	b.n	80021ae <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	699b      	ldr	r3, [r3, #24]
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80020a8:	e066      	b.n	8002178 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	6a39      	ldr	r1, [r7, #32]
 80020ae:	68f8      	ldr	r0, [r7, #12]
 80020b0:	f000 f9de 	bl	8002470 <I2C_WaitOnTXEFlagUntilTimeout>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d00d      	beq.n	80020d6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d107      	bne.n	80020d2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e06b      	b.n	80021ae <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020da:	781a      	ldrb	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	1c5a      	adds	r2, r3, #1
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020f0:	b29b      	uxth	r3, r3
 80020f2:	3b01      	subs	r3, #1
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020fe:	3b01      	subs	r3, #1
 8002100:	b29a      	uxth	r2, r3
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b04      	cmp	r3, #4
 8002112:	d11b      	bne.n	800214c <HAL_I2C_Master_Transmit+0x188>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002118:	2b00      	cmp	r3, #0
 800211a:	d017      	beq.n	800214c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002136:	b29b      	uxth	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	6a39      	ldr	r1, [r7, #32]
 8002150:	68f8      	ldr	r0, [r7, #12]
 8002152:	f000 f9ce 	bl	80024f2 <I2C_WaitOnBTFFlagUntilTimeout>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00d      	beq.n	8002178 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	2b04      	cmp	r3, #4
 8002162:	d107      	bne.n	8002174 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002172:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e01a      	b.n	80021ae <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800217c:	2b00      	cmp	r3, #0
 800217e:	d194      	bne.n	80020aa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800218e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2220      	movs	r2, #32
 8002194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	2200      	movs	r2, #0
 800219c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80021a8:	2300      	movs	r3, #0
 80021aa:	e000      	b.n	80021ae <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80021ac:	2302      	movs	r3, #2
  }
}
 80021ae:	4618      	mov	r0, r3
 80021b0:	3718      	adds	r7, #24
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	00100002 	.word	0x00100002
 80021bc:	ffff0000 	.word	0xffff0000

080021c0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af02      	add	r7, sp, #8
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	607a      	str	r2, [r7, #4]
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	460b      	mov	r3, r1
 80021ce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	2b08      	cmp	r3, #8
 80021da:	d006      	beq.n	80021ea <I2C_MasterRequestWrite+0x2a>
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d003      	beq.n	80021ea <I2C_MasterRequestWrite+0x2a>
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80021e8:	d108      	bne.n	80021fc <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021f8:	601a      	str	r2, [r3, #0]
 80021fa:	e00b      	b.n	8002214 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002200:	2b12      	cmp	r3, #18
 8002202:	d107      	bne.n	8002214 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681a      	ldr	r2, [r3, #0]
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002212:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002220:	68f8      	ldr	r0, [r7, #12]
 8002222:	f000 f84f 	bl	80022c4 <I2C_WaitOnFlagUntilTimeout>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00d      	beq.n	8002248 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002236:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800223a:	d103      	bne.n	8002244 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002242:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e035      	b.n	80022b4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	691b      	ldr	r3, [r3, #16]
 800224c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002250:	d108      	bne.n	8002264 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002252:	897b      	ldrh	r3, [r7, #10]
 8002254:	b2db      	uxtb	r3, r3
 8002256:	461a      	mov	r2, r3
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002260:	611a      	str	r2, [r3, #16]
 8002262:	e01b      	b.n	800229c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002264:	897b      	ldrh	r3, [r7, #10]
 8002266:	11db      	asrs	r3, r3, #7
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f003 0306 	and.w	r3, r3, #6
 800226e:	b2db      	uxtb	r3, r3
 8002270:	f063 030f 	orn	r3, r3, #15
 8002274:	b2da      	uxtb	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	490e      	ldr	r1, [pc, #56]	; (80022bc <I2C_MasterRequestWrite+0xfc>)
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f875 	bl	8002372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e010      	b.n	80022b4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002292:	897b      	ldrh	r3, [r7, #10]
 8002294:	b2da      	uxtb	r2, r3
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	687a      	ldr	r2, [r7, #4]
 80022a0:	4907      	ldr	r1, [pc, #28]	; (80022c0 <I2C_MasterRequestWrite+0x100>)
 80022a2:	68f8      	ldr	r0, [r7, #12]
 80022a4:	f000 f865 	bl	8002372 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	00010008 	.word	0x00010008
 80022c0:	00010002 	.word	0x00010002

080022c4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b084      	sub	sp, #16
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	4613      	mov	r3, r2
 80022d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022d4:	e025      	b.n	8002322 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022dc:	d021      	beq.n	8002322 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022de:	f7fe fc67 	bl	8000bb0 <HAL_GetTick>
 80022e2:	4602      	mov	r2, r0
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	1ad3      	subs	r3, r2, r3
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d302      	bcc.n	80022f4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d116      	bne.n	8002322 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2220      	movs	r2, #32
 80022fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230e:	f043 0220 	orr.w	r2, r3, #32
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	2200      	movs	r2, #0
 800231a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e023      	b.n	800236a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002322:	68bb      	ldr	r3, [r7, #8]
 8002324:	0c1b      	lsrs	r3, r3, #16
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d10d      	bne.n	8002348 <I2C_WaitOnFlagUntilTimeout+0x84>
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	43da      	mvns	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	4013      	ands	r3, r2
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf0c      	ite	eq
 800233e:	2301      	moveq	r3, #1
 8002340:	2300      	movne	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	e00c      	b.n	8002362 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	699b      	ldr	r3, [r3, #24]
 800234e:	43da      	mvns	r2, r3
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	4013      	ands	r3, r2
 8002354:	b29b      	uxth	r3, r3
 8002356:	2b00      	cmp	r3, #0
 8002358:	bf0c      	ite	eq
 800235a:	2301      	moveq	r3, #1
 800235c:	2300      	movne	r3, #0
 800235e:	b2db      	uxtb	r3, r3
 8002360:	461a      	mov	r2, r3
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	429a      	cmp	r2, r3
 8002366:	d0b6      	beq.n	80022d6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3710      	adds	r7, #16
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b084      	sub	sp, #16
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	607a      	str	r2, [r7, #4]
 800237e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002380:	e051      	b.n	8002426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800238c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002390:	d123      	bne.n	80023da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80023a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80023aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2200      	movs	r2, #0
 80023b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2220      	movs	r2, #32
 80023b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2200      	movs	r2, #0
 80023be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c6:	f043 0204 	orr.w	r2, r3, #4
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	2200      	movs	r2, #0
 80023d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e046      	b.n	8002468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d021      	beq.n	8002426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e2:	f7fe fbe5 	bl	8000bb0 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	687a      	ldr	r2, [r7, #4]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d302      	bcc.n	80023f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d116      	bne.n	8002426 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f043 0220 	orr.w	r2, r3, #32
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e020      	b.n	8002468 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d10c      	bne.n	800244a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4013      	ands	r3, r2
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf14      	ite	ne
 8002442:	2301      	movne	r3, #1
 8002444:	2300      	moveq	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	e00b      	b.n	8002462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	699b      	ldr	r3, [r3, #24]
 8002450:	43da      	mvns	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	4013      	ands	r3, r2
 8002456:	b29b      	uxth	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	bf14      	ite	ne
 800245c:	2301      	movne	r3, #1
 800245e:	2300      	moveq	r3, #0
 8002460:	b2db      	uxtb	r3, r3
 8002462:	2b00      	cmp	r3, #0
 8002464:	d18d      	bne.n	8002382 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002466:	2300      	movs	r3, #0
}
 8002468:	4618      	mov	r0, r3
 800246a:	3710      	adds	r7, #16
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}

08002470 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b084      	sub	sp, #16
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800247c:	e02d      	b.n	80024da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f000 f878 	bl	8002574 <I2C_IsAcknowledgeFailed>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e02d      	b.n	80024ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002494:	d021      	beq.n	80024da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002496:	f7fe fb8b 	bl	8000bb0 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d302      	bcc.n	80024ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80024a6:	68bb      	ldr	r3, [r7, #8]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d116      	bne.n	80024da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2220      	movs	r2, #32
 80024b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c6:	f043 0220 	orr.w	r2, r3, #32
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	2200      	movs	r2, #0
 80024d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e007      	b.n	80024ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e4:	2b80      	cmp	r3, #128	; 0x80
 80024e6:	d1ca      	bne.n	800247e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024e8:	2300      	movs	r3, #0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024fe:	e02d      	b.n	800255c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 f837 	bl	8002574 <I2C_IsAcknowledgeFailed>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e02d      	b.n	800256c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d021      	beq.n	800255c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002518:	f7fe fb4a 	bl	8000bb0 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	429a      	cmp	r2, r3
 8002526:	d302      	bcc.n	800252e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d116      	bne.n	800255c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2200      	movs	r2, #0
 8002532:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2220      	movs	r2, #32
 8002538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f043 0220 	orr.w	r2, r3, #32
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2200      	movs	r2, #0
 8002554:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e007      	b.n	800256c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b04      	cmp	r3, #4
 8002568:	d1ca      	bne.n	8002500 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002586:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800258a:	d11b      	bne.n	80025c4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002594:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b0:	f043 0204 	orr.w	r2, r3, #4
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2200      	movs	r2, #0
 80025bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e000      	b.n	80025c6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bc80      	pop	{r7}
 80025ce:	4770      	bx	lr

080025d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d101      	bne.n	80025e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e26c      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 8087 	beq.w	80026fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025f0:	4b92      	ldr	r3, [pc, #584]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 030c 	and.w	r3, r3, #12
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d00c      	beq.n	8002616 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80025fc:	4b8f      	ldr	r3, [pc, #572]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	f003 030c 	and.w	r3, r3, #12
 8002604:	2b08      	cmp	r3, #8
 8002606:	d112      	bne.n	800262e <HAL_RCC_OscConfig+0x5e>
 8002608:	4b8c      	ldr	r3, [pc, #560]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002614:	d10b      	bne.n	800262e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002616:	4b89      	ldr	r3, [pc, #548]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d06c      	beq.n	80026fc <HAL_RCC_OscConfig+0x12c>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d168      	bne.n	80026fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e246      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002636:	d106      	bne.n	8002646 <HAL_RCC_OscConfig+0x76>
 8002638:	4b80      	ldr	r3, [pc, #512]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a7f      	ldr	r2, [pc, #508]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800263e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002642:	6013      	str	r3, [r2, #0]
 8002644:	e02e      	b.n	80026a4 <HAL_RCC_OscConfig+0xd4>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d10c      	bne.n	8002668 <HAL_RCC_OscConfig+0x98>
 800264e:	4b7b      	ldr	r3, [pc, #492]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a7a      	ldr	r2, [pc, #488]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002658:	6013      	str	r3, [r2, #0]
 800265a:	4b78      	ldr	r3, [pc, #480]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a77      	ldr	r2, [pc, #476]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002660:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002664:	6013      	str	r3, [r2, #0]
 8002666:	e01d      	b.n	80026a4 <HAL_RCC_OscConfig+0xd4>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002670:	d10c      	bne.n	800268c <HAL_RCC_OscConfig+0xbc>
 8002672:	4b72      	ldr	r3, [pc, #456]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a71      	ldr	r2, [pc, #452]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002678:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800267c:	6013      	str	r3, [r2, #0]
 800267e:	4b6f      	ldr	r3, [pc, #444]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a6e      	ldr	r2, [pc, #440]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002684:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002688:	6013      	str	r3, [r2, #0]
 800268a:	e00b      	b.n	80026a4 <HAL_RCC_OscConfig+0xd4>
 800268c:	4b6b      	ldr	r3, [pc, #428]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a6a      	ldr	r2, [pc, #424]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002692:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	4b68      	ldr	r3, [pc, #416]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a67      	ldr	r2, [pc, #412]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800269e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d013      	beq.n	80026d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026ac:	f7fe fa80 	bl	8000bb0 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b4:	f7fe fa7c 	bl	8000bb0 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b64      	cmp	r3, #100	; 0x64
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e1fa      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026c6:	4b5d      	ldr	r3, [pc, #372]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0xe4>
 80026d2:	e014      	b.n	80026fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d4:	f7fe fa6c 	bl	8000bb0 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026da:	e008      	b.n	80026ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026dc:	f7fe fa68 	bl	8000bb0 <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	2b64      	cmp	r3, #100	; 0x64
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e1e6      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026ee:	4b53      	ldr	r3, [pc, #332]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d1f0      	bne.n	80026dc <HAL_RCC_OscConfig+0x10c>
 80026fa:	e000      	b.n	80026fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d063      	beq.n	80027d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800270a:	4b4c      	ldr	r3, [pc, #304]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 030c 	and.w	r3, r3, #12
 8002712:	2b00      	cmp	r3, #0
 8002714:	d00b      	beq.n	800272e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002716:	4b49      	ldr	r3, [pc, #292]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f003 030c 	and.w	r3, r3, #12
 800271e:	2b08      	cmp	r3, #8
 8002720:	d11c      	bne.n	800275c <HAL_RCC_OscConfig+0x18c>
 8002722:	4b46      	ldr	r3, [pc, #280]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d116      	bne.n	800275c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800272e:	4b43      	ldr	r3, [pc, #268]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b00      	cmp	r3, #0
 8002738:	d005      	beq.n	8002746 <HAL_RCC_OscConfig+0x176>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	2b01      	cmp	r3, #1
 8002740:	d001      	beq.n	8002746 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	e1ba      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002746:	4b3d      	ldr	r3, [pc, #244]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	695b      	ldr	r3, [r3, #20]
 8002752:	00db      	lsls	r3, r3, #3
 8002754:	4939      	ldr	r1, [pc, #228]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002756:	4313      	orrs	r3, r2
 8002758:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275a:	e03a      	b.n	80027d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	691b      	ldr	r3, [r3, #16]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d020      	beq.n	80027a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002764:	4b36      	ldr	r3, [pc, #216]	; (8002840 <HAL_RCC_OscConfig+0x270>)
 8002766:	2201      	movs	r2, #1
 8002768:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276a:	f7fe fa21 	bl	8000bb0 <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002770:	e008      	b.n	8002784 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002772:	f7fe fa1d 	bl	8000bb0 <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d901      	bls.n	8002784 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e19b      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002784:	4b2d      	ldr	r3, [pc, #180]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f003 0302 	and.w	r3, r3, #2
 800278c:	2b00      	cmp	r3, #0
 800278e:	d0f0      	beq.n	8002772 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	4b2a      	ldr	r3, [pc, #168]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	695b      	ldr	r3, [r3, #20]
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4927      	ldr	r1, [pc, #156]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	600b      	str	r3, [r1, #0]
 80027a4:	e015      	b.n	80027d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a6:	4b26      	ldr	r3, [pc, #152]	; (8002840 <HAL_RCC_OscConfig+0x270>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ac:	f7fe fa00 	bl	8000bb0 <HAL_GetTick>
 80027b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027b2:	e008      	b.n	80027c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b4:	f7fe f9fc 	bl	8000bb0 <HAL_GetTick>
 80027b8:	4602      	mov	r2, r0
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d901      	bls.n	80027c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e17a      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c6:	4b1d      	ldr	r3, [pc, #116]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d1f0      	bne.n	80027b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d03a      	beq.n	8002854 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d019      	beq.n	800281a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e6:	4b17      	ldr	r3, [pc, #92]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027ec:	f7fe f9e0 	bl	8000bb0 <HAL_GetTick>
 80027f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027f4:	f7fe f9dc 	bl	8000bb0 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e15a      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002806:	4b0d      	ldr	r3, [pc, #52]	; (800283c <HAL_RCC_OscConfig+0x26c>)
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d0f0      	beq.n	80027f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002812:	2001      	movs	r0, #1
 8002814:	f000 fac6 	bl	8002da4 <RCC_Delay>
 8002818:	e01c      	b.n	8002854 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800281a:	4b0a      	ldr	r3, [pc, #40]	; (8002844 <HAL_RCC_OscConfig+0x274>)
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002820:	f7fe f9c6 	bl	8000bb0 <HAL_GetTick>
 8002824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002826:	e00f      	b.n	8002848 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002828:	f7fe f9c2 	bl	8000bb0 <HAL_GetTick>
 800282c:	4602      	mov	r2, r0
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	1ad3      	subs	r3, r2, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d908      	bls.n	8002848 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002836:	2303      	movs	r3, #3
 8002838:	e140      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
 800283a:	bf00      	nop
 800283c:	40021000 	.word	0x40021000
 8002840:	42420000 	.word	0x42420000
 8002844:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002848:	4b9e      	ldr	r3, [pc, #632]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 800284a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d1e9      	bne.n	8002828 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f003 0304 	and.w	r3, r3, #4
 800285c:	2b00      	cmp	r3, #0
 800285e:	f000 80a6 	beq.w	80029ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002862:	2300      	movs	r3, #0
 8002864:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002866:	4b97      	ldr	r3, [pc, #604]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10d      	bne.n	800288e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002872:	4b94      	ldr	r3, [pc, #592]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	4a93      	ldr	r2, [pc, #588]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002878:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800287c:	61d3      	str	r3, [r2, #28]
 800287e:	4b91      	ldr	r3, [pc, #580]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002880:	69db      	ldr	r3, [r3, #28]
 8002882:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002886:	60bb      	str	r3, [r7, #8]
 8002888:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800288a:	2301      	movs	r3, #1
 800288c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800288e:	4b8e      	ldr	r3, [pc, #568]	; (8002ac8 <HAL_RCC_OscConfig+0x4f8>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002896:	2b00      	cmp	r3, #0
 8002898:	d118      	bne.n	80028cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800289a:	4b8b      	ldr	r3, [pc, #556]	; (8002ac8 <HAL_RCC_OscConfig+0x4f8>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a8a      	ldr	r2, [pc, #552]	; (8002ac8 <HAL_RCC_OscConfig+0x4f8>)
 80028a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028a6:	f7fe f983 	bl	8000bb0 <HAL_GetTick>
 80028aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ac:	e008      	b.n	80028c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028ae:	f7fe f97f 	bl	8000bb0 <HAL_GetTick>
 80028b2:	4602      	mov	r2, r0
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	2b64      	cmp	r3, #100	; 0x64
 80028ba:	d901      	bls.n	80028c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80028bc:	2303      	movs	r3, #3
 80028be:	e0fd      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028c0:	4b81      	ldr	r3, [pc, #516]	; (8002ac8 <HAL_RCC_OscConfig+0x4f8>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d0f0      	beq.n	80028ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68db      	ldr	r3, [r3, #12]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d106      	bne.n	80028e2 <HAL_RCC_OscConfig+0x312>
 80028d4:	4b7b      	ldr	r3, [pc, #492]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80028d6:	6a1b      	ldr	r3, [r3, #32]
 80028d8:	4a7a      	ldr	r2, [pc, #488]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	6213      	str	r3, [r2, #32]
 80028e0:	e02d      	b.n	800293e <HAL_RCC_OscConfig+0x36e>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	68db      	ldr	r3, [r3, #12]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d10c      	bne.n	8002904 <HAL_RCC_OscConfig+0x334>
 80028ea:	4b76      	ldr	r3, [pc, #472]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80028ec:	6a1b      	ldr	r3, [r3, #32]
 80028ee:	4a75      	ldr	r2, [pc, #468]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80028f0:	f023 0301 	bic.w	r3, r3, #1
 80028f4:	6213      	str	r3, [r2, #32]
 80028f6:	4b73      	ldr	r3, [pc, #460]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80028f8:	6a1b      	ldr	r3, [r3, #32]
 80028fa:	4a72      	ldr	r2, [pc, #456]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80028fc:	f023 0304 	bic.w	r3, r3, #4
 8002900:	6213      	str	r3, [r2, #32]
 8002902:	e01c      	b.n	800293e <HAL_RCC_OscConfig+0x36e>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	2b05      	cmp	r3, #5
 800290a:	d10c      	bne.n	8002926 <HAL_RCC_OscConfig+0x356>
 800290c:	4b6d      	ldr	r3, [pc, #436]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4a6c      	ldr	r2, [pc, #432]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002912:	f043 0304 	orr.w	r3, r3, #4
 8002916:	6213      	str	r3, [r2, #32]
 8002918:	4b6a      	ldr	r3, [pc, #424]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 800291a:	6a1b      	ldr	r3, [r3, #32]
 800291c:	4a69      	ldr	r2, [pc, #420]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 800291e:	f043 0301 	orr.w	r3, r3, #1
 8002922:	6213      	str	r3, [r2, #32]
 8002924:	e00b      	b.n	800293e <HAL_RCC_OscConfig+0x36e>
 8002926:	4b67      	ldr	r3, [pc, #412]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4a66      	ldr	r2, [pc, #408]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	6213      	str	r3, [r2, #32]
 8002932:	4b64      	ldr	r3, [pc, #400]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002934:	6a1b      	ldr	r3, [r3, #32]
 8002936:	4a63      	ldr	r2, [pc, #396]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002938:	f023 0304 	bic.w	r3, r3, #4
 800293c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d015      	beq.n	8002972 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002946:	f7fe f933 	bl	8000bb0 <HAL_GetTick>
 800294a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800294c:	e00a      	b.n	8002964 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7fe f92f 	bl	8000bb0 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	f241 3288 	movw	r2, #5000	; 0x1388
 800295c:	4293      	cmp	r3, r2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0ab      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002964:	4b57      	ldr	r3, [pc, #348]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	f003 0302 	and.w	r3, r3, #2
 800296c:	2b00      	cmp	r3, #0
 800296e:	d0ee      	beq.n	800294e <HAL_RCC_OscConfig+0x37e>
 8002970:	e014      	b.n	800299c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002972:	f7fe f91d 	bl	8000bb0 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002978:	e00a      	b.n	8002990 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297a:	f7fe f919 	bl	8000bb0 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	f241 3288 	movw	r2, #5000	; 0x1388
 8002988:	4293      	cmp	r3, r2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e095      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002990:	4b4c      	ldr	r3, [pc, #304]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d1ee      	bne.n	800297a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800299c:	7dfb      	ldrb	r3, [r7, #23]
 800299e:	2b01      	cmp	r3, #1
 80029a0:	d105      	bne.n	80029ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a2:	4b48      	ldr	r3, [pc, #288]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80029a4:	69db      	ldr	r3, [r3, #28]
 80029a6:	4a47      	ldr	r2, [pc, #284]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80029a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	69db      	ldr	r3, [r3, #28]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	f000 8081 	beq.w	8002aba <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029b8:	4b42      	ldr	r3, [pc, #264]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f003 030c 	and.w	r3, r3, #12
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d061      	beq.n	8002a88 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	69db      	ldr	r3, [r3, #28]
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d146      	bne.n	8002a5a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029cc:	4b3f      	ldr	r3, [pc, #252]	; (8002acc <HAL_RCC_OscConfig+0x4fc>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d2:	f7fe f8ed 	bl	8000bb0 <HAL_GetTick>
 80029d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d8:	e008      	b.n	80029ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029da:	f7fe f8e9 	bl	8000bb0 <HAL_GetTick>
 80029de:	4602      	mov	r2, r0
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	1ad3      	subs	r3, r2, r3
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d901      	bls.n	80029ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80029e8:	2303      	movs	r3, #3
 80029ea:	e067      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029ec:	4b35      	ldr	r3, [pc, #212]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1f0      	bne.n	80029da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a1b      	ldr	r3, [r3, #32]
 80029fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a00:	d108      	bne.n	8002a14 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002a02:	4b30      	ldr	r3, [pc, #192]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	492d      	ldr	r1, [pc, #180]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a14:	4b2b      	ldr	r3, [pc, #172]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6a19      	ldr	r1, [r3, #32]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	430b      	orrs	r3, r1
 8002a26:	4927      	ldr	r1, [pc, #156]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a2c:	4b27      	ldr	r3, [pc, #156]	; (8002acc <HAL_RCC_OscConfig+0x4fc>)
 8002a2e:	2201      	movs	r2, #1
 8002a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a32:	f7fe f8bd 	bl	8000bb0 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a3a:	f7fe f8b9 	bl	8000bb0 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e037      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a4c:	4b1d      	ldr	r3, [pc, #116]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x46a>
 8002a58:	e02f      	b.n	8002aba <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a5a:	4b1c      	ldr	r3, [pc, #112]	; (8002acc <HAL_RCC_OscConfig+0x4fc>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a60:	f7fe f8a6 	bl	8000bb0 <HAL_GetTick>
 8002a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a68:	f7fe f8a2 	bl	8000bb0 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	693b      	ldr	r3, [r7, #16]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d901      	bls.n	8002a7a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e020      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d1f0      	bne.n	8002a68 <HAL_RCC_OscConfig+0x498>
 8002a86:	e018      	b.n	8002aba <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e013      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002a94:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <HAL_RCC_OscConfig+0x4f4>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6a1b      	ldr	r3, [r3, #32]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d106      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3718      	adds	r7, #24
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40007000 	.word	0x40007000
 8002acc:	42420060 	.word	0x42420060

08002ad0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b084      	sub	sp, #16
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e0d0      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b6a      	ldr	r3, [pc, #424]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0307 	and.w	r3, r3, #7
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d910      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b67      	ldr	r3, [pc, #412]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 0207 	bic.w	r2, r3, #7
 8002afa:	4965      	ldr	r1, [pc, #404]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b63      	ldr	r3, [pc, #396]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0307 	and.w	r3, r3, #7
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e0b8      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0302 	and.w	r3, r3, #2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d020      	beq.n	8002b62 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d005      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b2c:	4b59      	ldr	r3, [pc, #356]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	4a58      	ldr	r2, [pc, #352]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002b36:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 0308 	and.w	r3, r3, #8
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d005      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002b44:	4b53      	ldr	r3, [pc, #332]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	4a52      	ldr	r2, [pc, #328]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b4a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002b4e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b50:	4b50      	ldr	r3, [pc, #320]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	494d      	ldr	r1, [pc, #308]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 0301 	and.w	r3, r3, #1
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d040      	beq.n	8002bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d107      	bne.n	8002b86 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b76:	4b47      	ldr	r3, [pc, #284]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d115      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e07f      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d107      	bne.n	8002b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8e:	4b41      	ldr	r3, [pc, #260]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d109      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e073      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9e:	4b3d      	ldr	r3, [pc, #244]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d101      	bne.n	8002bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002baa:	2301      	movs	r3, #1
 8002bac:	e06b      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002bae:	4b39      	ldr	r3, [pc, #228]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	f023 0203 	bic.w	r2, r3, #3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	4936      	ldr	r1, [pc, #216]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bc0:	f7fd fff6 	bl	8000bb0 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc6:	e00a      	b.n	8002bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc8:	f7fd fff2 	bl	8000bb0 <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e053      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bde:	4b2d      	ldr	r3, [pc, #180]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 020c 	and.w	r2, r3, #12
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d1eb      	bne.n	8002bc8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002bf0:	4b27      	ldr	r3, [pc, #156]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f003 0307 	and.w	r3, r3, #7
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d210      	bcs.n	8002c20 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfe:	4b24      	ldr	r3, [pc, #144]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f023 0207 	bic.w	r2, r3, #7
 8002c06:	4922      	ldr	r1, [pc, #136]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0e:	4b20      	ldr	r3, [pc, #128]	; (8002c90 <HAL_RCC_ClockConfig+0x1c0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d001      	beq.n	8002c20 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e032      	b.n	8002c86 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c2c:	4b19      	ldr	r3, [pc, #100]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	68db      	ldr	r3, [r3, #12]
 8002c38:	4916      	ldr	r1, [pc, #88]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0308 	and.w	r3, r3, #8
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d009      	beq.n	8002c5e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002c4a:	4b12      	ldr	r3, [pc, #72]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	00db      	lsls	r3, r3, #3
 8002c58:	490e      	ldr	r1, [pc, #56]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002c5e:	f000 f821 	bl	8002ca4 <HAL_RCC_GetSysClockFreq>
 8002c62:	4601      	mov	r1, r0
 8002c64:	4b0b      	ldr	r3, [pc, #44]	; (8002c94 <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	091b      	lsrs	r3, r3, #4
 8002c6a:	f003 030f 	and.w	r3, r3, #15
 8002c6e:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_RCC_ClockConfig+0x1c8>)
 8002c70:	5cd3      	ldrb	r3, [r2, r3]
 8002c72:	fa21 f303 	lsr.w	r3, r1, r3
 8002c76:	4a09      	ldr	r2, [pc, #36]	; (8002c9c <HAL_RCC_ClockConfig+0x1cc>)
 8002c78:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002c7a:	4b09      	ldr	r3, [pc, #36]	; (8002ca0 <HAL_RCC_ClockConfig+0x1d0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f7fd ff54 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 8002c84:	2300      	movs	r3, #0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	40022000 	.word	0x40022000
 8002c94:	40021000 	.word	0x40021000
 8002c98:	08003754 	.word	0x08003754
 8002c9c:	20000004 	.word	0x20000004
 8002ca0:	20000008 	.word	0x20000008

08002ca4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ca4:	b490      	push	{r4, r7}
 8002ca6:	b08a      	sub	sp, #40	; 0x28
 8002ca8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002caa:	4b2a      	ldr	r3, [pc, #168]	; (8002d54 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002cac:	1d3c      	adds	r4, r7, #4
 8002cae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002cb0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002cb4:	4b28      	ldr	r3, [pc, #160]	; (8002d58 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002cb6:	881b      	ldrh	r3, [r3, #0]
 8002cb8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	61bb      	str	r3, [r7, #24]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002cce:	4b23      	ldr	r3, [pc, #140]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f003 030c 	and.w	r3, r3, #12
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d002      	beq.n	8002ce4 <HAL_RCC_GetSysClockFreq+0x40>
 8002cde:	2b08      	cmp	r3, #8
 8002ce0:	d003      	beq.n	8002cea <HAL_RCC_GetSysClockFreq+0x46>
 8002ce2:	e02d      	b.n	8002d40 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002ce4:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ce6:	623b      	str	r3, [r7, #32]
      break;
 8002ce8:	e02d      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	0c9b      	lsrs	r3, r3, #18
 8002cee:	f003 030f 	and.w	r3, r3, #15
 8002cf2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002cfc:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d013      	beq.n	8002d30 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002d08:	4b14      	ldr	r3, [pc, #80]	; (8002d5c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	0c5b      	lsrs	r3, r3, #17
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002d16:	4413      	add	r3, r2
 8002d18:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002d1c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	4a0f      	ldr	r2, [pc, #60]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d22:	fb02 f203 	mul.w	r2, r2, r3
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d2e:	e004      	b.n	8002d3a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	4a0c      	ldr	r2, [pc, #48]	; (8002d64 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d34:	fb02 f303 	mul.w	r3, r2, r3
 8002d38:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3c:	623b      	str	r3, [r7, #32]
      break;
 8002d3e:	e002      	b.n	8002d46 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d40:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d42:	623b      	str	r3, [r7, #32]
      break;
 8002d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d46:	6a3b      	ldr	r3, [r7, #32]
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3728      	adds	r7, #40	; 0x28
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bc90      	pop	{r4, r7}
 8002d50:	4770      	bx	lr
 8002d52:	bf00      	nop
 8002d54:	08003740 	.word	0x08003740
 8002d58:	08003750 	.word	0x08003750
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	007a1200 	.word	0x007a1200
 8002d64:	003d0900 	.word	0x003d0900

08002d68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d6c:	4b02      	ldr	r3, [pc, #8]	; (8002d78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
 8002d78:	20000004 	.word	0x20000004

08002d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d80:	f7ff fff2 	bl	8002d68 <HAL_RCC_GetHCLKFreq>
 8002d84:	4601      	mov	r1, r0
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	0a1b      	lsrs	r3, r3, #8
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4a03      	ldr	r2, [pc, #12]	; (8002da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d92:	5cd3      	ldrb	r3, [r2, r3]
 8002d94:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	08003764 	.word	0x08003764

08002da4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002dac:	4b0a      	ldr	r3, [pc, #40]	; (8002dd8 <RCC_Delay+0x34>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a0a      	ldr	r2, [pc, #40]	; (8002ddc <RCC_Delay+0x38>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0a5b      	lsrs	r3, r3, #9
 8002db8:	687a      	ldr	r2, [r7, #4]
 8002dba:	fb02 f303 	mul.w	r3, r2, r3
 8002dbe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002dc0:	bf00      	nop
  }
  while (Delay --);
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1e5a      	subs	r2, r3, #1
 8002dc6:	60fa      	str	r2, [r7, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f9      	bne.n	8002dc0 <RCC_Delay+0x1c>
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	20000004 	.word	0x20000004
 8002ddc:	10624dd3 	.word	0x10624dd3

08002de0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b082      	sub	sp, #8
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d101      	bne.n	8002df2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e041      	b.n	8002e76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d106      	bne.n	8002e0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fd fdbe 	bl	8000988 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2202      	movs	r2, #2
 8002e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	3304      	adds	r3, #4
 8002e1c:	4619      	mov	r1, r3
 8002e1e:	4610      	mov	r0, r2
 8002e20:	f000 f98e 	bl	8003140 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2201      	movs	r2, #1
 8002e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2201      	movs	r2, #1
 8002e58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2201      	movs	r2, #1
 8002e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2201      	movs	r2, #1
 8002e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d109      	bne.n	8002ea4 <HAL_TIM_PWM_Start+0x24>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	bf14      	ite	ne
 8002e9c:	2301      	movne	r3, #1
 8002e9e:	2300      	moveq	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	e022      	b.n	8002eea <HAL_TIM_PWM_Start+0x6a>
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	2b04      	cmp	r3, #4
 8002ea8:	d109      	bne.n	8002ebe <HAL_TIM_PWM_Start+0x3e>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	2b01      	cmp	r3, #1
 8002eb4:	bf14      	ite	ne
 8002eb6:	2301      	movne	r3, #1
 8002eb8:	2300      	moveq	r3, #0
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	e015      	b.n	8002eea <HAL_TIM_PWM_Start+0x6a>
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	2b08      	cmp	r3, #8
 8002ec2:	d109      	bne.n	8002ed8 <HAL_TIM_PWM_Start+0x58>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002eca:	b2db      	uxtb	r3, r3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	bf14      	ite	ne
 8002ed0:	2301      	movne	r3, #1
 8002ed2:	2300      	moveq	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e008      	b.n	8002eea <HAL_TIM_PWM_Start+0x6a>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	bf14      	ite	ne
 8002ee4:	2301      	movne	r3, #1
 8002ee6:	2300      	moveq	r3, #0
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d001      	beq.n	8002ef2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e05e      	b.n	8002fb0 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d104      	bne.n	8002f02 <HAL_TIM_PWM_Start+0x82>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2202      	movs	r2, #2
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f00:	e013      	b.n	8002f2a <HAL_TIM_PWM_Start+0xaa>
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d104      	bne.n	8002f12 <HAL_TIM_PWM_Start+0x92>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f10:	e00b      	b.n	8002f2a <HAL_TIM_PWM_Start+0xaa>
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d104      	bne.n	8002f22 <HAL_TIM_PWM_Start+0xa2>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2202      	movs	r2, #2
 8002f1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f20:	e003      	b.n	8002f2a <HAL_TIM_PWM_Start+0xaa>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2202      	movs	r2, #2
 8002f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	6839      	ldr	r1, [r7, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 faee 	bl	8003514 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a1e      	ldr	r2, [pc, #120]	; (8002fb8 <HAL_TIM_PWM_Start+0x138>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d107      	bne.n	8002f52 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a18      	ldr	r2, [pc, #96]	; (8002fb8 <HAL_TIM_PWM_Start+0x138>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d00e      	beq.n	8002f7a <HAL_TIM_PWM_Start+0xfa>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f64:	d009      	beq.n	8002f7a <HAL_TIM_PWM_Start+0xfa>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	4a14      	ldr	r2, [pc, #80]	; (8002fbc <HAL_TIM_PWM_Start+0x13c>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d004      	beq.n	8002f7a <HAL_TIM_PWM_Start+0xfa>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a12      	ldr	r2, [pc, #72]	; (8002fc0 <HAL_TIM_PWM_Start+0x140>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d111      	bne.n	8002f9e <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2b06      	cmp	r3, #6
 8002f8a:	d010      	beq.n	8002fae <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0201 	orr.w	r2, r2, #1
 8002f9a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f9c:	e007      	b.n	8002fae <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0201 	orr.w	r2, r2, #1
 8002fac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3710      	adds	r7, #16
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40012c00 	.word	0x40012c00
 8002fbc:	40000400 	.word	0x40000400
 8002fc0:	40000800 	.word	0x40000800

08002fc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	60f8      	str	r0, [r7, #12]
 8002fcc:	60b9      	str	r1, [r7, #8]
 8002fce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_TIM_PWM_ConfigChannel+0x1a>
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e0ac      	b.n	8003138 <HAL_TIM_PWM_ConfigChannel+0x174>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b0c      	cmp	r3, #12
 8002fea:	f200 809f 	bhi.w	800312c <HAL_TIM_PWM_ConfigChannel+0x168>
 8002fee:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff4:	08003029 	.word	0x08003029
 8002ff8:	0800312d 	.word	0x0800312d
 8002ffc:	0800312d 	.word	0x0800312d
 8003000:	0800312d 	.word	0x0800312d
 8003004:	08003069 	.word	0x08003069
 8003008:	0800312d 	.word	0x0800312d
 800300c:	0800312d 	.word	0x0800312d
 8003010:	0800312d 	.word	0x0800312d
 8003014:	080030ab 	.word	0x080030ab
 8003018:	0800312d 	.word	0x0800312d
 800301c:	0800312d 	.word	0x0800312d
 8003020:	0800312d 	.word	0x0800312d
 8003024:	080030eb 	.word	0x080030eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68b9      	ldr	r1, [r7, #8]
 800302e:	4618      	mov	r0, r3
 8003030:	f000 f8e8 	bl	8003204 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	699a      	ldr	r2, [r3, #24]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f042 0208 	orr.w	r2, r2, #8
 8003042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	699a      	ldr	r2, [r3, #24]
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0204 	bic.w	r2, r2, #4
 8003052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6999      	ldr	r1, [r3, #24]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	691a      	ldr	r2, [r3, #16]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	430a      	orrs	r2, r1
 8003064:	619a      	str	r2, [r3, #24]
      break;
 8003066:	e062      	b.n	800312e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	68b9      	ldr	r1, [r7, #8]
 800306e:	4618      	mov	r0, r3
 8003070:	f000 f92e 	bl	80032d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	699a      	ldr	r2, [r3, #24]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003082:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003092:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6999      	ldr	r1, [r3, #24]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	021a      	lsls	r2, r3, #8
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	619a      	str	r2, [r3, #24]
      break;
 80030a8:	e041      	b.n	800312e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f000 f977 	bl	80033a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69da      	ldr	r2, [r3, #28]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0208 	orr.w	r2, r2, #8
 80030c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	69da      	ldr	r2, [r3, #28]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f022 0204 	bic.w	r2, r2, #4
 80030d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	69d9      	ldr	r1, [r3, #28]
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	691a      	ldr	r2, [r3, #16]
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	61da      	str	r2, [r3, #28]
      break;
 80030e8:	e021      	b.n	800312e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68b9      	ldr	r1, [r7, #8]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 f9c1 	bl	8003478 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	69da      	ldr	r2, [r3, #28]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003104:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	69da      	ldr	r2, [r3, #28]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003114:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	69d9      	ldr	r1, [r3, #28]
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	021a      	lsls	r2, r3, #8
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	61da      	str	r2, [r3, #28]
      break;
 800312a:	e000      	b.n	800312e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 800312c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003136:	2300      	movs	r3, #0
}
 8003138:	4618      	mov	r0, r3
 800313a:	3710      	adds	r7, #16
 800313c:	46bd      	mov	sp, r7
 800313e:	bd80      	pop	{r7, pc}

08003140 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
 8003148:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a29      	ldr	r2, [pc, #164]	; (80031f8 <TIM_Base_SetConfig+0xb8>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00b      	beq.n	8003170 <TIM_Base_SetConfig+0x30>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800315e:	d007      	beq.n	8003170 <TIM_Base_SetConfig+0x30>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a26      	ldr	r2, [pc, #152]	; (80031fc <TIM_Base_SetConfig+0xbc>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d003      	beq.n	8003170 <TIM_Base_SetConfig+0x30>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	4a25      	ldr	r2, [pc, #148]	; (8003200 <TIM_Base_SetConfig+0xc0>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d108      	bne.n	8003182 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003176:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	68fa      	ldr	r2, [r7, #12]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <TIM_Base_SetConfig+0xb8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d00b      	beq.n	80031a2 <TIM_Base_SetConfig+0x62>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003190:	d007      	beq.n	80031a2 <TIM_Base_SetConfig+0x62>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a19      	ldr	r2, [pc, #100]	; (80031fc <TIM_Base_SetConfig+0xbc>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d003      	beq.n	80031a2 <TIM_Base_SetConfig+0x62>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a18      	ldr	r2, [pc, #96]	; (8003200 <TIM_Base_SetConfig+0xc0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d108      	bne.n	80031b4 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	68fa      	ldr	r2, [r7, #12]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031ba:	683b      	ldr	r3, [r7, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	4313      	orrs	r3, r2
 80031c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	68fa      	ldr	r2, [r7, #12]
 80031c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	4a07      	ldr	r2, [pc, #28]	; (80031f8 <TIM_Base_SetConfig+0xb8>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d103      	bne.n	80031e8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	691a      	ldr	r2, [r3, #16]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	615a      	str	r2, [r3, #20]
}
 80031ee:	bf00      	nop
 80031f0:	3714      	adds	r7, #20
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bc80      	pop	{r7}
 80031f6:	4770      	bx	lr
 80031f8:	40012c00 	.word	0x40012c00
 80031fc:	40000400 	.word	0x40000400
 8003200:	40000800 	.word	0x40000800

08003204 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a1b      	ldr	r3, [r3, #32]
 8003212:	f023 0201 	bic.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a1b      	ldr	r3, [r3, #32]
 800321e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	685b      	ldr	r3, [r3, #4]
 8003224:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003232:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	f023 0303 	bic.w	r3, r3, #3
 800323a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	68fa      	ldr	r2, [r7, #12]
 8003242:	4313      	orrs	r3, r2
 8003244:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	f023 0302 	bic.w	r3, r3, #2
 800324c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	697a      	ldr	r2, [r7, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a1c      	ldr	r2, [pc, #112]	; (80032cc <TIM_OC1_SetConfig+0xc8>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d10c      	bne.n	800327a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f023 0308 	bic.w	r3, r3, #8
 8003266:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f023 0304 	bic.w	r3, r3, #4
 8003278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a13      	ldr	r2, [pc, #76]	; (80032cc <TIM_OC1_SetConfig+0xc8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d111      	bne.n	80032a6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	4313      	orrs	r3, r2
 800329a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	699b      	ldr	r3, [r3, #24]
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685a      	ldr	r2, [r3, #4]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	697a      	ldr	r2, [r7, #20]
 80032be:	621a      	str	r2, [r3, #32]
}
 80032c0:	bf00      	nop
 80032c2:	371c      	adds	r7, #28
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr
 80032ca:	bf00      	nop
 80032cc:	40012c00 	.word	0x40012c00

080032d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b087      	sub	sp, #28
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	f023 0210 	bic.w	r2, r3, #16
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	699b      	ldr	r3, [r3, #24]
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 0320 	bic.w	r3, r3, #32
 800331a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a1d      	ldr	r2, [pc, #116]	; (80033a0 <TIM_OC2_SetConfig+0xd0>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d10d      	bne.n	800334c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800334a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a14      	ldr	r2, [pc, #80]	; (80033a0 <TIM_OC2_SetConfig+0xd0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d113      	bne.n	800337c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800335a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003362:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	693a      	ldr	r2, [r7, #16]
 800336c:	4313      	orrs	r3, r2
 800336e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	699b      	ldr	r3, [r3, #24]
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	693a      	ldr	r2, [r7, #16]
 8003378:	4313      	orrs	r3, r2
 800337a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	685a      	ldr	r2, [r3, #4]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	621a      	str	r2, [r3, #32]
}
 8003396:	bf00      	nop
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr
 80033a0:	40012c00 	.word	0x40012c00

080033a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b087      	sub	sp, #28
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
 80033ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6a1b      	ldr	r3, [r3, #32]
 80033be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0303 	bic.w	r3, r3, #3
 80033da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	021b      	lsls	r3, r3, #8
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	4a1d      	ldr	r2, [pc, #116]	; (8003474 <TIM_OC3_SetConfig+0xd0>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d10d      	bne.n	800341e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003408:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	68db      	ldr	r3, [r3, #12]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800341c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a14      	ldr	r2, [pc, #80]	; (8003474 <TIM_OC3_SetConfig+0xd0>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d113      	bne.n	800344e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800342c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003434:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	695b      	ldr	r3, [r3, #20]
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	693a      	ldr	r2, [r7, #16]
 800343e:	4313      	orrs	r3, r2
 8003440:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	699b      	ldr	r3, [r3, #24]
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	693a      	ldr	r2, [r7, #16]
 800344a:	4313      	orrs	r3, r2
 800344c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	693a      	ldr	r2, [r7, #16]
 8003452:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	621a      	str	r2, [r3, #32]
}
 8003468:	bf00      	nop
 800346a:	371c      	adds	r7, #28
 800346c:	46bd      	mov	sp, r7
 800346e:	bc80      	pop	{r7}
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40012c00 	.word	0x40012c00

08003478 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003478:	b480      	push	{r7}
 800347a:	b087      	sub	sp, #28
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6a1b      	ldr	r3, [r3, #32]
 8003486:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69db      	ldr	r3, [r3, #28]
 800349e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	021b      	lsls	r3, r3, #8
 80034b6:	68fa      	ldr	r2, [r7, #12]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	031b      	lsls	r3, r3, #12
 80034ca:	693a      	ldr	r2, [r7, #16]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	4a0f      	ldr	r2, [pc, #60]	; (8003510 <TIM_OC4_SetConfig+0x98>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d109      	bne.n	80034ec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80034de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	019b      	lsls	r3, r3, #6
 80034e6:	697a      	ldr	r2, [r7, #20]
 80034e8:	4313      	orrs	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	68fa      	ldr	r2, [r7, #12]
 80034f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	685a      	ldr	r2, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	621a      	str	r2, [r3, #32]
}
 8003506:	bf00      	nop
 8003508:	371c      	adds	r7, #28
 800350a:	46bd      	mov	sp, r7
 800350c:	bc80      	pop	{r7}
 800350e:	4770      	bx	lr
 8003510:	40012c00 	.word	0x40012c00

08003514 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003514:	b480      	push	{r7}
 8003516:	b087      	sub	sp, #28
 8003518:	af00      	add	r7, sp, #0
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f003 031f 	and.w	r3, r3, #31
 8003526:	2201      	movs	r2, #1
 8003528:	fa02 f303 	lsl.w	r3, r2, r3
 800352c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a1a      	ldr	r2, [r3, #32]
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	43db      	mvns	r3, r3
 8003536:	401a      	ands	r2, r3
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6a1a      	ldr	r2, [r3, #32]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 031f 	and.w	r3, r3, #31
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	431a      	orrs	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	621a      	str	r2, [r3, #32]
}
 8003552:	bf00      	nop
 8003554:	371c      	adds	r7, #28
 8003556:	46bd      	mov	sp, r7
 8003558:	bc80      	pop	{r7}
 800355a:	4770      	bx	lr

0800355c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800356c:	2b01      	cmp	r3, #1
 800356e:	d101      	bne.n	8003574 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003570:	2302      	movs	r3, #2
 8003572:	e046      	b.n	8003602 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800359a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68fa      	ldr	r2, [r7, #12]
 80035a2:	4313      	orrs	r3, r2
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a16      	ldr	r2, [pc, #88]	; (800360c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d00e      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035c0:	d009      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a12      	ldr	r2, [pc, #72]	; (8003610 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d004      	beq.n	80035d6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a10      	ldr	r2, [pc, #64]	; (8003614 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d10c      	bne.n	80035f0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	bc80      	pop	{r7}
 800360a:	4770      	bx	lr
 800360c:	40012c00 	.word	0x40012c00
 8003610:	40000400 	.word	0x40000400
 8003614:	40000800 	.word	0x40000800

08003618 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003618:	b480      	push	{r7}
 800361a:	b085      	sub	sp, #20
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800362c:	2b01      	cmp	r3, #1
 800362e:	d101      	bne.n	8003634 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003630:	2302      	movs	r3, #2
 8003632:	e03d      	b.n	80036b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	4313      	orrs	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	4313      	orrs	r3, r2
 8003664:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4313      	orrs	r3, r2
 8003672:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	691b      	ldr	r3, [r3, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	4313      	orrs	r3, r2
 800368e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	4313      	orrs	r3, r2
 800369c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3714      	adds	r7, #20
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bc80      	pop	{r7}
 80036b8:	4770      	bx	lr
	...

080036bc <__libc_init_array>:
 80036bc:	b570      	push	{r4, r5, r6, lr}
 80036be:	2500      	movs	r5, #0
 80036c0:	4e0c      	ldr	r6, [pc, #48]	; (80036f4 <__libc_init_array+0x38>)
 80036c2:	4c0d      	ldr	r4, [pc, #52]	; (80036f8 <__libc_init_array+0x3c>)
 80036c4:	1ba4      	subs	r4, r4, r6
 80036c6:	10a4      	asrs	r4, r4, #2
 80036c8:	42a5      	cmp	r5, r4
 80036ca:	d109      	bne.n	80036e0 <__libc_init_array+0x24>
 80036cc:	f000 f822 	bl	8003714 <_init>
 80036d0:	2500      	movs	r5, #0
 80036d2:	4e0a      	ldr	r6, [pc, #40]	; (80036fc <__libc_init_array+0x40>)
 80036d4:	4c0a      	ldr	r4, [pc, #40]	; (8003700 <__libc_init_array+0x44>)
 80036d6:	1ba4      	subs	r4, r4, r6
 80036d8:	10a4      	asrs	r4, r4, #2
 80036da:	42a5      	cmp	r5, r4
 80036dc:	d105      	bne.n	80036ea <__libc_init_array+0x2e>
 80036de:	bd70      	pop	{r4, r5, r6, pc}
 80036e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036e4:	4798      	blx	r3
 80036e6:	3501      	adds	r5, #1
 80036e8:	e7ee      	b.n	80036c8 <__libc_init_array+0xc>
 80036ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80036ee:	4798      	blx	r3
 80036f0:	3501      	adds	r5, #1
 80036f2:	e7f2      	b.n	80036da <__libc_init_array+0x1e>
 80036f4:	0800376c 	.word	0x0800376c
 80036f8:	0800376c 	.word	0x0800376c
 80036fc:	0800376c 	.word	0x0800376c
 8003700:	08003770 	.word	0x08003770

08003704 <memset>:
 8003704:	4603      	mov	r3, r0
 8003706:	4402      	add	r2, r0
 8003708:	4293      	cmp	r3, r2
 800370a:	d100      	bne.n	800370e <memset+0xa>
 800370c:	4770      	bx	lr
 800370e:	f803 1b01 	strb.w	r1, [r3], #1
 8003712:	e7f9      	b.n	8003708 <memset+0x4>

08003714 <_init>:
 8003714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003716:	bf00      	nop
 8003718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800371a:	bc08      	pop	{r3}
 800371c:	469e      	mov	lr, r3
 800371e:	4770      	bx	lr

08003720 <_fini>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	bf00      	nop
 8003724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003726:	bc08      	pop	{r3}
 8003728:	469e      	mov	lr, r3
 800372a:	4770      	bx	lr

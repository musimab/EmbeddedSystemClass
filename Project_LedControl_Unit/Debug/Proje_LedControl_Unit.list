
Proje_LedControl_Unit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b88  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  08003d18  08003d18  00013d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d98  08003d98  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003d98  08003d98  00013d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003da0  08003da0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da0  08003da0  00013da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000070  08003e18  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000208  08003e18  00020208  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009b7d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001779  00000000  00000000  00029c1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000878  00000000  00000000  0002b398  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007d8  00000000  00000000  0002bc10  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000198e  00000000  00000000  0002c3e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000075ff  00000000  00000000  0002dd76  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c4918  00000000  00000000  00035375  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f9c8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000259c  00000000  00000000  000f9d08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d00 	.word	0x08003d00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08003d00 	.word	0x08003d00

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x7E // change this according to ur setup // 0x7E // 0x4E

void lcd_send_cmd (char cmd)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	f023 030f 	bic.w	r3, r3, #15
 8000580:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000582:	79fb      	ldrb	r3, [r7, #7]
 8000584:	011b      	lsls	r3, r3, #4
 8000586:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000588:	7bfb      	ldrb	r3, [r7, #15]
 800058a:	f043 030c 	orr.w	r3, r3, #12
 800058e:	b2db      	uxtb	r3, r3
 8000590:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000592:	7bfb      	ldrb	r3, [r7, #15]
 8000594:	f043 0308 	orr.w	r3, r3, #8
 8000598:	b2db      	uxtb	r3, r3
 800059a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	f043 030c 	orr.w	r3, r3, #12
 80005a2:	b2db      	uxtb	r3, r3
 80005a4:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005a6:	7bbb      	ldrb	r3, [r7, #14]
 80005a8:	f043 0308 	orr.w	r3, r3, #8
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80005b0:	f107 0208 	add.w	r2, r7, #8
 80005b4:	2364      	movs	r3, #100	; 0x64
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2304      	movs	r3, #4
 80005ba:	217e      	movs	r1, #126	; 0x7e
 80005bc:	4803      	ldr	r0, [pc, #12]	; (80005cc <lcd_send_cmd+0x5c>)
 80005be:	f002 f811 	bl	80025e4 <HAL_I2C_Master_Transmit>
}
 80005c2:	bf00      	nop
 80005c4:	3710      	adds	r7, #16
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	200000c0 	.word	0x200000c0

080005d0 <lcd_send_data>:

void lcd_send_data (char data)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b086      	sub	sp, #24
 80005d4:	af02      	add	r7, sp, #8
 80005d6:	4603      	mov	r3, r0
 80005d8:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80005da:	79fb      	ldrb	r3, [r7, #7]
 80005dc:	f023 030f 	bic.w	r3, r3, #15
 80005e0:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80005e8:	7bfb      	ldrb	r3, [r7, #15]
 80005ea:	f043 030d 	orr.w	r3, r3, #13
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	f043 0309 	orr.w	r3, r3, #9
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80005fc:	7bbb      	ldrb	r3, [r7, #14]
 80005fe:	f043 030d 	orr.w	r3, r3, #13
 8000602:	b2db      	uxtb	r3, r3
 8000604:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000606:	7bbb      	ldrb	r3, [r7, #14]
 8000608:	f043 0309 	orr.w	r3, r3, #9
 800060c:	b2db      	uxtb	r3, r3
 800060e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000610:	f107 0208 	add.w	r2, r7, #8
 8000614:	2364      	movs	r3, #100	; 0x64
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2304      	movs	r3, #4
 800061a:	217e      	movs	r1, #126	; 0x7e
 800061c:	4803      	ldr	r0, [pc, #12]	; (800062c <lcd_send_data+0x5c>)
 800061e:	f001 ffe1 	bl	80025e4 <HAL_I2C_Master_Transmit>
}
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	200000c0 	.word	0x200000c0

08000630 <lcd_clear>:

void lcd_clear (void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000636:	2080      	movs	r0, #128	; 0x80
 8000638:	f7ff ff9a 	bl	8000570 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	e005      	b.n	800064e <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000642:	2020      	movs	r0, #32
 8000644:	f7ff ffc4 	bl	80005d0 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	3301      	adds	r3, #1
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b45      	cmp	r3, #69	; 0x45
 8000652:	ddf6      	ble.n	8000642 <lcd_clear+0x12>
	}
}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
    switch (row)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2b00      	cmp	r3, #0
 800066a:	d002      	beq.n	8000672 <lcd_put_cur+0x16>
 800066c:	2b01      	cmp	r3, #1
 800066e:	d005      	beq.n	800067c <lcd_put_cur+0x20>
 8000670:	e009      	b.n	8000686 <lcd_put_cur+0x2a>
    {
        case 0:
            col |= 0x80;
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000678:	603b      	str	r3, [r7, #0]
            break;
 800067a:	e004      	b.n	8000686 <lcd_put_cur+0x2a>
        case 1:
            col |= 0xC0;
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000682:	603b      	str	r3, [r7, #0]
            break;
 8000684:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	b2db      	uxtb	r3, r3
 800068a:	4618      	mov	r0, r3
 800068c:	f7ff ff70 	bl	8000570 <lcd_send_cmd>
}
 8000690:	bf00      	nop
 8000692:	3708      	adds	r7, #8
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}

08000698 <lcd_init>:


void lcd_init (void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800069c:	2032      	movs	r0, #50	; 0x32
 800069e:	f000 fd1b 	bl	80010d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006a2:	2030      	movs	r0, #48	; 0x30
 80006a4:	f7ff ff64 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80006a8:	2005      	movs	r0, #5
 80006aa:	f000 fd15 	bl	80010d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006ae:	2030      	movs	r0, #48	; 0x30
 80006b0:	f7ff ff5e 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 fd0f 	bl	80010d8 <HAL_Delay>
	lcd_send_cmd (0x30);
 80006ba:	2030      	movs	r0, #48	; 0x30
 80006bc:	f7ff ff58 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(10);
 80006c0:	200a      	movs	r0, #10
 80006c2:	f000 fd09 	bl	80010d8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80006c6:	2020      	movs	r0, #32
 80006c8:	f7ff ff52 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(10);
 80006cc:	200a      	movs	r0, #10
 80006ce:	f000 fd03 	bl	80010d8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80006d2:	2028      	movs	r0, #40	; 0x28
 80006d4:	f7ff ff4c 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 80006d8:	2001      	movs	r0, #1
 80006da:	f000 fcfd 	bl	80010d8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80006de:	2008      	movs	r0, #8
 80006e0:	f7ff ff46 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 80006e4:	2001      	movs	r0, #1
 80006e6:	f000 fcf7 	bl	80010d8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff ff40 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 80006f0:	2001      	movs	r0, #1
 80006f2:	f000 fcf1 	bl	80010d8 <HAL_Delay>
	HAL_Delay(1);
 80006f6:	2001      	movs	r0, #1
 80006f8:	f000 fcee 	bl	80010d8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80006fc:	2006      	movs	r0, #6
 80006fe:	f7ff ff37 	bl	8000570 <lcd_send_cmd>
	HAL_Delay(1);
 8000702:	2001      	movs	r0, #1
 8000704:	f000 fce8 	bl	80010d8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000708:	200c      	movs	r0, #12
 800070a:	f7ff ff31 	bl	8000570 <lcd_send_cmd>
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}

08000712 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	b082      	sub	sp, #8
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800071a:	e006      	b.n	800072a <lcd_send_string+0x18>
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	1c5a      	adds	r2, r3, #1
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff ff53 	bl	80005d0 <lcd_send_data>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	781b      	ldrb	r3, [r3, #0]
 800072e:	2b00      	cmp	r3, #0
 8000730:	d1f4      	bne.n	800071c <lcd_send_string+0xa>
}
 8000732:	bf00      	nop
 8000734:	3708      	adds	r7, #8
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
	...

0800073c <Init_Tx_Can_Config>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Init_Tx_Can_Config()
{   // Set Transmit parameters
 800073c:	b480      	push	{r7}
 800073e:	af00      	add	r7, sp, #0
	  pTxHeader.DLC = 2;
 8000740:	4b08      	ldr	r3, [pc, #32]	; (8000764 <Init_Tx_Can_Config+0x28>)
 8000742:	2202      	movs	r2, #2
 8000744:	611a      	str	r2, [r3, #16]
	  pTxHeader.IDE = CAN_ID_STD;
 8000746:	4b07      	ldr	r3, [pc, #28]	; (8000764 <Init_Tx_Can_Config+0x28>)
 8000748:	2200      	movs	r2, #0
 800074a:	609a      	str	r2, [r3, #8]
	  pTxHeader.RTR = CAN_RTR_DATA;
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <Init_Tx_Can_Config+0x28>)
 800074e:	2200      	movs	r2, #0
 8000750:	60da      	str	r2, [r3, #12]
	  pTxHeader.StdId = 0x0155; // Id of LedControlUnit
 8000752:	4b04      	ldr	r3, [pc, #16]	; (8000764 <Init_Tx_Can_Config+0x28>)
 8000754:	f240 1255 	movw	r2, #341	; 0x155
 8000758:	601a      	str	r2, [r3, #0]

}
 800075a:	bf00      	nop
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	20000114 	.word	0x20000114

08000768 <Init_Filter_Can_Config>:

void Init_Filter_Can_Config()
{   // Set Filter Parameters
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
	sFilterConfig.FilterActivation =ENABLE;
 800076c:	4b10      	ldr	r3, [pc, #64]	; (80007b0 <Init_Filter_Can_Config+0x48>)
 800076e:	2201      	movs	r2, #1
 8000770:	621a      	str	r2, [r3, #32]
	sFilterConfig.FilterBank = 0;
 8000772:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <Init_Filter_Can_Config+0x48>)
 8000774:	2200      	movs	r2, #0
 8000776:	615a      	str	r2, [r3, #20]
	sFilterConfig.FilterFIFOAssignment =CAN_FILTER_FIFO0;
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <Init_Filter_Can_Config+0x48>)
 800077a:	2200      	movs	r2, #0
 800077c:	611a      	str	r2, [r3, #16]
	sFilterConfig.FilterIdHigh = 0x1994<<5; // Id of MaxMinRangeControl Message
 800077e:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <Init_Filter_Can_Config+0x48>)
 8000780:	4a0c      	ldr	r2, [pc, #48]	; (80007b4 <Init_Filter_Can_Config+0x4c>)
 8000782:	601a      	str	r2, [r3, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8000784:	4b0a      	ldr	r3, [pc, #40]	; (80007b0 <Init_Filter_Can_Config+0x48>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
	sFilterConfig.FilterMaskIdHigh = 0xFFFF;
 800078a:	4b09      	ldr	r3, [pc, #36]	; (80007b0 <Init_Filter_Can_Config+0x48>)
 800078c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000790:	609a      	str	r2, [r3, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000792:	4b07      	ldr	r3, [pc, #28]	; (80007b0 <Init_Filter_Can_Config+0x48>)
 8000794:	2200      	movs	r2, #0
 8000796:	60da      	str	r2, [r3, #12]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <Init_Filter_Can_Config+0x48>)
 800079a:	2200      	movs	r2, #0
 800079c:	619a      	str	r2, [r3, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800079e:	4b04      	ldr	r3, [pc, #16]	; (80007b0 <Init_Filter_Can_Config+0x48>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	61da      	str	r2, [r3, #28]
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 80007a4:	4902      	ldr	r1, [pc, #8]	; (80007b0 <Init_Filter_Can_Config+0x48>)
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <Init_Filter_Can_Config+0x50>)
 80007a8:	f000 fdb4 	bl	8001314 <HAL_CAN_ConfigFilter>

}
 80007ac:	bf00      	nop
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	20000098 	.word	0x20000098
 80007b4:	00033280 	.word	0x00033280
 80007b8:	200001cc 	.word	0x200001cc

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c2:	f000 fc17 	bl	8000ff4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c6:	f000 f97f 	bl	8000ac8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ca:	f000 fa4b 	bl	8000c64 <MX_GPIO_Init>
  MX_CAN1_Init();
 80007ce:	f000 f9e5 	bl	8000b9c <MX_CAN1_Init>
  MX_I2C2_Init();
 80007d2:	f000 fa19 	bl	8000c08 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80007d6:	2102      	movs	r1, #2
 80007d8:	48af      	ldr	r0, [pc, #700]	; (8000a98 <main+0x2dc>)
 80007da:	f001 f8ac 	bl	8001936 <HAL_CAN_ActivateNotification>

  Init_Tx_Can_Config();
 80007de:	f7ff ffad 	bl	800073c <Init_Tx_Can_Config>
  Init_Filter_Can_Config();
 80007e2:	f7ff ffc1 	bl	8000768 <Init_Filter_Can_Config>
  HAL_CAN_Start(&hcan1);
 80007e6:	48ac      	ldr	r0, [pc, #688]	; (8000a98 <main+0x2dc>)
 80007e8:	f000 fe74 	bl	80014d4 <HAL_CAN_Start>


  lcd_init();
 80007ec:	f7ff ff54 	bl	8000698 <lcd_init>
  lcd_clear();
 80007f0:	f7ff ff1e 	bl	8000630 <lcd_clear>
  lcd_put_cur(0, 0);
 80007f4:	2100      	movs	r1, #0
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff ff30 	bl	800065c <lcd_put_cur>
  lcd_send_string("Hi LedControl");
 80007fc:	48a7      	ldr	r0, [pc, #668]	; (8000a9c <main+0x2e0>)
 80007fe:	f7ff ff88 	bl	8000712 <lcd_send_string>
  HAL_Delay(2000);
 8000802:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000806:	f000 fc67 	bl	80010d8 <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */



  MxMinMeasure_t mMeasurement_var = {0};
 800080a:	2300      	movs	r3, #0
 800080c:	81bb      	strh	r3, [r7, #12]
  MxMinMeasure_t mMaxRange_var = {0};
 800080e:	2300      	movs	r3, #0
 8000810:	813b      	strh	r3, [r7, #8]
  MxMinMeasure_t mMinRange_var = {0};
 8000812:	2300      	movs	r3, #0
 8000814:	80bb      	strh	r3, [r7, #4]

  MxMinMeasure_t* mMeasurement_ptr = &mMeasurement_var;
 8000816:	f107 030c 	add.w	r3, r7, #12
 800081a:	61bb      	str	r3, [r7, #24]
  MxMinMeasure_t* mMaxRange_ptr = &mMaxRange_var;
 800081c:	f107 0308 	add.w	r3, r7, #8
 8000820:	617b      	str	r3, [r7, #20]
  MxMinMeasure_t* mMinRange_ptr = &mMinRange_var;
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	613b      	str	r3, [r7, #16]

  STATE_t state = NO_OBJECT;
 8000826:	2303      	movs	r3, #3
 8000828:	77fb      	strb	r3, [r7, #31]

  MotorSpeed_t mMotorSpeed = {0};
 800082a:	2300      	movs	r3, #0
 800082c:	803b      	strh	r3, [r7, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  mMeasurement_ptr->id   = CanReceiveData[0];
 800082e:	4b9c      	ldr	r3, [pc, #624]	; (8000aa0 <main+0x2e4>)
 8000830:	781a      	ldrb	r2, [r3, #0]
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	701a      	strb	r2, [r3, #0]
	  mMeasurement_ptr->data = CanReceiveData[1];
 8000836:	4b9a      	ldr	r3, [pc, #616]	; (8000aa0 <main+0x2e4>)
 8000838:	785a      	ldrb	r2, [r3, #1]
 800083a:	69bb      	ldr	r3, [r7, #24]
 800083c:	705a      	strb	r2, [r3, #1]

	  mMaxRange_ptr->id   = CanReceiveData[2];
 800083e:	4b98      	ldr	r3, [pc, #608]	; (8000aa0 <main+0x2e4>)
 8000840:	789a      	ldrb	r2, [r3, #2]
 8000842:	697b      	ldr	r3, [r7, #20]
 8000844:	701a      	strb	r2, [r3, #0]
	  mMaxRange_ptr->data = CanReceiveData[3];
 8000846:	4b96      	ldr	r3, [pc, #600]	; (8000aa0 <main+0x2e4>)
 8000848:	78da      	ldrb	r2, [r3, #3]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	705a      	strb	r2, [r3, #1]

	  mMinRange_ptr->id   = CanReceiveData[4];
 800084e:	4b94      	ldr	r3, [pc, #592]	; (8000aa0 <main+0x2e4>)
 8000850:	791a      	ldrb	r2, [r3, #4]
 8000852:	693b      	ldr	r3, [r7, #16]
 8000854:	701a      	strb	r2, [r3, #0]
	  mMinRange_ptr->data = CanReceiveData[5];
 8000856:	4b92      	ldr	r3, [pc, #584]	; (8000aa0 <main+0x2e4>)
 8000858:	795a      	ldrb	r2, [r3, #5]
 800085a:	693b      	ldr	r3, [r7, #16]
 800085c:	705a      	strb	r2, [r3, #1]


	  lcd_clear();
 800085e:	f7ff fee7 	bl	8000630 <lcd_clear>
	  lcd_put_cur(0, 0);
 8000862:	2100      	movs	r1, #0
 8000864:	2000      	movs	r0, #0
 8000866:	f7ff fef9 	bl	800065c <lcd_put_cur>
	  sprintf(buf,"d: %d cm",mMeasurement_ptr->data);
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	461a      	mov	r2, r3
 8000870:	498c      	ldr	r1, [pc, #560]	; (8000aa4 <main+0x2e8>)
 8000872:	488d      	ldr	r0, [pc, #564]	; (8000aa8 <main+0x2ec>)
 8000874:	f002 fe3e 	bl	80034f4 <siprintf>
	  lcd_send_string(buf);
 8000878:	488b      	ldr	r0, [pc, #556]	; (8000aa8 <main+0x2ec>)
 800087a:	f7ff ff4a 	bl	8000712 <lcd_send_string>
	  lcd_put_cur(0, 10);
 800087e:	210a      	movs	r1, #10
 8000880:	2000      	movs	r0, #0
 8000882:	f7ff feeb 	bl	800065c <lcd_put_cur>
	  sprintf(buf,"id: %d",mMeasurement_ptr->id);
 8000886:	69bb      	ldr	r3, [r7, #24]
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	4987      	ldr	r1, [pc, #540]	; (8000aac <main+0x2f0>)
 800088e:	4886      	ldr	r0, [pc, #536]	; (8000aa8 <main+0x2ec>)
 8000890:	f002 fe30 	bl	80034f4 <siprintf>
	  lcd_send_string(buf);
 8000894:	4884      	ldr	r0, [pc, #528]	; (8000aa8 <main+0x2ec>)
 8000896:	f7ff ff3c 	bl	8000712 <lcd_send_string>
	  lcd_put_cur(1, 0);
 800089a:	2100      	movs	r1, #0
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff fedd 	bl	800065c <lcd_put_cur>
	  sprintf(buf,"Max:%d ",mMaxRange_ptr->data);
 80008a2:	697b      	ldr	r3, [r7, #20]
 80008a4:	785b      	ldrb	r3, [r3, #1]
 80008a6:	461a      	mov	r2, r3
 80008a8:	4981      	ldr	r1, [pc, #516]	; (8000ab0 <main+0x2f4>)
 80008aa:	487f      	ldr	r0, [pc, #508]	; (8000aa8 <main+0x2ec>)
 80008ac:	f002 fe22 	bl	80034f4 <siprintf>
	  lcd_send_string(buf);
 80008b0:	487d      	ldr	r0, [pc, #500]	; (8000aa8 <main+0x2ec>)
 80008b2:	f7ff ff2e 	bl	8000712 <lcd_send_string>
	  lcd_put_cur(1, 8);
 80008b6:	2108      	movs	r1, #8
 80008b8:	2001      	movs	r0, #1
 80008ba:	f7ff fecf 	bl	800065c <lcd_put_cur>
	  sprintf(buf,"Min: %d",mMinRange_ptr->data);
 80008be:	693b      	ldr	r3, [r7, #16]
 80008c0:	785b      	ldrb	r3, [r3, #1]
 80008c2:	461a      	mov	r2, r3
 80008c4:	497b      	ldr	r1, [pc, #492]	; (8000ab4 <main+0x2f8>)
 80008c6:	4878      	ldr	r0, [pc, #480]	; (8000aa8 <main+0x2ec>)
 80008c8:	f002 fe14 	bl	80034f4 <siprintf>
	  lcd_send_string(buf);
 80008cc:	4876      	ldr	r0, [pc, #472]	; (8000aa8 <main+0x2ec>)
 80008ce:	f7ff ff20 	bl	8000712 <lcd_send_string>
	  HAL_Delay(100);
 80008d2:	2064      	movs	r0, #100	; 0x64
 80008d4:	f000 fc00 	bl	80010d8 <HAL_Delay>

      if(mMaxRange_ptr->data == 0 || mMinRange_ptr->data == 0)
 80008d8:	697b      	ldr	r3, [r7, #20]
 80008da:	785b      	ldrb	r3, [r3, #1]
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d003      	beq.n	80008e8 <main+0x12c>
 80008e0:	693b      	ldr	r3, [r7, #16]
 80008e2:	785b      	ldrb	r3, [r3, #1]
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d102      	bne.n	80008ee <main+0x132>
    	  state = ERROR_S; // State ERROR
 80008e8:	2300      	movs	r3, #0
 80008ea:	77fb      	strb	r3, [r7, #31]
 80008ec:	e01f      	b.n	800092e <main+0x172>
      else if(mMeasurement_ptr->data <= mMinRange_ptr->data)
 80008ee:	69bb      	ldr	r3, [r7, #24]
 80008f0:	785a      	ldrb	r2, [r3, #1]
 80008f2:	693b      	ldr	r3, [r7, #16]
 80008f4:	785b      	ldrb	r3, [r3, #1]
 80008f6:	429a      	cmp	r2, r3
 80008f8:	d802      	bhi.n	8000900 <main+0x144>
    	  state = HIGHSEQURITY; // State HIGHSEQURITY
 80008fa:	2301      	movs	r3, #1
 80008fc:	77fb      	strb	r3, [r7, #31]
 80008fe:	e016      	b.n	800092e <main+0x172>
      else if(mMeasurement_ptr->data > mMinRange_ptr->data && mMeasurement_ptr->data <= mMaxRange_ptr->data)
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	785a      	ldrb	r2, [r3, #1]
 8000904:	693b      	ldr	r3, [r7, #16]
 8000906:	785b      	ldrb	r3, [r3, #1]
 8000908:	429a      	cmp	r2, r3
 800090a:	d908      	bls.n	800091e <main+0x162>
 800090c:	69bb      	ldr	r3, [r7, #24]
 800090e:	785a      	ldrb	r2, [r3, #1]
 8000910:	697b      	ldr	r3, [r7, #20]
 8000912:	785b      	ldrb	r3, [r3, #1]
 8000914:	429a      	cmp	r2, r3
 8000916:	d802      	bhi.n	800091e <main+0x162>
    	  state = LOWSEQURITY; // State LOWSEQURITY
 8000918:	2302      	movs	r3, #2
 800091a:	77fb      	strb	r3, [r7, #31]
 800091c:	e007      	b.n	800092e <main+0x172>
      else if(mMeasurement_ptr->data >= mMaxRange_ptr->data)
 800091e:	69bb      	ldr	r3, [r7, #24]
 8000920:	785a      	ldrb	r2, [r3, #1]
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	785b      	ldrb	r3, [r3, #1]
 8000926:	429a      	cmp	r2, r3
 8000928:	d301      	bcc.n	800092e <main+0x172>
    	  state = NO_OBJECT; // State NO_OBJECT
 800092a:	2303      	movs	r3, #3
 800092c:	77fb      	strb	r3, [r7, #31]

      switch(state)
 800092e:	7ffb      	ldrb	r3, [r7, #31]
 8000930:	2b03      	cmp	r3, #3
 8000932:	f63f af7c 	bhi.w	800082e <main+0x72>
 8000936:	a201      	add	r2, pc, #4	; (adr r2, 800093c <main+0x180>)
 8000938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800093c:	0800094d 	.word	0x0800094d
 8000940:	0800099f 	.word	0x0800099f
 8000944:	080009f1 	.word	0x080009f1
 8000948:	08000a43 	.word	0x08000a43
      {
		  case ERROR_S:
		  {
	    	  HAL_GPIO_WritePin(GPIOD, mLedOrange, GPIO_PIN_SET);
 800094c:	2201      	movs	r2, #1
 800094e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000952:	4859      	ldr	r0, [pc, #356]	; (8000ab8 <main+0x2fc>)
 8000954:	f001 fcf4 	bl	8002340 <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(GPIOD, mLedBlue, GPIO_PIN_RESET);
 8000958:	2200      	movs	r2, #0
 800095a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800095e:	4856      	ldr	r0, [pc, #344]	; (8000ab8 <main+0x2fc>)
 8000960:	f001 fcee 	bl	8002340 <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(GPIOD, mLedRed, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800096a:	4853      	ldr	r0, [pc, #332]	; (8000ab8 <main+0x2fc>)
 800096c:	f001 fce8 	bl	8002340 <HAL_GPIO_WritePin>
	    	  HAL_GPIO_WritePin(GPIOD, mLedGreen, GPIO_PIN_RESET);
 8000970:	2200      	movs	r2, #0
 8000972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000976:	4850      	ldr	r0, [pc, #320]	; (8000ab8 <main+0x2fc>)
 8000978:	f001 fce2 	bl	8002340 <HAL_GPIO_WritePin>
	    	  mMotorSpeed.data = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	707b      	strb	r3, [r7, #1]
	    	  mMotorSpeed.id = 50;
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	703b      	strb	r3, [r7, #0]
	    	  CanTransData[1]= mMotorSpeed.data; // mMotorSpeed =0
 8000984:	787a      	ldrb	r2, [r7, #1]
 8000986:	4b4d      	ldr	r3, [pc, #308]	; (8000abc <main+0x300>)
 8000988:	705a      	strb	r2, [r3, #1]
	    	  CanTransData[0]= mMotorSpeed.id; // mMotorSpeed =0
 800098a:	783a      	ldrb	r2, [r7, #0]
 800098c:	4b4b      	ldr	r3, [pc, #300]	; (8000abc <main+0x300>)
 800098e:	701a      	strb	r2, [r3, #0]
	    	  HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, CanTransData, &mTxMailbox);// Send mMotorSpeed to MotorServoControl unit
 8000990:	4b4b      	ldr	r3, [pc, #300]	; (8000ac0 <main+0x304>)
 8000992:	4a4a      	ldr	r2, [pc, #296]	; (8000abc <main+0x300>)
 8000994:	494b      	ldr	r1, [pc, #300]	; (8000ac4 <main+0x308>)
 8000996:	4840      	ldr	r0, [pc, #256]	; (8000a98 <main+0x2dc>)
 8000998:	f000 fde0 	bl	800155c <HAL_CAN_AddTxMessage>
	    	  break;
 800099c:	e07a      	b.n	8000a94 <main+0x2d8>
		  }
		  case HIGHSEQURITY:
		  {
			  HAL_GPIO_WritePin(GPIOD, mLedOrange, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009a4:	4844      	ldr	r0, [pc, #272]	; (8000ab8 <main+0x2fc>)
 80009a6:	f001 fccb 	bl	8002340 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, mLedBlue, GPIO_PIN_RESET);
 80009aa:	2200      	movs	r2, #0
 80009ac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009b0:	4841      	ldr	r0, [pc, #260]	; (8000ab8 <main+0x2fc>)
 80009b2:	f001 fcc5 	bl	8002340 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, mLedGreen, GPIO_PIN_RESET);
 80009b6:	2200      	movs	r2, #0
 80009b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009bc:	483e      	ldr	r0, [pc, #248]	; (8000ab8 <main+0x2fc>)
 80009be:	f001 fcbf 	bl	8002340 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, mLedRed, GPIO_PIN_SET);
 80009c2:	2201      	movs	r2, #1
 80009c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009c8:	483b      	ldr	r0, [pc, #236]	; (8000ab8 <main+0x2fc>)
 80009ca:	f001 fcb9 	bl	8002340 <HAL_GPIO_WritePin>
	    	  mMotorSpeed.data = 0;
 80009ce:	2300      	movs	r3, #0
 80009d0:	707b      	strb	r3, [r7, #1]
	    	  mMotorSpeed.id = 50;
 80009d2:	2332      	movs	r3, #50	; 0x32
 80009d4:	703b      	strb	r3, [r7, #0]
	    	  CanTransData[0]= mMotorSpeed.id; // mMotorSpeed = 0
 80009d6:	783a      	ldrb	r2, [r7, #0]
 80009d8:	4b38      	ldr	r3, [pc, #224]	; (8000abc <main+0x300>)
 80009da:	701a      	strb	r2, [r3, #0]
	    	  CanTransData[1]= mMotorSpeed.data;
 80009dc:	787a      	ldrb	r2, [r7, #1]
 80009de:	4b37      	ldr	r3, [pc, #220]	; (8000abc <main+0x300>)
 80009e0:	705a      	strb	r2, [r3, #1]
			  HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, CanTransData, &mTxMailbox);// Send mMotorSpeed to MotorServoControl unit
 80009e2:	4b37      	ldr	r3, [pc, #220]	; (8000ac0 <main+0x304>)
 80009e4:	4a35      	ldr	r2, [pc, #212]	; (8000abc <main+0x300>)
 80009e6:	4937      	ldr	r1, [pc, #220]	; (8000ac4 <main+0x308>)
 80009e8:	482b      	ldr	r0, [pc, #172]	; (8000a98 <main+0x2dc>)
 80009ea:	f000 fdb7 	bl	800155c <HAL_CAN_AddTxMessage>
			  break;
 80009ee:	e051      	b.n	8000a94 <main+0x2d8>
		  }
		  case LOWSEQURITY:
		  {
			  HAL_GPIO_WritePin(GPIOD, mLedOrange, GPIO_PIN_RESET);
 80009f0:	2200      	movs	r2, #0
 80009f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f6:	4830      	ldr	r0, [pc, #192]	; (8000ab8 <main+0x2fc>)
 80009f8:	f001 fca2 	bl	8002340 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, mLedGreen, GPIO_PIN_RESET);
 80009fc:	2200      	movs	r2, #0
 80009fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a02:	482d      	ldr	r0, [pc, #180]	; (8000ab8 <main+0x2fc>)
 8000a04:	f001 fc9c 	bl	8002340 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, mLedRed, GPIO_PIN_RESET);
 8000a08:	2200      	movs	r2, #0
 8000a0a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a0e:	482a      	ldr	r0, [pc, #168]	; (8000ab8 <main+0x2fc>)
 8000a10:	f001 fc96 	bl	8002340 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, mLedBlue, GPIO_PIN_SET);
 8000a14:	2201      	movs	r2, #1
 8000a16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a1a:	4827      	ldr	r0, [pc, #156]	; (8000ab8 <main+0x2fc>)
 8000a1c:	f001 fc90 	bl	8002340 <HAL_GPIO_WritePin>
	    	  mMotorSpeed.data = 2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	707b      	strb	r3, [r7, #1]
	    	  mMotorSpeed.id = 50;
 8000a24:	2332      	movs	r3, #50	; 0x32
 8000a26:	703b      	strb	r3, [r7, #0]
	    	  CanTransData[0]= mMotorSpeed.id;  // mMotorSpeed id
 8000a28:	783a      	ldrb	r2, [r7, #0]
 8000a2a:	4b24      	ldr	r3, [pc, #144]	; (8000abc <main+0x300>)
 8000a2c:	701a      	strb	r2, [r3, #0]
	    	  CanTransData[1]= mMotorSpeed.data;// mMotorSpeed =2
 8000a2e:	787a      	ldrb	r2, [r7, #1]
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <main+0x300>)
 8000a32:	705a      	strb	r2, [r3, #1]
			  HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, CanTransData, &mTxMailbox);// Send mMotorSpeed to MotorServoControl unit
 8000a34:	4b22      	ldr	r3, [pc, #136]	; (8000ac0 <main+0x304>)
 8000a36:	4a21      	ldr	r2, [pc, #132]	; (8000abc <main+0x300>)
 8000a38:	4922      	ldr	r1, [pc, #136]	; (8000ac4 <main+0x308>)
 8000a3a:	4817      	ldr	r0, [pc, #92]	; (8000a98 <main+0x2dc>)
 8000a3c:	f000 fd8e 	bl	800155c <HAL_CAN_AddTxMessage>
			  break;
 8000a40:	e028      	b.n	8000a94 <main+0x2d8>
		  }
		  case NO_OBJECT:
		  {
			  HAL_GPIO_WritePin(GPIOD, mLedOrange, GPIO_PIN_RESET);
 8000a42:	2200      	movs	r2, #0
 8000a44:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a48:	481b      	ldr	r0, [pc, #108]	; (8000ab8 <main+0x2fc>)
 8000a4a:	f001 fc79 	bl	8002340 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, mLedBlue, GPIO_PIN_RESET);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a54:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <main+0x2fc>)
 8000a56:	f001 fc73 	bl	8002340 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, mLedRed, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a60:	4815      	ldr	r0, [pc, #84]	; (8000ab8 <main+0x2fc>)
 8000a62:	f001 fc6d 	bl	8002340 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(GPIOD, mLedGreen, GPIO_PIN_SET);
 8000a66:	2201      	movs	r2, #1
 8000a68:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a6c:	4812      	ldr	r0, [pc, #72]	; (8000ab8 <main+0x2fc>)
 8000a6e:	f001 fc67 	bl	8002340 <HAL_GPIO_WritePin>
	    	  mMotorSpeed.data = 1;
 8000a72:	2301      	movs	r3, #1
 8000a74:	707b      	strb	r3, [r7, #1]
	    	  mMotorSpeed.id = 50;
 8000a76:	2332      	movs	r3, #50	; 0x32
 8000a78:	703b      	strb	r3, [r7, #0]
	    	  CanTransData[0]= mMotorSpeed.id;
 8000a7a:	783a      	ldrb	r2, [r7, #0]
 8000a7c:	4b0f      	ldr	r3, [pc, #60]	; (8000abc <main+0x300>)
 8000a7e:	701a      	strb	r2, [r3, #0]
	    	  CanTransData[1]= mMotorSpeed.data; // mMotorSpeed =1
 8000a80:	787a      	ldrb	r2, [r7, #1]
 8000a82:	4b0e      	ldr	r3, [pc, #56]	; (8000abc <main+0x300>)
 8000a84:	705a      	strb	r2, [r3, #1]
			  HAL_CAN_AddTxMessage(&hcan1, &pTxHeader, CanTransData, &mTxMailbox);// Send mMotorSpeed to MotorServoControl unit
 8000a86:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <main+0x304>)
 8000a88:	4a0c      	ldr	r2, [pc, #48]	; (8000abc <main+0x300>)
 8000a8a:	490e      	ldr	r1, [pc, #56]	; (8000ac4 <main+0x308>)
 8000a8c:	4802      	ldr	r0, [pc, #8]	; (8000a98 <main+0x2dc>)
 8000a8e:	f000 fd65 	bl	800155c <HAL_CAN_AddTxMessage>
			  break;
 8000a92:	bf00      	nop
  {
 8000a94:	e6cb      	b.n	800082e <main+0x72>
 8000a96:	bf00      	nop
 8000a98:	200001cc 	.word	0x200001cc
 8000a9c:	08003d18 	.word	0x08003d18
 8000aa0:	200001f4 	.word	0x200001f4
 8000aa4:	08003d28 	.word	0x08003d28
 8000aa8:	20000130 	.word	0x20000130
 8000aac:	08003d34 	.word	0x08003d34
 8000ab0:	08003d3c 	.word	0x08003d3c
 8000ab4:	08003d44 	.word	0x08003d44
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	200001fc 	.word	0x200001fc
 8000ac0:	2000012c 	.word	0x2000012c
 8000ac4:	20000114 	.word	0x20000114

08000ac8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b094      	sub	sp, #80	; 0x50
 8000acc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ace:	f107 0320 	add.w	r3, r7, #32
 8000ad2:	2230      	movs	r2, #48	; 0x30
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	f002 fd04 	bl	80034e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000adc:	f107 030c 	add.w	r3, r7, #12
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	601a      	str	r2, [r3, #0]
 8000ae4:	605a      	str	r2, [r3, #4]
 8000ae6:	609a      	str	r2, [r3, #8]
 8000ae8:	60da      	str	r2, [r3, #12]
 8000aea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aec:	2300      	movs	r3, #0
 8000aee:	60bb      	str	r3, [r7, #8]
 8000af0:	4b28      	ldr	r3, [pc, #160]	; (8000b94 <SystemClock_Config+0xcc>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af4:	4a27      	ldr	r2, [pc, #156]	; (8000b94 <SystemClock_Config+0xcc>)
 8000af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afa:	6413      	str	r3, [r2, #64]	; 0x40
 8000afc:	4b25      	ldr	r3, [pc, #148]	; (8000b94 <SystemClock_Config+0xcc>)
 8000afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b08:	2300      	movs	r3, #0
 8000b0a:	607b      	str	r3, [r7, #4]
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a21      	ldr	r2, [pc, #132]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b1f      	ldr	r3, [pc, #124]	; (8000b98 <SystemClock_Config+0xd0>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b20:	607b      	str	r3, [r7, #4]
 8000b22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b24:	2301      	movs	r3, #1
 8000b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2e:	2302      	movs	r3, #2
 8000b30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b38:	2304      	movs	r3, #4
 8000b3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b3c:	23a8      	movs	r3, #168	; 0xa8
 8000b3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b44:	2304      	movs	r3, #4
 8000b46:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b48:	f107 0320 	add.w	r3, r7, #32
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f002 f851 	bl	8002bf4 <HAL_RCC_OscConfig>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b58:	f000 f8d6 	bl	8000d08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b5c:	230f      	movs	r3, #15
 8000b5e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b60:	2302      	movs	r3, #2
 8000b62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b68:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b6c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b74:	f107 030c 	add.w	r3, r7, #12
 8000b78:	2105      	movs	r1, #5
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f002 faaa 	bl	80030d4 <HAL_RCC_ClockConfig>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b86:	f000 f8bf 	bl	8000d08 <Error_Handler>
  }
}
 8000b8a:	bf00      	nop
 8000b8c:	3750      	adds	r7, #80	; 0x50
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800
 8000b98:	40007000 	.word	0x40007000

08000b9c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000ba0:	4b17      	ldr	r3, [pc, #92]	; (8000c00 <MX_CAN1_Init+0x64>)
 8000ba2:	4a18      	ldr	r2, [pc, #96]	; (8000c04 <MX_CAN1_Init+0x68>)
 8000ba4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <MX_CAN1_Init+0x64>)
 8000ba8:	2215      	movs	r2, #21
 8000baa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bac:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <MX_CAN1_Init+0x64>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <MX_CAN1_Init+0x64>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000bb8:	4b11      	ldr	r3, [pc, #68]	; (8000c00 <MX_CAN1_Init+0x64>)
 8000bba:	f44f 2210 	mov.w	r2, #589824	; 0x90000
 8000bbe:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_5TQ;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <MX_CAN1_Init+0x64>)
 8000bc2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000bc6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bc8:	4b0d      	ldr	r3, [pc, #52]	; (8000c00 <MX_CAN1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <MX_CAN1_Init+0x64>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <MX_CAN1_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000bda:	4b09      	ldr	r3, [pc, #36]	; (8000c00 <MX_CAN1_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000be0:	4b07      	ldr	r3, [pc, #28]	; (8000c00 <MX_CAN1_Init+0x64>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000be6:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <MX_CAN1_Init+0x64>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000bec:	4804      	ldr	r0, [pc, #16]	; (8000c00 <MX_CAN1_Init+0x64>)
 8000bee:	f000 fa95 	bl	800111c <HAL_CAN_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000bf8:	f000 f886 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000bfc:	bf00      	nop
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	200001cc 	.word	0x200001cc
 8000c04:	40006400 	.word	0x40006400

08000c08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c0c:	4b12      	ldr	r3, [pc, #72]	; (8000c58 <MX_I2C2_Init+0x50>)
 8000c0e:	4a13      	ldr	r2, [pc, #76]	; (8000c5c <MX_I2C2_Init+0x54>)
 8000c10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c12:	4b11      	ldr	r3, [pc, #68]	; (8000c58 <MX_I2C2_Init+0x50>)
 8000c14:	4a12      	ldr	r2, [pc, #72]	; (8000c60 <MX_I2C2_Init+0x58>)
 8000c16:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c18:	4b0f      	ldr	r3, [pc, #60]	; (8000c58 <MX_I2C2_Init+0x50>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c1e:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <MX_I2C2_Init+0x50>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c24:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_I2C2_Init+0x50>)
 8000c26:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c2a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_I2C2_Init+0x50>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_I2C2_Init+0x50>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_I2C2_Init+0x50>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_I2C2_Init+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_I2C2_Init+0x50>)
 8000c46:	f001 fb95 	bl	8002374 <HAL_I2C_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c50:	f000 f85a 	bl	8000d08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200000c0 	.word	0x200000c0
 8000c5c:	40005800 	.word	0x40005800
 8000c60:	000186a0 	.word	0x000186a0

08000c64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b088      	sub	sp, #32
 8000c68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c6a:	f107 030c 	add.w	r3, r7, #12
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	4b20      	ldr	r3, [pc, #128]	; (8000d00 <MX_GPIO_Init+0x9c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a1f      	ldr	r2, [pc, #124]	; (8000d00 <MX_GPIO_Init+0x9c>)
 8000c84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b1d      	ldr	r3, [pc, #116]	; (8000d00 <MX_GPIO_Init+0x9c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <MX_GPIO_Init+0x9c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <MX_GPIO_Init+0x9c>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <MX_GPIO_Init+0x9c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	603b      	str	r3, [r7, #0]
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <MX_GPIO_Init+0x9c>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	4a11      	ldr	r2, [pc, #68]	; (8000d00 <MX_GPIO_Init+0x9c>)
 8000cbc:	f043 0308 	orr.w	r3, r3, #8
 8000cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cc2:	4b0f      	ldr	r3, [pc, #60]	; (8000d00 <MX_GPIO_Init+0x9c>)
 8000cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc6:	f003 0308 	and.w	r3, r3, #8
 8000cca:	603b      	str	r3, [r7, #0]
 8000ccc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000cd4:	480b      	ldr	r0, [pc, #44]	; (8000d04 <MX_GPIO_Init+0xa0>)
 8000cd6:	f001 fb33 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000cda:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000cde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4804      	ldr	r0, [pc, #16]	; (8000d04 <MX_GPIO_Init+0xa0>)
 8000cf4:	f001 f98a 	bl	800200c <HAL_GPIO_Init>

}
 8000cf8:	bf00      	nop
 8000cfa:	3720      	adds	r7, #32
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020c00 	.word	0x40020c00

08000d08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
	...

08000d18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	607b      	str	r3, [r7, #4]
 8000d22:	4b10      	ldr	r3, [pc, #64]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d26:	4a0f      	ldr	r2, [pc, #60]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d2e:	4b0d      	ldr	r3, [pc, #52]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	603b      	str	r3, [r7, #0]
 8000d3e:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d42:	4a08      	ldr	r2, [pc, #32]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d48:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4a:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <HAL_MspInit+0x4c>)
 8000d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d52:	603b      	str	r3, [r7, #0]
 8000d54:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	40023800 	.word	0x40023800

08000d68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b08a      	sub	sp, #40	; 0x28
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	f107 0314 	add.w	r3, r7, #20
 8000d74:	2200      	movs	r2, #0
 8000d76:	601a      	str	r2, [r3, #0]
 8000d78:	605a      	str	r2, [r3, #4]
 8000d7a:	609a      	str	r2, [r3, #8]
 8000d7c:	60da      	str	r2, [r3, #12]
 8000d7e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a1d      	ldr	r2, [pc, #116]	; (8000dfc <HAL_CAN_MspInit+0x94>)
 8000d86:	4293      	cmp	r3, r2
 8000d88:	d134      	bne.n	8000df4 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <HAL_CAN_MspInit+0x98>)
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	4a1b      	ldr	r2, [pc, #108]	; (8000e00 <HAL_CAN_MspInit+0x98>)
 8000d94:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d98:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <HAL_CAN_MspInit+0x98>)
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <HAL_CAN_MspInit+0x98>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dae:	4a14      	ldr	r2, [pc, #80]	; (8000e00 <HAL_CAN_MspInit+0x98>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6313      	str	r3, [r2, #48]	; 0x30
 8000db6:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_CAN_MspInit+0x98>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration    
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000dc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000dd4:	2309      	movs	r3, #9
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4809      	ldr	r0, [pc, #36]	; (8000e04 <HAL_CAN_MspInit+0x9c>)
 8000de0:	f001 f914 	bl	800200c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2100      	movs	r1, #0
 8000de8:	2014      	movs	r0, #20
 8000dea:	f001 f8d8 	bl	8001f9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000dee:	2014      	movs	r0, #20
 8000df0:	f001 f8f1 	bl	8001fd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000df4:	bf00      	nop
 8000df6:	3728      	adds	r7, #40	; 0x28
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	40006400 	.word	0x40006400
 8000e00:	40023800 	.word	0x40023800
 8000e04:	40020400 	.word	0x40020400

08000e08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b08a      	sub	sp, #40	; 0x28
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
 8000e1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a19      	ldr	r2, [pc, #100]	; (8000e8c <HAL_I2C_MspInit+0x84>)
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d12c      	bne.n	8000e84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
 8000e2e:	4b18      	ldr	r3, [pc, #96]	; (8000e90 <HAL_I2C_MspInit+0x88>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	4a17      	ldr	r2, [pc, #92]	; (8000e90 <HAL_I2C_MspInit+0x88>)
 8000e34:	f043 0302 	orr.w	r3, r3, #2
 8000e38:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3a:	4b15      	ldr	r3, [pc, #84]	; (8000e90 <HAL_I2C_MspInit+0x88>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	613b      	str	r3, [r7, #16]
 8000e44:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration    
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e4c:	2312      	movs	r3, #18
 8000e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000e58:	2304      	movs	r3, #4
 8000e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 0314 	add.w	r3, r7, #20
 8000e60:	4619      	mov	r1, r3
 8000e62:	480c      	ldr	r0, [pc, #48]	; (8000e94 <HAL_I2C_MspInit+0x8c>)
 8000e64:	f001 f8d2 	bl	800200c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_I2C_MspInit+0x88>)
 8000e6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_I2C_MspInit+0x88>)
 8000e72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e76:	6413      	str	r3, [r2, #64]	; 0x40
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <HAL_I2C_MspInit+0x88>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	; 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40005800 	.word	0x40005800
 8000e90:	40023800 	.word	0x40023800
 8000e94:	40020400 	.word	0x40020400

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr

08000ea6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <HardFault_Handler+0x4>

08000eac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <MemManage_Handler+0x4>

08000eb2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <BusFault_Handler+0x4>

08000eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <UsageFault_Handler+0x4>

08000ebe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ec2:	bf00      	nop
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000eec:	f000 f8d4 	bl	8001098 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	bd80      	pop	{r7, pc}

08000ef4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8000ef8:	4805      	ldr	r0, [pc, #20]	; (8000f10 <CAN1_RX0_IRQHandler+0x1c>)
 8000efa:	f000 fd42 	bl	8001982 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */
  HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &pRxHeader, CanReceiveData);
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <CAN1_RX0_IRQHandler+0x20>)
 8000f00:	4a05      	ldr	r2, [pc, #20]	; (8000f18 <CAN1_RX0_IRQHandler+0x24>)
 8000f02:	2100      	movs	r1, #0
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <CAN1_RX0_IRQHandler+0x1c>)
 8000f06:	f000 fc04 	bl	8001712 <HAL_CAN_GetRxMessage>

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200001cc 	.word	0x200001cc
 8000f14:	200001f4 	.word	0x200001f4
 8000f18:	200001b0 	.word	0x200001b0

08000f1c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b084      	sub	sp, #16
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f24:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <_sbrk+0x50>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d102      	bne.n	8000f32 <_sbrk+0x16>
		heap_end = &end;
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <_sbrk+0x50>)
 8000f2e:	4a10      	ldr	r2, [pc, #64]	; (8000f70 <_sbrk+0x54>)
 8000f30:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000f32:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <_sbrk+0x50>)
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <_sbrk+0x50>)
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	4413      	add	r3, r2
 8000f40:	466a      	mov	r2, sp
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d907      	bls.n	8000f56 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000f46:	f002 faa3 	bl	8003490 <__errno>
 8000f4a:	4602      	mov	r2, r0
 8000f4c:	230c      	movs	r3, #12
 8000f4e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295
 8000f54:	e006      	b.n	8000f64 <_sbrk+0x48>
	}

	heap_end += incr;
 8000f56:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <_sbrk+0x50>)
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	4a03      	ldr	r2, [pc, #12]	; (8000f6c <_sbrk+0x50>)
 8000f60:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000f62:	68fb      	ldr	r3, [r7, #12]
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	2000008c 	.word	0x2000008c
 8000f70:	20000208 	.word	0x20000208

08000f74 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f78:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <SystemInit+0x28>)
 8000f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f7e:	4a07      	ldr	r2, [pc, #28]	; (8000f9c <SystemInit+0x28>)
 8000f80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <SystemInit+0x28>)
 8000f8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f8e:	609a      	str	r2, [r3, #8]
#endif
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	e000ed00 	.word	0xe000ed00

08000fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fd8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000fa4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000fa6:	e003      	b.n	8000fb0 <LoopCopyDataInit>

08000fa8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000faa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000fac:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000fae:	3104      	adds	r1, #4

08000fb0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000fb0:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000fb2:	4b0c      	ldr	r3, [pc, #48]	; (8000fe4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000fb4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000fb6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000fb8:	d3f6      	bcc.n	8000fa8 <CopyDataInit>
  ldr  r2, =_sbss
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000fbc:	e002      	b.n	8000fc4 <LoopFillZerobss>

08000fbe <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000fbe:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000fc0:	f842 3b04 	str.w	r3, [r2], #4

08000fc4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000fc4:	4b09      	ldr	r3, [pc, #36]	; (8000fec <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000fc6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000fc8:	d3f9      	bcc.n	8000fbe <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000fca:	f7ff ffd3 	bl	8000f74 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fce:	f002 fa65 	bl	800349c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fd2:	f7ff fbf3 	bl	80007bc <main>
  bx  lr    
 8000fd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000fd8:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000fdc:	08003da8 	.word	0x08003da8
  ldr  r0, =_sdata
 8000fe0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000fe4:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 8000fe8:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 8000fec:	20000208 	.word	0x20000208

08000ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ff0:	e7fe      	b.n	8000ff0 <ADC_IRQHandler>
	...

08000ff4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ff8:	4b0e      	ldr	r3, [pc, #56]	; (8001034 <HAL_Init+0x40>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a0d      	ldr	r2, [pc, #52]	; (8001034 <HAL_Init+0x40>)
 8000ffe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001002:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001004:	4b0b      	ldr	r3, [pc, #44]	; (8001034 <HAL_Init+0x40>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <HAL_Init+0x40>)
 800100a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800100e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001010:	4b08      	ldr	r3, [pc, #32]	; (8001034 <HAL_Init+0x40>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a07      	ldr	r2, [pc, #28]	; (8001034 <HAL_Init+0x40>)
 8001016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800101a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800101c:	2003      	movs	r0, #3
 800101e:	f000 ffb3 	bl	8001f88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001022:	2000      	movs	r0, #0
 8001024:	f000 f808 	bl	8001038 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001028:	f7ff fe76 	bl	8000d18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800102c:	2300      	movs	r3, #0
}
 800102e:	4618      	mov	r0, r3
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	40023c00 	.word	0x40023c00

08001038 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001040:	4b12      	ldr	r3, [pc, #72]	; (800108c <HAL_InitTick+0x54>)
 8001042:	681a      	ldr	r2, [r3, #0]
 8001044:	4b12      	ldr	r3, [pc, #72]	; (8001090 <HAL_InitTick+0x58>)
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	4619      	mov	r1, r3
 800104a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001052:	fbb2 f3f3 	udiv	r3, r2, r3
 8001056:	4618      	mov	r0, r3
 8001058:	f000 ffcb 	bl	8001ff2 <HAL_SYSTICK_Config>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001062:	2301      	movs	r3, #1
 8001064:	e00e      	b.n	8001084 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	2b0f      	cmp	r3, #15
 800106a:	d80a      	bhi.n	8001082 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800106c:	2200      	movs	r2, #0
 800106e:	6879      	ldr	r1, [r7, #4]
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f000 ff93 	bl	8001f9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001078:	4a06      	ldr	r2, [pc, #24]	; (8001094 <HAL_InitTick+0x5c>)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000000 	.word	0x20000000
 8001090:	20000008 	.word	0x20000008
 8001094:	20000004 	.word	0x20000004

08001098 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <HAL_IncTick+0x20>)
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	461a      	mov	r2, r3
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_IncTick+0x24>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4413      	add	r3, r2
 80010a8:	4a04      	ldr	r2, [pc, #16]	; (80010bc <HAL_IncTick+0x24>)
 80010aa:	6013      	str	r3, [r2, #0]
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20000008 	.word	0x20000008
 80010bc:	20000200 	.word	0x20000200

080010c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return uwTick;
 80010c4:	4b03      	ldr	r3, [pc, #12]	; (80010d4 <HAL_GetTick+0x14>)
 80010c6:	681b      	ldr	r3, [r3, #0]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	20000200 	.word	0x20000200

080010d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010e0:	f7ff ffee 	bl	80010c0 <HAL_GetTick>
 80010e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f0:	d005      	beq.n	80010fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010f2:	4b09      	ldr	r3, [pc, #36]	; (8001118 <HAL_Delay+0x40>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	461a      	mov	r2, r3
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	4413      	add	r3, r2
 80010fc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010fe:	bf00      	nop
 8001100:	f7ff ffde 	bl	80010c0 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	68bb      	ldr	r3, [r7, #8]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	68fa      	ldr	r2, [r7, #12]
 800110c:	429a      	cmp	r2, r3
 800110e:	d8f7      	bhi.n	8001100 <HAL_Delay+0x28>
  {
  }
}
 8001110:	bf00      	nop
 8001112:	3710      	adds	r7, #16
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000008 	.word	0x20000008

0800111c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d101      	bne.n	800112e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e0ed      	b.n	800130a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2b00      	cmp	r3, #0
 8001138:	d102      	bne.n	8001140 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f7ff fe14 	bl	8000d68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f022 0202 	bic.w	r2, r2, #2
 800114e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001150:	f7ff ffb6 	bl	80010c0 <HAL_GetTick>
 8001154:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001156:	e012      	b.n	800117e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001158:	f7ff ffb2 	bl	80010c0 <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b0a      	cmp	r3, #10
 8001164:	d90b      	bls.n	800117e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2205      	movs	r2, #5
 8001176:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e0c5      	b.n	800130a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d1e5      	bne.n	8001158 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0201 	orr.w	r2, r2, #1
 800119a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800119c:	f7ff ff90 	bl	80010c0 <HAL_GetTick>
 80011a0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011a2:	e012      	b.n	80011ca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80011a4:	f7ff ff8c 	bl	80010c0 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	2b0a      	cmp	r3, #10
 80011b0:	d90b      	bls.n	80011ca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011b6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2205      	movs	r2, #5
 80011c2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e09f      	b.n	800130a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d0e5      	beq.n	80011a4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	7e1b      	ldrb	r3, [r3, #24]
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d108      	bne.n	80011f2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011ee:	601a      	str	r2, [r3, #0]
 80011f0:	e007      	b.n	8001202 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001200:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	7e5b      	ldrb	r3, [r3, #25]
 8001206:	2b01      	cmp	r3, #1
 8001208:	d108      	bne.n	800121c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001218:	601a      	str	r2, [r3, #0]
 800121a:	e007      	b.n	800122c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	681a      	ldr	r2, [r3, #0]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800122a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	7e9b      	ldrb	r3, [r3, #26]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d108      	bne.n	8001246 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f042 0220 	orr.w	r2, r2, #32
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	e007      	b.n	8001256 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 0220 	bic.w	r2, r2, #32
 8001254:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	7edb      	ldrb	r3, [r3, #27]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d108      	bne.n	8001270 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f022 0210 	bic.w	r2, r2, #16
 800126c:	601a      	str	r2, [r3, #0]
 800126e:	e007      	b.n	8001280 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f042 0210 	orr.w	r2, r2, #16
 800127e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	7f1b      	ldrb	r3, [r3, #28]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d108      	bne.n	800129a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 0208 	orr.w	r2, r2, #8
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	e007      	b.n	80012aa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f022 0208 	bic.w	r2, r2, #8
 80012a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7f5b      	ldrb	r3, [r3, #29]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d108      	bne.n	80012c4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f042 0204 	orr.w	r2, r2, #4
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e007      	b.n	80012d4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681a      	ldr	r2, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 0204 	bic.w	r2, r2, #4
 80012d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	691b      	ldr	r3, [r3, #16]
 80012e2:	431a      	orrs	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	695b      	ldr	r3, [r3, #20]
 80012e8:	ea42 0103 	orr.w	r1, r2, r3
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	685b      	ldr	r3, [r3, #4]
 80012f0:	1e5a      	subs	r2, r3, #1
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	430a      	orrs	r2, r1
 80012f8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001314:	b480      	push	{r7}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	f893 3020 	ldrb.w	r3, [r3, #32]
 800132a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800132c:	7cfb      	ldrb	r3, [r7, #19]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d003      	beq.n	800133a <HAL_CAN_ConfigFilter+0x26>
 8001332:	7cfb      	ldrb	r3, [r7, #19]
 8001334:	2b02      	cmp	r3, #2
 8001336:	f040 80be 	bne.w	80014b6 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800133a:	4b65      	ldr	r3, [pc, #404]	; (80014d0 <HAL_CAN_ConfigFilter+0x1bc>)
 800133c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001344:	f043 0201 	orr.w	r2, r3, #1
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001354:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800135e:	697b      	ldr	r3, [r7, #20]
 8001360:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	431a      	orrs	r2, r3
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	695b      	ldr	r3, [r3, #20]
 8001376:	f003 031f 	and.w	r3, r3, #31
 800137a:	2201      	movs	r2, #1
 800137c:	fa02 f303 	lsl.w	r3, r2, r3
 8001380:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	43db      	mvns	r3, r3
 800138c:	401a      	ands	r2, r3
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	69db      	ldr	r3, [r3, #28]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d123      	bne.n	80013e4 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	43db      	mvns	r3, r3
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80013be:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	3248      	adds	r2, #72	; 0x48
 80013c4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80013d8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80013da:	6979      	ldr	r1, [r7, #20]
 80013dc:	3348      	adds	r3, #72	; 0x48
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	440b      	add	r3, r1
 80013e2:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	69db      	ldr	r3, [r3, #28]
 80013e8:	2b01      	cmp	r3, #1
 80013ea:	d122      	bne.n	8001432 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	431a      	orrs	r2, r3
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001408:	683a      	ldr	r2, [r7, #0]
 800140a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800140c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	3248      	adds	r2, #72	; 0x48
 8001412:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	689b      	ldr	r3, [r3, #8]
 800141a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001426:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001428:	6979      	ldr	r1, [r7, #20]
 800142a:	3348      	adds	r3, #72	; 0x48
 800142c:	00db      	lsls	r3, r3, #3
 800142e:	440b      	add	r3, r1
 8001430:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	699b      	ldr	r3, [r3, #24]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d109      	bne.n	800144e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	43db      	mvns	r3, r3
 8001444:	401a      	ands	r2, r3
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800144c:	e007      	b.n	800145e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	431a      	orrs	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d109      	bne.n	800147a <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	43db      	mvns	r3, r3
 8001470:	401a      	ands	r2, r3
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001478:	e007      	b.n	800148a <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	431a      	orrs	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	6a1b      	ldr	r3, [r3, #32]
 800148e:	2b01      	cmp	r3, #1
 8001490:	d107      	bne.n	80014a2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	431a      	orrs	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014a8:	f023 0201 	bic.w	r2, r3, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e006      	b.n	80014c4 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ba:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014c2:	2301      	movs	r3, #1
  }
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	371c      	adds	r7, #28
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	40006400 	.word	0x40006400

080014d4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b084      	sub	sp, #16
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014e2:	b2db      	uxtb	r3, r3
 80014e4:	2b01      	cmp	r3, #1
 80014e6:	d12e      	bne.n	8001546 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2202      	movs	r2, #2
 80014ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f022 0201 	bic.w	r2, r2, #1
 80014fe:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001500:	f7ff fdde 	bl	80010c0 <HAL_GetTick>
 8001504:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001506:	e012      	b.n	800152e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001508:	f7ff fdda 	bl	80010c0 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b0a      	cmp	r3, #10
 8001514:	d90b      	bls.n	800152e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	2205      	movs	r2, #5
 8001526:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e012      	b.n	8001554 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	f003 0301 	and.w	r3, r3, #1
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1e5      	bne.n	8001508 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2200      	movs	r2, #0
 8001540:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	e006      	b.n	8001554 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
  }
}
 8001554:	4618      	mov	r0, r3
 8001556:	3710      	adds	r7, #16
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
 8001568:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001570:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800157a:	7ffb      	ldrb	r3, [r7, #31]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d003      	beq.n	8001588 <HAL_CAN_AddTxMessage+0x2c>
 8001580:	7ffb      	ldrb	r3, [r7, #31]
 8001582:	2b02      	cmp	r3, #2
 8001584:	f040 80b8 	bne.w	80016f8 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10a      	bne.n	80015a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001598:	2b00      	cmp	r3, #0
 800159a:	d105      	bne.n	80015a8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	f000 80a0 	beq.w	80016e8 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80015a8:	69bb      	ldr	r3, [r7, #24]
 80015aa:	0e1b      	lsrs	r3, r3, #24
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b02      	cmp	r3, #2
 80015b6:	d907      	bls.n	80015c8 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015bc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e09e      	b.n	8001706 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80015c8:	2201      	movs	r2, #1
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	409a      	lsls	r2, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80015d2:	68bb      	ldr	r3, [r7, #8]
 80015d4:	689b      	ldr	r3, [r3, #8]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d10d      	bne.n	80015f6 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015da:	68bb      	ldr	r3, [r7, #8]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80015e4:	68f9      	ldr	r1, [r7, #12]
 80015e6:	6809      	ldr	r1, [r1, #0]
 80015e8:	431a      	orrs	r2, r3
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	3318      	adds	r3, #24
 80015ee:	011b      	lsls	r3, r3, #4
 80015f0:	440b      	add	r3, r1
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	e00f      	b.n	8001616 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80015fc:	68bb      	ldr	r3, [r7, #8]
 80015fe:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001600:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001606:	68f9      	ldr	r1, [r7, #12]
 8001608:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800160a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	3318      	adds	r3, #24
 8001610:	011b      	lsls	r3, r3, #4
 8001612:	440b      	add	r3, r1
 8001614:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6819      	ldr	r1, [r3, #0]
 800161a:	68bb      	ldr	r3, [r7, #8]
 800161c:	691a      	ldr	r2, [r3, #16]
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3318      	adds	r3, #24
 8001622:	011b      	lsls	r3, r3, #4
 8001624:	440b      	add	r3, r1
 8001626:	3304      	adds	r3, #4
 8001628:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	7d1b      	ldrb	r3, [r3, #20]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d111      	bne.n	8001656 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	697b      	ldr	r3, [r7, #20]
 8001638:	3318      	adds	r3, #24
 800163a:	011b      	lsls	r3, r3, #4
 800163c:	4413      	add	r3, r2
 800163e:	3304      	adds	r3, #4
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68fa      	ldr	r2, [r7, #12]
 8001644:	6811      	ldr	r1, [r2, #0]
 8001646:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3318      	adds	r3, #24
 800164e:	011b      	lsls	r3, r3, #4
 8001650:	440b      	add	r3, r1
 8001652:	3304      	adds	r3, #4
 8001654:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3307      	adds	r3, #7
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	061a      	lsls	r2, r3, #24
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3306      	adds	r3, #6
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	041b      	lsls	r3, r3, #16
 8001666:	431a      	orrs	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	3305      	adds	r3, #5
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	4313      	orrs	r3, r2
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	3204      	adds	r2, #4
 8001676:	7812      	ldrb	r2, [r2, #0]
 8001678:	4610      	mov	r0, r2
 800167a:	68fa      	ldr	r2, [r7, #12]
 800167c:	6811      	ldr	r1, [r2, #0]
 800167e:	ea43 0200 	orr.w	r2, r3, r0
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	440b      	add	r3, r1
 8001688:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800168c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	3303      	adds	r3, #3
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	061a      	lsls	r2, r3, #24
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	3302      	adds	r3, #2
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	041b      	lsls	r3, r3, #16
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3301      	adds	r3, #1
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	021b      	lsls	r3, r3, #8
 80016a8:	4313      	orrs	r3, r2
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	7812      	ldrb	r2, [r2, #0]
 80016ae:	4610      	mov	r0, r2
 80016b0:	68fa      	ldr	r2, [r7, #12]
 80016b2:	6811      	ldr	r1, [r2, #0]
 80016b4:	ea43 0200 	orr.w	r2, r3, r0
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	011b      	lsls	r3, r3, #4
 80016bc:	440b      	add	r3, r1
 80016be:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80016c2:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	3318      	adds	r3, #24
 80016cc:	011b      	lsls	r3, r3, #4
 80016ce:	4413      	add	r3, r2
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	6811      	ldr	r1, [r2, #0]
 80016d6:	f043 0201 	orr.w	r2, r3, #1
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3318      	adds	r3, #24
 80016de:	011b      	lsls	r3, r3, #4
 80016e0:	440b      	add	r3, r1
 80016e2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80016e4:	2300      	movs	r3, #0
 80016e6:	e00e      	b.n	8001706 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e006      	b.n	8001706 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
  }
}
 8001706:	4618      	mov	r0, r3
 8001708:	3724      	adds	r7, #36	; 0x24
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001712:	b480      	push	{r7}
 8001714:	b087      	sub	sp, #28
 8001716:	af00      	add	r7, sp, #0
 8001718:	60f8      	str	r0, [r7, #12]
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001726:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001728:	7dfb      	ldrb	r3, [r7, #23]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d003      	beq.n	8001736 <HAL_CAN_GetRxMessage+0x24>
 800172e:	7dfb      	ldrb	r3, [r7, #23]
 8001730:	2b02      	cmp	r3, #2
 8001732:	f040 80f3 	bne.w	800191c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d10e      	bne.n	800175a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	68db      	ldr	r3, [r3, #12]
 8001742:	f003 0303 	and.w	r3, r3, #3
 8001746:	2b00      	cmp	r3, #0
 8001748:	d116      	bne.n	8001778 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e0e7      	b.n	800192a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	691b      	ldr	r3, [r3, #16]
 8001760:	f003 0303 	and.w	r3, r3, #3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d107      	bne.n	8001778 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e0d8      	b.n	800192a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68bb      	ldr	r3, [r7, #8]
 800177e:	331b      	adds	r3, #27
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	4413      	add	r3, r2
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0204 	and.w	r2, r3, #4
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d10c      	bne.n	80017b0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	331b      	adds	r3, #27
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	4413      	add	r3, r2
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	0d5b      	lsrs	r3, r3, #21
 80017a6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e00b      	b.n	80017c8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	331b      	adds	r3, #27
 80017b8:	011b      	lsls	r3, r3, #4
 80017ba:	4413      	add	r3, r2
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	08db      	lsrs	r3, r3, #3
 80017c0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	331b      	adds	r3, #27
 80017d0:	011b      	lsls	r3, r3, #4
 80017d2:	4413      	add	r3, r2
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0202 	and.w	r2, r3, #2
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	331b      	adds	r3, #27
 80017e6:	011b      	lsls	r3, r3, #4
 80017e8:	4413      	add	r3, r2
 80017ea:	3304      	adds	r3, #4
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 020f 	and.w	r2, r3, #15
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	68bb      	ldr	r3, [r7, #8]
 80017fc:	331b      	adds	r3, #27
 80017fe:	011b      	lsls	r3, r3, #4
 8001800:	4413      	add	r3, r2
 8001802:	3304      	adds	r3, #4
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	0a1b      	lsrs	r3, r3, #8
 8001808:	b2da      	uxtb	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	68bb      	ldr	r3, [r7, #8]
 8001814:	331b      	adds	r3, #27
 8001816:	011b      	lsls	r3, r3, #4
 8001818:	4413      	add	r3, r2
 800181a:	3304      	adds	r3, #4
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	0c1b      	lsrs	r3, r3, #16
 8001820:	b29a      	uxth	r2, r3
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	011b      	lsls	r3, r3, #4
 800182e:	4413      	add	r3, r2
 8001830:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	b2da      	uxtb	r2, r3
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	4413      	add	r3, r2
 8001846:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	0a1a      	lsrs	r2, r3, #8
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	3301      	adds	r3, #1
 8001852:	b2d2      	uxtb	r2, r2
 8001854:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	011b      	lsls	r3, r3, #4
 800185e:	4413      	add	r3, r2
 8001860:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	0c1a      	lsrs	r2, r3, #16
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	3302      	adds	r3, #2
 800186c:	b2d2      	uxtb	r2, r2
 800186e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	011b      	lsls	r3, r3, #4
 8001878:	4413      	add	r3, r2
 800187a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	0e1a      	lsrs	r2, r3, #24
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	3303      	adds	r3, #3
 8001886:	b2d2      	uxtb	r2, r2
 8001888:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	681a      	ldr	r2, [r3, #0]
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	011b      	lsls	r3, r3, #4
 8001892:	4413      	add	r3, r2
 8001894:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	3304      	adds	r3, #4
 800189e:	b2d2      	uxtb	r2, r2
 80018a0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68bb      	ldr	r3, [r7, #8]
 80018a8:	011b      	lsls	r3, r3, #4
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	0a1a      	lsrs	r2, r3, #8
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	3305      	adds	r3, #5
 80018b8:	b2d2      	uxtb	r2, r2
 80018ba:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	011b      	lsls	r3, r3, #4
 80018c4:	4413      	add	r3, r2
 80018c6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	0c1a      	lsrs	r2, r3, #16
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	3306      	adds	r3, #6
 80018d2:	b2d2      	uxtb	r2, r2
 80018d4:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	011b      	lsls	r3, r3, #4
 80018de:	4413      	add	r3, r2
 80018e0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	0e1a      	lsrs	r2, r3, #24
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	3307      	adds	r3, #7
 80018ec:	b2d2      	uxtb	r2, r2
 80018ee:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d108      	bne.n	8001908 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	68da      	ldr	r2, [r3, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f042 0220 	orr.w	r2, r2, #32
 8001904:	60da      	str	r2, [r3, #12]
 8001906:	e007      	b.n	8001918 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	691a      	ldr	r2, [r3, #16]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0220 	orr.w	r2, r2, #32
 8001916:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	e006      	b.n	800192a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001920:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
  }
}
 800192a:	4618      	mov	r0, r3
 800192c:	371c      	adds	r7, #28
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001936:	b480      	push	{r7}
 8001938:	b085      	sub	sp, #20
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001946:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d002      	beq.n	8001954 <HAL_CAN_ActivateNotification+0x1e>
 800194e:	7bfb      	ldrb	r3, [r7, #15]
 8001950:	2b02      	cmp	r3, #2
 8001952:	d109      	bne.n	8001968 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	6959      	ldr	r1, [r3, #20]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001964:	2300      	movs	r3, #0
 8001966:	e006      	b.n	8001976 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800196c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
  }
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b08a      	sub	sp, #40	; 0x28
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	695b      	ldr	r3, [r3, #20]
 8001994:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80019be:	6a3b      	ldr	r3, [r7, #32]
 80019c0:	f003 0301 	and.w	r3, r3, #1
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d07c      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	f003 0301 	and.w	r3, r3, #1
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d023      	beq.n	8001a1a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2201      	movs	r2, #1
 80019d8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d003      	beq.n	80019ec <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f000 f97d 	bl	8001ce4 <HAL_CAN_TxMailbox0CompleteCallback>
 80019ea:	e016      	b.n	8001a1a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	f003 0304 	and.w	r3, r3, #4
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d004      	beq.n	8001a00 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80019f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
 80019fe:	e00c      	b.n	8001a1a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	f003 0308 	and.w	r3, r3, #8
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d004      	beq.n	8001a14 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
 8001a12:	e002      	b.n	8001a1a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	f000 f983 	bl	8001d20 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d024      	beq.n	8001a6e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a2c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d003      	beq.n	8001a40 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001a38:	6878      	ldr	r0, [r7, #4]
 8001a3a:	f000 f95d 	bl	8001cf8 <HAL_CAN_TxMailbox1CompleteCallback>
 8001a3e:	e016      	b.n	8001a6e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d004      	beq.n	8001a54 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
 8001a52:	e00c      	b.n	8001a6e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d004      	beq.n	8001a68 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a64:	627b      	str	r3, [r7, #36]	; 0x24
 8001a66:	e002      	b.n	8001a6e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f000 f963 	bl	8001d34 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8001a6e:	69bb      	ldr	r3, [r7, #24]
 8001a70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d024      	beq.n	8001ac2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001a80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8001a8c:	6878      	ldr	r0, [r7, #4]
 8001a8e:	f000 f93d 	bl	8001d0c <HAL_CAN_TxMailbox2CompleteCallback>
 8001a92:	e016      	b.n	8001ac2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8001a94:	69bb      	ldr	r3, [r7, #24]
 8001a96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d004      	beq.n	8001aa8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8001aa6:	e00c      	b.n	8001ac2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8001ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ab8:	627b      	str	r3, [r7, #36]	; 0x24
 8001aba:	e002      	b.n	8001ac2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8001abc:	6878      	ldr	r0, [r7, #4]
 8001abe:	f000 f943 	bl	8001d48 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d00c      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 0310 	and.w	r3, r3, #16
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d007      	beq.n	8001ae6 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2210      	movs	r2, #16
 8001ae4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8001ae6:	6a3b      	ldr	r3, [r7, #32]
 8001ae8:	f003 0304 	and.w	r3, r3, #4
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d00b      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f003 0308 	and.w	r3, r3, #8
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d006      	beq.n	8001b08 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	2208      	movs	r2, #8
 8001b00:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f934 	bl	8001d70 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8001b08:	6a3b      	ldr	r3, [r7, #32]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d009      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	f003 0303 	and.w	r3, r3, #3
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f91b 	bl	8001d5c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00c      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	f003 0310 	and.w	r3, r3, #16
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d007      	beq.n	8001b4a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	2210      	movs	r2, #16
 8001b48:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	f003 0320 	and.w	r3, r3, #32
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d00b      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8001b54:	693b      	ldr	r3, [r7, #16]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d006      	beq.n	8001b6c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	2208      	movs	r2, #8
 8001b64:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f916 	bl	8001d98 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8001b6c:	6a3b      	ldr	r3, [r7, #32]
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d009      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d002      	beq.n	8001b8a <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f000 f8fd 	bl	8001d84 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8001b8a:	6a3b      	ldr	r3, [r7, #32]
 8001b8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d00b      	beq.n	8001bac <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 0310 	and.w	r3, r3, #16
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d006      	beq.n	8001bac <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2210      	movs	r2, #16
 8001ba4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8001ba6:	6878      	ldr	r0, [r7, #4]
 8001ba8:	f000 f900 	bl	8001dac <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8001bac:	6a3b      	ldr	r3, [r7, #32]
 8001bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f003 0308 	and.w	r3, r3, #8
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d006      	beq.n	8001bce <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2208      	movs	r2, #8
 8001bc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f8f9 	bl	8001dc0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8001bce:	6a3b      	ldr	r3, [r7, #32]
 8001bd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d075      	beq.n	8001cc4 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0304 	and.w	r3, r3, #4
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d06c      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001be2:	6a3b      	ldr	r3, [r7, #32]
 8001be4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d008      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	f043 0301 	orr.w	r3, r3, #1
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001bfe:	6a3b      	ldr	r3, [r7, #32]
 8001c00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d008      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d003      	beq.n	8001c1a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8001c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c14:	f043 0302 	orr.w	r3, r3, #2
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c1a:	6a3b      	ldr	r3, [r7, #32]
 8001c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d008      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d003      	beq.n	8001c36 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c30:	f043 0304 	orr.w	r3, r3, #4
 8001c34:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c36:	6a3b      	ldr	r3, [r7, #32]
 8001c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d03d      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d038      	beq.n	8001cbc <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001c50:	2b30      	cmp	r3, #48	; 0x30
 8001c52:	d017      	beq.n	8001c84 <HAL_CAN_IRQHandler+0x302>
 8001c54:	2b30      	cmp	r3, #48	; 0x30
 8001c56:	d804      	bhi.n	8001c62 <HAL_CAN_IRQHandler+0x2e0>
 8001c58:	2b10      	cmp	r3, #16
 8001c5a:	d009      	beq.n	8001c70 <HAL_CAN_IRQHandler+0x2ee>
 8001c5c:	2b20      	cmp	r3, #32
 8001c5e:	d00c      	beq.n	8001c7a <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8001c60:	e024      	b.n	8001cac <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8001c62:	2b50      	cmp	r3, #80	; 0x50
 8001c64:	d018      	beq.n	8001c98 <HAL_CAN_IRQHandler+0x316>
 8001c66:	2b60      	cmp	r3, #96	; 0x60
 8001c68:	d01b      	beq.n	8001ca2 <HAL_CAN_IRQHandler+0x320>
 8001c6a:	2b40      	cmp	r3, #64	; 0x40
 8001c6c:	d00f      	beq.n	8001c8e <HAL_CAN_IRQHandler+0x30c>
            break;
 8001c6e:	e01d      	b.n	8001cac <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	f043 0308 	orr.w	r3, r3, #8
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c78:	e018      	b.n	8001cac <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 8001c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7c:	f043 0310 	orr.w	r3, r3, #16
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c82:	e013      	b.n	8001cac <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8001c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c86:	f043 0320 	orr.w	r3, r3, #32
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c8c:	e00e      	b.n	8001cac <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c94:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001c96:	e009      	b.n	8001cac <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 8001c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c9e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001ca0:	e004      	b.n	8001cac <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8001caa:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	699a      	ldr	r2, [r3, #24]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8001cba:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2204      	movs	r2, #4
 8001cc2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8001cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d008      	beq.n	8001cdc <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f000 f87c 	bl	8001dd4 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr

08001cf8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8001d00:	bf00      	nop
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8001d14:	bf00      	nop
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8001d28:	bf00      	nop
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr

08001d48 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8001d50:	bf00      	nop
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr

08001d5c <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b083      	sub	sp, #12
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8001d78:	bf00      	nop
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8001dc8:	bf00      	nop
 8001dca:	370c      	adds	r7, #12
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd2:	4770      	bx	lr

08001dd4 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8001ddc:	bf00      	nop
 8001dde:	370c      	adds	r7, #12
 8001de0:	46bd      	mov	sp, r7
 8001de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de6:	4770      	bx	lr

08001de8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f003 0307 	and.w	r3, r3, #7
 8001df6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001df8:	4b0c      	ldr	r3, [pc, #48]	; (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e04:	4013      	ands	r3, r2
 8001e06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e1a:	4a04      	ldr	r2, [pc, #16]	; (8001e2c <__NVIC_SetPriorityGrouping+0x44>)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	60d3      	str	r3, [r2, #12]
}
 8001e20:	bf00      	nop
 8001e22:	3714      	adds	r7, #20
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	e000ed00 	.word	0xe000ed00

08001e30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <__NVIC_GetPriorityGrouping+0x18>)
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	0a1b      	lsrs	r3, r3, #8
 8001e3a:	f003 0307 	and.w	r3, r3, #7
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr
 8001e48:	e000ed00 	.word	0xe000ed00

08001e4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	4603      	mov	r3, r0
 8001e54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	db0b      	blt.n	8001e76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e5e:	79fb      	ldrb	r3, [r7, #7]
 8001e60:	f003 021f 	and.w	r2, r3, #31
 8001e64:	4907      	ldr	r1, [pc, #28]	; (8001e84 <__NVIC_EnableIRQ+0x38>)
 8001e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e6a:	095b      	lsrs	r3, r3, #5
 8001e6c:	2001      	movs	r0, #1
 8001e6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001e72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e76:	bf00      	nop
 8001e78:	370c      	adds	r7, #12
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	e000e100 	.word	0xe000e100

08001e88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b083      	sub	sp, #12
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	6039      	str	r1, [r7, #0]
 8001e92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	db0a      	blt.n	8001eb2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	490c      	ldr	r1, [pc, #48]	; (8001ed4 <__NVIC_SetPriority+0x4c>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001eb0:	e00a      	b.n	8001ec8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	4908      	ldr	r1, [pc, #32]	; (8001ed8 <__NVIC_SetPriority+0x50>)
 8001eb8:	79fb      	ldrb	r3, [r7, #7]
 8001eba:	f003 030f 	and.w	r3, r3, #15
 8001ebe:	3b04      	subs	r3, #4
 8001ec0:	0112      	lsls	r2, r2, #4
 8001ec2:	b2d2      	uxtb	r2, r2
 8001ec4:	440b      	add	r3, r1
 8001ec6:	761a      	strb	r2, [r3, #24]
}
 8001ec8:	bf00      	nop
 8001eca:	370c      	adds	r7, #12
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed2:	4770      	bx	lr
 8001ed4:	e000e100 	.word	0xe000e100
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	60f8      	str	r0, [r7, #12]
 8001ee4:	60b9      	str	r1, [r7, #8]
 8001ee6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	f1c3 0307 	rsb	r3, r3, #7
 8001ef6:	2b04      	cmp	r3, #4
 8001ef8:	bf28      	it	cs
 8001efa:	2304      	movcs	r3, #4
 8001efc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	3304      	adds	r3, #4
 8001f02:	2b06      	cmp	r3, #6
 8001f04:	d902      	bls.n	8001f0c <NVIC_EncodePriority+0x30>
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	3b03      	subs	r3, #3
 8001f0a:	e000      	b.n	8001f0e <NVIC_EncodePriority+0x32>
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	f04f 32ff 	mov.w	r2, #4294967295
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	401a      	ands	r2, r3
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f24:	f04f 31ff 	mov.w	r1, #4294967295
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f2e:	43d9      	mvns	r1, r3
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f34:	4313      	orrs	r3, r2
         );
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3724      	adds	r7, #36	; 0x24
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
	...

08001f44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b082      	sub	sp, #8
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f54:	d301      	bcc.n	8001f5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f56:	2301      	movs	r3, #1
 8001f58:	e00f      	b.n	8001f7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f5a:	4a0a      	ldr	r2, [pc, #40]	; (8001f84 <SysTick_Config+0x40>)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f62:	210f      	movs	r1, #15
 8001f64:	f04f 30ff 	mov.w	r0, #4294967295
 8001f68:	f7ff ff8e 	bl	8001e88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f6c:	4b05      	ldr	r3, [pc, #20]	; (8001f84 <SysTick_Config+0x40>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f72:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <SysTick_Config+0x40>)
 8001f74:	2207      	movs	r2, #7
 8001f76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3708      	adds	r7, #8
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	e000e010 	.word	0xe000e010

08001f88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f7ff ff29 	bl	8001de8 <__NVIC_SetPriorityGrouping>
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b086      	sub	sp, #24
 8001fa2:	af00      	add	r7, sp, #0
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	607a      	str	r2, [r7, #4]
 8001faa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001fac:	2300      	movs	r3, #0
 8001fae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fb0:	f7ff ff3e 	bl	8001e30 <__NVIC_GetPriorityGrouping>
 8001fb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	68b9      	ldr	r1, [r7, #8]
 8001fba:	6978      	ldr	r0, [r7, #20]
 8001fbc:	f7ff ff8e 	bl	8001edc <NVIC_EncodePriority>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc6:	4611      	mov	r1, r2
 8001fc8:	4618      	mov	r0, r3
 8001fca:	f7ff ff5d 	bl	8001e88 <__NVIC_SetPriority>
}
 8001fce:	bf00      	nop
 8001fd0:	3718      	adds	r7, #24
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}

08001fd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fd6:	b580      	push	{r7, lr}
 8001fd8:	b082      	sub	sp, #8
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	4603      	mov	r3, r0
 8001fde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff ff31 	bl	8001e4c <__NVIC_EnableIRQ>
}
 8001fea:	bf00      	nop
 8001fec:	3708      	adds	r7, #8
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}

08001ff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b082      	sub	sp, #8
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff ffa2 	bl	8001f44 <SysTick_Config>
 8002000:	4603      	mov	r3, r0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3708      	adds	r7, #8
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800200c:	b480      	push	{r7}
 800200e:	b089      	sub	sp, #36	; 0x24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002016:	2300      	movs	r3, #0
 8002018:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800201a:	2300      	movs	r3, #0
 800201c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800201e:	2300      	movs	r3, #0
 8002020:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002022:	2300      	movs	r3, #0
 8002024:	61fb      	str	r3, [r7, #28]
 8002026:	e16b      	b.n	8002300 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002028:	2201      	movs	r2, #1
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800203c:	693a      	ldr	r2, [r7, #16]
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	429a      	cmp	r2, r3
 8002042:	f040 815a 	bne.w	80022fa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d00b      	beq.n	8002066 <HAL_GPIO_Init+0x5a>
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	2b02      	cmp	r3, #2
 8002054:	d007      	beq.n	8002066 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800205a:	2b11      	cmp	r3, #17
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b12      	cmp	r3, #18
 8002064:	d130      	bne.n	80020c8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	2203      	movs	r2, #3
 8002072:	fa02 f303 	lsl.w	r3, r2, r3
 8002076:	43db      	mvns	r3, r3
 8002078:	69ba      	ldr	r2, [r7, #24]
 800207a:	4013      	ands	r3, r2
 800207c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	68da      	ldr	r2, [r3, #12]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800209c:	2201      	movs	r2, #1
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	43db      	mvns	r3, r3
 80020a6:	69ba      	ldr	r2, [r7, #24]
 80020a8:	4013      	ands	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	091b      	lsrs	r3, r3, #4
 80020b2:	f003 0201 	and.w	r2, r3, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	2203      	movs	r2, #3
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	43db      	mvns	r3, r3
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	4013      	ands	r3, r2
 80020de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	689a      	ldr	r2, [r3, #8]
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	005b      	lsls	r3, r3, #1
 80020e8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ec:	69ba      	ldr	r2, [r7, #24]
 80020ee:	4313      	orrs	r3, r2
 80020f0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	69ba      	ldr	r2, [r7, #24]
 80020f6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d003      	beq.n	8002108 <HAL_GPIO_Init+0xfc>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b12      	cmp	r3, #18
 8002106:	d123      	bne.n	8002150 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	08da      	lsrs	r2, r3, #3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	3208      	adds	r2, #8
 8002110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002114:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	220f      	movs	r2, #15
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	691a      	ldr	r2, [r3, #16]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	f003 0307 	and.w	r3, r3, #7
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	69ba      	ldr	r2, [r7, #24]
 800213e:	4313      	orrs	r3, r2
 8002140:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	08da      	lsrs	r2, r3, #3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	3208      	adds	r2, #8
 800214a:	69b9      	ldr	r1, [r7, #24]
 800214c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	2203      	movs	r2, #3
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4013      	ands	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f003 0203 	and.w	r2, r3, #3
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	69ba      	ldr	r2, [r7, #24]
 800217a:	4313      	orrs	r3, r2
 800217c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	f000 80b4 	beq.w	80022fa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b5f      	ldr	r3, [pc, #380]	; (8002314 <HAL_GPIO_Init+0x308>)
 8002198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219a:	4a5e      	ldr	r2, [pc, #376]	; (8002314 <HAL_GPIO_Init+0x308>)
 800219c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021a0:	6453      	str	r3, [r2, #68]	; 0x44
 80021a2:	4b5c      	ldr	r3, [pc, #368]	; (8002314 <HAL_GPIO_Init+0x308>)
 80021a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ae:	4a5a      	ldr	r2, [pc, #360]	; (8002318 <HAL_GPIO_Init+0x30c>)
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	3302      	adds	r3, #2
 80021b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	220f      	movs	r2, #15
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	4013      	ands	r3, r2
 80021d0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a51      	ldr	r2, [pc, #324]	; (800231c <HAL_GPIO_Init+0x310>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d02b      	beq.n	8002232 <HAL_GPIO_Init+0x226>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a50      	ldr	r2, [pc, #320]	; (8002320 <HAL_GPIO_Init+0x314>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d025      	beq.n	800222e <HAL_GPIO_Init+0x222>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4f      	ldr	r2, [pc, #316]	; (8002324 <HAL_GPIO_Init+0x318>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d01f      	beq.n	800222a <HAL_GPIO_Init+0x21e>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4e      	ldr	r2, [pc, #312]	; (8002328 <HAL_GPIO_Init+0x31c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d019      	beq.n	8002226 <HAL_GPIO_Init+0x21a>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4d      	ldr	r2, [pc, #308]	; (800232c <HAL_GPIO_Init+0x320>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d013      	beq.n	8002222 <HAL_GPIO_Init+0x216>
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a4c      	ldr	r2, [pc, #304]	; (8002330 <HAL_GPIO_Init+0x324>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d00d      	beq.n	800221e <HAL_GPIO_Init+0x212>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a4b      	ldr	r2, [pc, #300]	; (8002334 <HAL_GPIO_Init+0x328>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d007      	beq.n	800221a <HAL_GPIO_Init+0x20e>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	4a4a      	ldr	r2, [pc, #296]	; (8002338 <HAL_GPIO_Init+0x32c>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d101      	bne.n	8002216 <HAL_GPIO_Init+0x20a>
 8002212:	2307      	movs	r3, #7
 8002214:	e00e      	b.n	8002234 <HAL_GPIO_Init+0x228>
 8002216:	2308      	movs	r3, #8
 8002218:	e00c      	b.n	8002234 <HAL_GPIO_Init+0x228>
 800221a:	2306      	movs	r3, #6
 800221c:	e00a      	b.n	8002234 <HAL_GPIO_Init+0x228>
 800221e:	2305      	movs	r3, #5
 8002220:	e008      	b.n	8002234 <HAL_GPIO_Init+0x228>
 8002222:	2304      	movs	r3, #4
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x228>
 8002226:	2303      	movs	r3, #3
 8002228:	e004      	b.n	8002234 <HAL_GPIO_Init+0x228>
 800222a:	2302      	movs	r3, #2
 800222c:	e002      	b.n	8002234 <HAL_GPIO_Init+0x228>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_GPIO_Init+0x228>
 8002232:	2300      	movs	r3, #0
 8002234:	69fa      	ldr	r2, [r7, #28]
 8002236:	f002 0203 	and.w	r2, r2, #3
 800223a:	0092      	lsls	r2, r2, #2
 800223c:	4093      	lsls	r3, r2
 800223e:	69ba      	ldr	r2, [r7, #24]
 8002240:	4313      	orrs	r3, r2
 8002242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002244:	4934      	ldr	r1, [pc, #208]	; (8002318 <HAL_GPIO_Init+0x30c>)
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	089b      	lsrs	r3, r3, #2
 800224a:	3302      	adds	r3, #2
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002252:	4b3a      	ldr	r3, [pc, #232]	; (800233c <HAL_GPIO_Init+0x330>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002276:	4a31      	ldr	r2, [pc, #196]	; (800233c <HAL_GPIO_Init+0x330>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800227c:	4b2f      	ldr	r3, [pc, #188]	; (800233c <HAL_GPIO_Init+0x330>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022a0:	4a26      	ldr	r2, [pc, #152]	; (800233c <HAL_GPIO_Init+0x330>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a6:	4b25      	ldr	r3, [pc, #148]	; (800233c <HAL_GPIO_Init+0x330>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ca:	4a1c      	ldr	r2, [pc, #112]	; (800233c <HAL_GPIO_Init+0x330>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d0:	4b1a      	ldr	r3, [pc, #104]	; (800233c <HAL_GPIO_Init+0x330>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f4:	4a11      	ldr	r2, [pc, #68]	; (800233c <HAL_GPIO_Init+0x330>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	3301      	adds	r3, #1
 80022fe:	61fb      	str	r3, [r7, #28]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	2b0f      	cmp	r3, #15
 8002304:	f67f ae90 	bls.w	8002028 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002308:	bf00      	nop
 800230a:	3724      	adds	r7, #36	; 0x24
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr
 8002314:	40023800 	.word	0x40023800
 8002318:	40013800 	.word	0x40013800
 800231c:	40020000 	.word	0x40020000
 8002320:	40020400 	.word	0x40020400
 8002324:	40020800 	.word	0x40020800
 8002328:	40020c00 	.word	0x40020c00
 800232c:	40021000 	.word	0x40021000
 8002330:	40021400 	.word	0x40021400
 8002334:	40021800 	.word	0x40021800
 8002338:	40021c00 	.word	0x40021c00
 800233c:	40013c00 	.word	0x40013c00

08002340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
 800234c:	4613      	mov	r3, r2
 800234e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002350:	787b      	ldrb	r3, [r7, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800235c:	e003      	b.n	8002366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	041a      	lsls	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	619a      	str	r2, [r3, #24]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
	...

08002374 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e11f      	b.n	80025c6 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238c:	b2db      	uxtb	r3, r3
 800238e:	2b00      	cmp	r3, #0
 8002390:	d106      	bne.n	80023a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7fe fd34 	bl	8000e08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	2224      	movs	r2, #36	; 0x24
 80023a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681a      	ldr	r2, [r3, #0]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f022 0201 	bic.w	r2, r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023d8:	f001 f846 	bl	8003468 <HAL_RCC_GetPCLK1Freq>
 80023dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4a7b      	ldr	r2, [pc, #492]	; (80025d0 <HAL_I2C_Init+0x25c>)
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d807      	bhi.n	80023f8 <HAL_I2C_Init+0x84>
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	4a7a      	ldr	r2, [pc, #488]	; (80025d4 <HAL_I2C_Init+0x260>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	bf94      	ite	ls
 80023f0:	2301      	movls	r3, #1
 80023f2:	2300      	movhi	r3, #0
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	e006      	b.n	8002406 <HAL_I2C_Init+0x92>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	4a77      	ldr	r2, [pc, #476]	; (80025d8 <HAL_I2C_Init+0x264>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	bf94      	ite	ls
 8002400:	2301      	movls	r3, #1
 8002402:	2300      	movhi	r3, #0
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e0db      	b.n	80025c6 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	4a72      	ldr	r2, [pc, #456]	; (80025dc <HAL_I2C_Init+0x268>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	0c9b      	lsrs	r3, r3, #18
 8002418:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	430a      	orrs	r2, r1
 800242c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	4a64      	ldr	r2, [pc, #400]	; (80025d0 <HAL_I2C_Init+0x25c>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d802      	bhi.n	8002448 <HAL_I2C_Init+0xd4>
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	3301      	adds	r3, #1
 8002446:	e009      	b.n	800245c <HAL_I2C_Init+0xe8>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	4a63      	ldr	r2, [pc, #396]	; (80025e0 <HAL_I2C_Init+0x26c>)
 8002454:	fba2 2303 	umull	r2, r3, r2, r3
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	3301      	adds	r3, #1
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	430b      	orrs	r3, r1
 8002462:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	69db      	ldr	r3, [r3, #28]
 800246a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800246e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4956      	ldr	r1, [pc, #344]	; (80025d0 <HAL_I2C_Init+0x25c>)
 8002478:	428b      	cmp	r3, r1
 800247a:	d80d      	bhi.n	8002498 <HAL_I2C_Init+0x124>
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1e59      	subs	r1, r3, #1
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	fbb1 f3f3 	udiv	r3, r1, r3
 800248a:	3301      	adds	r3, #1
 800248c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002490:	2b04      	cmp	r3, #4
 8002492:	bf38      	it	cc
 8002494:	2304      	movcc	r3, #4
 8002496:	e04f      	b.n	8002538 <HAL_I2C_Init+0x1c4>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d111      	bne.n	80024c4 <HAL_I2C_Init+0x150>
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	1e58      	subs	r0, r3, #1
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6859      	ldr	r1, [r3, #4]
 80024a8:	460b      	mov	r3, r1
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	440b      	add	r3, r1
 80024ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80024b2:	3301      	adds	r3, #1
 80024b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	bf0c      	ite	eq
 80024bc:	2301      	moveq	r3, #1
 80024be:	2300      	movne	r3, #0
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	e012      	b.n	80024ea <HAL_I2C_Init+0x176>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1e58      	subs	r0, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6859      	ldr	r1, [r3, #4]
 80024cc:	460b      	mov	r3, r1
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	440b      	add	r3, r1
 80024d2:	0099      	lsls	r1, r3, #2
 80024d4:	440b      	add	r3, r1
 80024d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024da:	3301      	adds	r3, #1
 80024dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	bf0c      	ite	eq
 80024e4:	2301      	moveq	r3, #1
 80024e6:	2300      	movne	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Init+0x17e>
 80024ee:	2301      	movs	r3, #1
 80024f0:	e022      	b.n	8002538 <HAL_I2C_Init+0x1c4>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d10e      	bne.n	8002518 <HAL_I2C_Init+0x1a4>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	1e58      	subs	r0, r3, #1
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6859      	ldr	r1, [r3, #4]
 8002502:	460b      	mov	r3, r1
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	440b      	add	r3, r1
 8002508:	fbb0 f3f3 	udiv	r3, r0, r3
 800250c:	3301      	adds	r3, #1
 800250e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002516:	e00f      	b.n	8002538 <HAL_I2C_Init+0x1c4>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	1e58      	subs	r0, r3, #1
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6859      	ldr	r1, [r3, #4]
 8002520:	460b      	mov	r3, r1
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	0099      	lsls	r1, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	fbb0 f3f3 	udiv	r3, r0, r3
 800252e:	3301      	adds	r3, #1
 8002530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002538:	6879      	ldr	r1, [r7, #4]
 800253a:	6809      	ldr	r1, [r1, #0]
 800253c:	4313      	orrs	r3, r2
 800253e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69da      	ldr	r2, [r3, #28]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
 8002552:	431a      	orrs	r2, r3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	430a      	orrs	r2, r1
 800255a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002566:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800256a:	687a      	ldr	r2, [r7, #4]
 800256c:	6911      	ldr	r1, [r2, #16]
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	68d2      	ldr	r2, [r2, #12]
 8002572:	4311      	orrs	r1, r2
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	6812      	ldr	r2, [r2, #0]
 8002578:	430b      	orrs	r3, r1
 800257a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	695a      	ldr	r2, [r3, #20]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	431a      	orrs	r2, r3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	430a      	orrs	r2, r1
 8002596:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681a      	ldr	r2, [r3, #0]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f042 0201 	orr.w	r2, r2, #1
 80025a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2220      	movs	r2, #32
 80025b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	000186a0 	.word	0x000186a0
 80025d4:	001e847f 	.word	0x001e847f
 80025d8:	003d08ff 	.word	0x003d08ff
 80025dc:	431bde83 	.word	0x431bde83
 80025e0:	10624dd3 	.word	0x10624dd3

080025e4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b088      	sub	sp, #32
 80025e8:	af02      	add	r7, sp, #8
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	607a      	str	r2, [r7, #4]
 80025ee:	461a      	mov	r2, r3
 80025f0:	460b      	mov	r3, r1
 80025f2:	817b      	strh	r3, [r7, #10]
 80025f4:	4613      	mov	r3, r2
 80025f6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80025f8:	f7fe fd62 	bl	80010c0 <HAL_GetTick>
 80025fc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b20      	cmp	r3, #32
 8002608:	f040 80e0 	bne.w	80027cc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	2319      	movs	r3, #25
 8002612:	2201      	movs	r2, #1
 8002614:	4970      	ldr	r1, [pc, #448]	; (80027d8 <HAL_I2C_Master_Transmit+0x1f4>)
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f964 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002622:	2302      	movs	r3, #2
 8002624:	e0d3      	b.n	80027ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_I2C_Master_Transmit+0x50>
 8002630:	2302      	movs	r3, #2
 8002632:	e0cc      	b.n	80027ce <HAL_I2C_Master_Transmit+0x1ea>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b01      	cmp	r3, #1
 8002648:	d007      	beq.n	800265a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 0201 	orr.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002668:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	2221      	movs	r2, #33	; 0x21
 800266e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2210      	movs	r2, #16
 8002676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	893a      	ldrh	r2, [r7, #8]
 800268a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002690:	b29a      	uxth	r2, r3
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	4a50      	ldr	r2, [pc, #320]	; (80027dc <HAL_I2C_Master_Transmit+0x1f8>)
 800269a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800269c:	8979      	ldrh	r1, [r7, #10]
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	6a3a      	ldr	r2, [r7, #32]
 80026a2:	68f8      	ldr	r0, [r7, #12]
 80026a4:	f000 f89c 	bl	80027e0 <I2C_MasterRequestWrite>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e08d      	b.n	80027ce <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026b2:	2300      	movs	r3, #0
 80026b4:	613b      	str	r3, [r7, #16]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	613b      	str	r3, [r7, #16]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	699b      	ldr	r3, [r3, #24]
 80026c4:	613b      	str	r3, [r7, #16]
 80026c6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80026c8:	e066      	b.n	8002798 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026ca:	697a      	ldr	r2, [r7, #20]
 80026cc:	6a39      	ldr	r1, [r7, #32]
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 f9de 	bl	8002a90 <I2C_WaitOnTXEFlagUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00d      	beq.n	80026f6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	2b04      	cmp	r3, #4
 80026e0:	d107      	bne.n	80026f2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026f0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e06b      	b.n	80027ce <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fa:	781a      	ldrb	r2, [r3, #0]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002706:	1c5a      	adds	r2, r3, #1
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002710:	b29b      	uxth	r3, r3
 8002712:	3b01      	subs	r3, #1
 8002714:	b29a      	uxth	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271e:	3b01      	subs	r3, #1
 8002720:	b29a      	uxth	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	695b      	ldr	r3, [r3, #20]
 800272c:	f003 0304 	and.w	r3, r3, #4
 8002730:	2b04      	cmp	r3, #4
 8002732:	d11b      	bne.n	800276c <HAL_I2C_Master_Transmit+0x188>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002738:	2b00      	cmp	r3, #0
 800273a:	d017      	beq.n	800276c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002740:	781a      	ldrb	r2, [r3, #0]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274c:	1c5a      	adds	r2, r3, #1
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002756:	b29b      	uxth	r3, r3
 8002758:	3b01      	subs	r3, #1
 800275a:	b29a      	uxth	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	6a39      	ldr	r1, [r7, #32]
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f000 f9ce 	bl	8002b12 <I2C_WaitOnBTFFlagUntilTimeout>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00d      	beq.n	8002798 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	2b04      	cmp	r3, #4
 8002782:	d107      	bne.n	8002794 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002792:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e01a      	b.n	80027ce <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800279c:	2b00      	cmp	r3, #0
 800279e:	d194      	bne.n	80026ca <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2220      	movs	r2, #32
 80027b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	2200      	movs	r2, #0
 80027bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	2200      	movs	r2, #0
 80027c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	e000      	b.n	80027ce <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80027cc:	2302      	movs	r3, #2
  }
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	00100002 	.word	0x00100002
 80027dc:	ffff0000 	.word	0xffff0000

080027e0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b088      	sub	sp, #32
 80027e4:	af02      	add	r7, sp, #8
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	607a      	str	r2, [r7, #4]
 80027ea:	603b      	str	r3, [r7, #0]
 80027ec:	460b      	mov	r3, r1
 80027ee:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b08      	cmp	r3, #8
 80027fa:	d006      	beq.n	800280a <I2C_MasterRequestWrite+0x2a>
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2b01      	cmp	r3, #1
 8002800:	d003      	beq.n	800280a <I2C_MasterRequestWrite+0x2a>
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002808:	d108      	bne.n	800281c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002818:	601a      	str	r2, [r3, #0]
 800281a:	e00b      	b.n	8002834 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002820:	2b12      	cmp	r3, #18
 8002822:	d107      	bne.n	8002834 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002832:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002840:	68f8      	ldr	r0, [r7, #12]
 8002842:	f000 f84f 	bl	80028e4 <I2C_WaitOnFlagUntilTimeout>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00d      	beq.n	8002868 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800285a:	d103      	bne.n	8002864 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002862:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e035      	b.n	80028d4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002870:	d108      	bne.n	8002884 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002872:	897b      	ldrh	r3, [r7, #10]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	461a      	mov	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002880:	611a      	str	r2, [r3, #16]
 8002882:	e01b      	b.n	80028bc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002884:	897b      	ldrh	r3, [r7, #10]
 8002886:	11db      	asrs	r3, r3, #7
 8002888:	b2db      	uxtb	r3, r3
 800288a:	f003 0306 	and.w	r3, r3, #6
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f063 030f 	orn	r3, r3, #15
 8002894:	b2da      	uxtb	r2, r3
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	490e      	ldr	r1, [pc, #56]	; (80028dc <I2C_MasterRequestWrite+0xfc>)
 80028a2:	68f8      	ldr	r0, [r7, #12]
 80028a4:	f000 f875 	bl	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028a8:	4603      	mov	r3, r0
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d001      	beq.n	80028b2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	e010      	b.n	80028d4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80028b2:	897b      	ldrh	r3, [r7, #10]
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	4907      	ldr	r1, [pc, #28]	; (80028e0 <I2C_MasterRequestWrite+0x100>)
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 f865 	bl	8002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3718      	adds	r7, #24
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	00010008 	.word	0x00010008
 80028e0:	00010002 	.word	0x00010002

080028e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	603b      	str	r3, [r7, #0]
 80028f0:	4613      	mov	r3, r2
 80028f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028f4:	e025      	b.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028fc:	d021      	beq.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028fe:	f7fe fbdf 	bl	80010c0 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	69bb      	ldr	r3, [r7, #24]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d302      	bcc.n	8002914 <I2C_WaitOnFlagUntilTimeout+0x30>
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d116      	bne.n	8002942 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2220      	movs	r2, #32
 800291e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	f043 0220 	orr.w	r2, r3, #32
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e023      	b.n	800298a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	0c1b      	lsrs	r3, r3, #16
 8002946:	b2db      	uxtb	r3, r3
 8002948:	2b01      	cmp	r3, #1
 800294a:	d10d      	bne.n	8002968 <I2C_WaitOnFlagUntilTimeout+0x84>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	43da      	mvns	r2, r3
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4013      	ands	r3, r2
 8002958:	b29b      	uxth	r3, r3
 800295a:	2b00      	cmp	r3, #0
 800295c:	bf0c      	ite	eq
 800295e:	2301      	moveq	r3, #1
 8002960:	2300      	movne	r3, #0
 8002962:	b2db      	uxtb	r3, r3
 8002964:	461a      	mov	r2, r3
 8002966:	e00c      	b.n	8002982 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	43da      	mvns	r2, r3
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	4013      	ands	r3, r2
 8002974:	b29b      	uxth	r3, r3
 8002976:	2b00      	cmp	r3, #0
 8002978:	bf0c      	ite	eq
 800297a:	2301      	moveq	r3, #1
 800297c:	2300      	movne	r3, #0
 800297e:	b2db      	uxtb	r3, r3
 8002980:	461a      	mov	r2, r3
 8002982:	79fb      	ldrb	r3, [r7, #7]
 8002984:	429a      	cmp	r2, r3
 8002986:	d0b6      	beq.n	80028f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b084      	sub	sp, #16
 8002996:	af00      	add	r7, sp, #0
 8002998:	60f8      	str	r0, [r7, #12]
 800299a:	60b9      	str	r1, [r7, #8]
 800299c:	607a      	str	r2, [r7, #4]
 800299e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029a0:	e051      	b.n	8002a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029b0:	d123      	bne.n	80029fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80029ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2200      	movs	r2, #0
 80029d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2220      	movs	r2, #32
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2200      	movs	r2, #0
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e6:	f043 0204 	orr.w	r2, r3, #4
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e046      	b.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d021      	beq.n	8002a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a02:	f7fe fb5d 	bl	80010c0 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d302      	bcc.n	8002a18 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d116      	bne.n	8002a46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2220      	movs	r2, #32
 8002a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a32:	f043 0220 	orr.w	r2, r3, #32
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e020      	b.n	8002a88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	0c1b      	lsrs	r3, r3, #16
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b01      	cmp	r3, #1
 8002a4e:	d10c      	bne.n	8002a6a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	43da      	mvns	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	bf14      	ite	ne
 8002a62:	2301      	movne	r3, #1
 8002a64:	2300      	moveq	r3, #0
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	e00b      	b.n	8002a82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	699b      	ldr	r3, [r3, #24]
 8002a70:	43da      	mvns	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	4013      	ands	r3, r2
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	bf14      	ite	ne
 8002a7c:	2301      	movne	r3, #1
 8002a7e:	2300      	moveq	r3, #0
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d18d      	bne.n	80029a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60f8      	str	r0, [r7, #12]
 8002a98:	60b9      	str	r1, [r7, #8]
 8002a9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a9c:	e02d      	b.n	8002afa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f878 	bl	8002b94 <I2C_IsAcknowledgeFailed>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e02d      	b.n	8002b0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d021      	beq.n	8002afa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ab6:	f7fe fb03 	bl	80010c0 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d302      	bcc.n	8002acc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d116      	bne.n	8002afa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	f043 0220 	orr.w	r2, r3, #32
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	2200      	movs	r2, #0
 8002af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e007      	b.n	8002b0a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	695b      	ldr	r3, [r3, #20]
 8002b00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b04:	2b80      	cmp	r3, #128	; 0x80
 8002b06:	d1ca      	bne.n	8002a9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b08:	2300      	movs	r3, #0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b084      	sub	sp, #16
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	60f8      	str	r0, [r7, #12]
 8002b1a:	60b9      	str	r1, [r7, #8]
 8002b1c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b1e:	e02d      	b.n	8002b7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 f837 	bl	8002b94 <I2C_IsAcknowledgeFailed>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e02d      	b.n	8002b8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d021      	beq.n	8002b7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b38:	f7fe fac2 	bl	80010c0 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	68ba      	ldr	r2, [r7, #8]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d302      	bcc.n	8002b4e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d116      	bne.n	8002b7c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2220      	movs	r2, #32
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b68:	f043 0220 	orr.w	r2, r3, #32
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e007      	b.n	8002b8c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	695b      	ldr	r3, [r3, #20]
 8002b82:	f003 0304 	and.w	r3, r3, #4
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d1ca      	bne.n	8002b20 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b8a:	2300      	movs	r3, #0
}
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	3710      	adds	r7, #16
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}

08002b94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	695b      	ldr	r3, [r3, #20]
 8002ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002baa:	d11b      	bne.n	8002be4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bd0:	f043 0204 	orr.w	r2, r3, #4
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e000      	b.n	8002be6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002be4:	2300      	movs	r3, #0
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	370c      	adds	r7, #12
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
	...

08002bf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b086      	sub	sp, #24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e25b      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d075      	beq.n	8002cfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c12:	4ba3      	ldr	r3, [pc, #652]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f003 030c 	and.w	r3, r3, #12
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d00c      	beq.n	8002c38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c1e:	4ba0      	ldr	r3, [pc, #640]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d112      	bne.n	8002c50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c2a:	4b9d      	ldr	r3, [pc, #628]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c36:	d10b      	bne.n	8002c50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c38:	4b99      	ldr	r3, [pc, #612]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d05b      	beq.n	8002cfc <HAL_RCC_OscConfig+0x108>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d157      	bne.n	8002cfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e236      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c58:	d106      	bne.n	8002c68 <HAL_RCC_OscConfig+0x74>
 8002c5a:	4b91      	ldr	r3, [pc, #580]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a90      	ldr	r2, [pc, #576]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e01d      	b.n	8002ca4 <HAL_RCC_OscConfig+0xb0>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	685b      	ldr	r3, [r3, #4]
 8002c6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c70:	d10c      	bne.n	8002c8c <HAL_RCC_OscConfig+0x98>
 8002c72:	4b8b      	ldr	r3, [pc, #556]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	4a8a      	ldr	r2, [pc, #552]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c7c:	6013      	str	r3, [r2, #0]
 8002c7e:	4b88      	ldr	r3, [pc, #544]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a87      	ldr	r2, [pc, #540]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c88:	6013      	str	r3, [r2, #0]
 8002c8a:	e00b      	b.n	8002ca4 <HAL_RCC_OscConfig+0xb0>
 8002c8c:	4b84      	ldr	r3, [pc, #528]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a83      	ldr	r2, [pc, #524]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c96:	6013      	str	r3, [r2, #0]
 8002c98:	4b81      	ldr	r3, [pc, #516]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a80      	ldr	r2, [pc, #512]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ca2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d013      	beq.n	8002cd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cac:	f7fe fa08 	bl	80010c0 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cb2:	e008      	b.n	8002cc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cb4:	f7fe fa04 	bl	80010c0 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b64      	cmp	r3, #100	; 0x64
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e1fb      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc6:	4b76      	ldr	r3, [pc, #472]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0xc0>
 8002cd2:	e014      	b.n	8002cfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd4:	f7fe f9f4 	bl	80010c0 <HAL_GetTick>
 8002cd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002cdc:	f7fe f9f0 	bl	80010c0 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b64      	cmp	r3, #100	; 0x64
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e1e7      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cee:	4b6c      	ldr	r3, [pc, #432]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1f0      	bne.n	8002cdc <HAL_RCC_OscConfig+0xe8>
 8002cfa:	e000      	b.n	8002cfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d063      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d0a:	4b65      	ldr	r3, [pc, #404]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00b      	beq.n	8002d2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d16:	4b62      	ldr	r3, [pc, #392]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d1e:	2b08      	cmp	r3, #8
 8002d20:	d11c      	bne.n	8002d5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d22:	4b5f      	ldr	r3, [pc, #380]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d116      	bne.n	8002d5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	4b5c      	ldr	r3, [pc, #368]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d005      	beq.n	8002d46 <HAL_RCC_OscConfig+0x152>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d001      	beq.n	8002d46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d42:	2301      	movs	r3, #1
 8002d44:	e1bb      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d46:	4b56      	ldr	r3, [pc, #344]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	691b      	ldr	r3, [r3, #16]
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4952      	ldr	r1, [pc, #328]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d56:	4313      	orrs	r3, r2
 8002d58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d5a:	e03a      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d020      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d64:	4b4f      	ldr	r3, [pc, #316]	; (8002ea4 <HAL_RCC_OscConfig+0x2b0>)
 8002d66:	2201      	movs	r2, #1
 8002d68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d6a:	f7fe f9a9 	bl	80010c0 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d70:	e008      	b.n	8002d84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d72:	f7fe f9a5 	bl	80010c0 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d901      	bls.n	8002d84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e19c      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d84:	4b46      	ldr	r3, [pc, #280]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0302 	and.w	r3, r3, #2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d0f0      	beq.n	8002d72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d90:	4b43      	ldr	r3, [pc, #268]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	691b      	ldr	r3, [r3, #16]
 8002d9c:	00db      	lsls	r3, r3, #3
 8002d9e:	4940      	ldr	r1, [pc, #256]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002da0:	4313      	orrs	r3, r2
 8002da2:	600b      	str	r3, [r1, #0]
 8002da4:	e015      	b.n	8002dd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da6:	4b3f      	ldr	r3, [pc, #252]	; (8002ea4 <HAL_RCC_OscConfig+0x2b0>)
 8002da8:	2200      	movs	r2, #0
 8002daa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dac:	f7fe f988 	bl	80010c0 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db4:	f7fe f984 	bl	80010c0 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e17b      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc6:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d1f0      	bne.n	8002db4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 0308 	and.w	r3, r3, #8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d030      	beq.n	8002e40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d016      	beq.n	8002e14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de6:	4b30      	ldr	r3, [pc, #192]	; (8002ea8 <HAL_RCC_OscConfig+0x2b4>)
 8002de8:	2201      	movs	r2, #1
 8002dea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dec:	f7fe f968 	bl	80010c0 <HAL_GetTick>
 8002df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002df2:	e008      	b.n	8002e06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002df4:	f7fe f964 	bl	80010c0 <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	693b      	ldr	r3, [r7, #16]
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	2b02      	cmp	r3, #2
 8002e00:	d901      	bls.n	8002e06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e02:	2303      	movs	r3, #3
 8002e04:	e15b      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e06:	4b26      	ldr	r3, [pc, #152]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e0a:	f003 0302 	and.w	r3, r3, #2
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d0f0      	beq.n	8002df4 <HAL_RCC_OscConfig+0x200>
 8002e12:	e015      	b.n	8002e40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e14:	4b24      	ldr	r3, [pc, #144]	; (8002ea8 <HAL_RCC_OscConfig+0x2b4>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1a:	f7fe f951 	bl	80010c0 <HAL_GetTick>
 8002e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e22:	f7fe f94d 	bl	80010c0 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e144      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e34:	4b1a      	ldr	r3, [pc, #104]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002e36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f0      	bne.n	8002e22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 80a0 	beq.w	8002f8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d10f      	bne.n	8002e7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60bb      	str	r3, [r7, #8]
 8002e62:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e66:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002e68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <HAL_RCC_OscConfig+0x2ac>)
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e76:	60bb      	str	r3, [r7, #8]
 8002e78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7e:	4b0b      	ldr	r3, [pc, #44]	; (8002eac <HAL_RCC_OscConfig+0x2b8>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d121      	bne.n	8002ece <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e8a:	4b08      	ldr	r3, [pc, #32]	; (8002eac <HAL_RCC_OscConfig+0x2b8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a07      	ldr	r2, [pc, #28]	; (8002eac <HAL_RCC_OscConfig+0x2b8>)
 8002e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e96:	f7fe f913 	bl	80010c0 <HAL_GetTick>
 8002e9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e9c:	e011      	b.n	8002ec2 <HAL_RCC_OscConfig+0x2ce>
 8002e9e:	bf00      	nop
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	42470000 	.word	0x42470000
 8002ea8:	42470e80 	.word	0x42470e80
 8002eac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eb0:	f7fe f906 	bl	80010c0 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e0fd      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ec2:	4b81      	ldr	r3, [pc, #516]	; (80030c8 <HAL_RCC_OscConfig+0x4d4>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d0f0      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d106      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x2f0>
 8002ed6:	4b7d      	ldr	r3, [pc, #500]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	4a7c      	ldr	r2, [pc, #496]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002edc:	f043 0301 	orr.w	r3, r3, #1
 8002ee0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ee2:	e01c      	b.n	8002f1e <HAL_RCC_OscConfig+0x32a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	2b05      	cmp	r3, #5
 8002eea:	d10c      	bne.n	8002f06 <HAL_RCC_OscConfig+0x312>
 8002eec:	4b77      	ldr	r3, [pc, #476]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002eee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ef0:	4a76      	ldr	r2, [pc, #472]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002ef2:	f043 0304 	orr.w	r3, r3, #4
 8002ef6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ef8:	4b74      	ldr	r3, [pc, #464]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efc:	4a73      	ldr	r2, [pc, #460]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002efe:	f043 0301 	orr.w	r3, r3, #1
 8002f02:	6713      	str	r3, [r2, #112]	; 0x70
 8002f04:	e00b      	b.n	8002f1e <HAL_RCC_OscConfig+0x32a>
 8002f06:	4b71      	ldr	r3, [pc, #452]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f0a:	4a70      	ldr	r2, [pc, #448]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	6713      	str	r3, [r2, #112]	; 0x70
 8002f12:	4b6e      	ldr	r3, [pc, #440]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f16:	4a6d      	ldr	r2, [pc, #436]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002f18:	f023 0304 	bic.w	r3, r3, #4
 8002f1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d015      	beq.n	8002f52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f26:	f7fe f8cb 	bl	80010c0 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f2c:	e00a      	b.n	8002f44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f2e:	f7fe f8c7 	bl	80010c0 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d901      	bls.n	8002f44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002f40:	2303      	movs	r3, #3
 8002f42:	e0bc      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f44:	4b61      	ldr	r3, [pc, #388]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002f46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d0ee      	beq.n	8002f2e <HAL_RCC_OscConfig+0x33a>
 8002f50:	e014      	b.n	8002f7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f52:	f7fe f8b5 	bl	80010c0 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f58:	e00a      	b.n	8002f70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f5a:	f7fe f8b1 	bl	80010c0 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d901      	bls.n	8002f70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e0a6      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f70:	4b56      	ldr	r3, [pc, #344]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1ee      	bne.n	8002f5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f7c:	7dfb      	ldrb	r3, [r7, #23]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d105      	bne.n	8002f8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f82:	4b52      	ldr	r3, [pc, #328]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f86:	4a51      	ldr	r2, [pc, #324]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	699b      	ldr	r3, [r3, #24]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	f000 8092 	beq.w	80030bc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f98:	4b4c      	ldr	r3, [pc, #304]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 030c 	and.w	r3, r3, #12
 8002fa0:	2b08      	cmp	r3, #8
 8002fa2:	d05c      	beq.n	800305e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d141      	bne.n	8003030 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fac:	4b48      	ldr	r3, [pc, #288]	; (80030d0 <HAL_RCC_OscConfig+0x4dc>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fb2:	f7fe f885 	bl	80010c0 <HAL_GetTick>
 8002fb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fb8:	e008      	b.n	8002fcc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fba:	f7fe f881 	bl	80010c0 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d901      	bls.n	8002fcc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002fc8:	2303      	movs	r3, #3
 8002fca:	e078      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fcc:	4b3f      	ldr	r3, [pc, #252]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d1f0      	bne.n	8002fba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69da      	ldr	r2, [r3, #28]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6a1b      	ldr	r3, [r3, #32]
 8002fe0:	431a      	orrs	r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe6:	019b      	lsls	r3, r3, #6
 8002fe8:	431a      	orrs	r2, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fee:	085b      	lsrs	r3, r3, #1
 8002ff0:	3b01      	subs	r3, #1
 8002ff2:	041b      	lsls	r3, r3, #16
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ffa:	061b      	lsls	r3, r3, #24
 8002ffc:	4933      	ldr	r1, [pc, #204]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8002ffe:	4313      	orrs	r3, r2
 8003000:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003002:	4b33      	ldr	r3, [pc, #204]	; (80030d0 <HAL_RCC_OscConfig+0x4dc>)
 8003004:	2201      	movs	r2, #1
 8003006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fe f85a 	bl	80010c0 <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003010:	f7fe f856 	bl	80010c0 <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e04d      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003022:	4b2a      	ldr	r3, [pc, #168]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d0f0      	beq.n	8003010 <HAL_RCC_OscConfig+0x41c>
 800302e:	e045      	b.n	80030bc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003030:	4b27      	ldr	r3, [pc, #156]	; (80030d0 <HAL_RCC_OscConfig+0x4dc>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003036:	f7fe f843 	bl	80010c0 <HAL_GetTick>
 800303a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800303c:	e008      	b.n	8003050 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800303e:	f7fe f83f 	bl	80010c0 <HAL_GetTick>
 8003042:	4602      	mov	r2, r0
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	1ad3      	subs	r3, r2, r3
 8003048:	2b02      	cmp	r3, #2
 800304a:	d901      	bls.n	8003050 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	e036      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003050:	4b1e      	ldr	r3, [pc, #120]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1f0      	bne.n	800303e <HAL_RCC_OscConfig+0x44a>
 800305c:	e02e      	b.n	80030bc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d101      	bne.n	800306a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e029      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800306a:	4b18      	ldr	r3, [pc, #96]	; (80030cc <HAL_RCC_OscConfig+0x4d8>)
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	69db      	ldr	r3, [r3, #28]
 800307a:	429a      	cmp	r2, r3
 800307c:	d11c      	bne.n	80030b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003088:	429a      	cmp	r2, r3
 800308a:	d115      	bne.n	80030b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800308c:	68fa      	ldr	r2, [r7, #12]
 800308e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003092:	4013      	ands	r3, r2
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003098:	4293      	cmp	r3, r2
 800309a:	d10d      	bne.n	80030b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d106      	bne.n	80030b8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d001      	beq.n	80030bc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3718      	adds	r7, #24
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	40007000 	.word	0x40007000
 80030cc:	40023800 	.word	0x40023800
 80030d0:	42470060 	.word	0x42470060

080030d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b084      	sub	sp, #16
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
 80030dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d101      	bne.n	80030e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e0cc      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030e8:	4b68      	ldr	r3, [pc, #416]	; (800328c <HAL_RCC_ClockConfig+0x1b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d90c      	bls.n	8003110 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b65      	ldr	r3, [pc, #404]	; (800328c <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b63      	ldr	r3, [pc, #396]	; (800328c <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e0b8      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0302 	and.w	r3, r3, #2
 8003118:	2b00      	cmp	r3, #0
 800311a:	d020      	beq.n	800315e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0304 	and.w	r3, r3, #4
 8003124:	2b00      	cmp	r3, #0
 8003126:	d005      	beq.n	8003134 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003128:	4b59      	ldr	r3, [pc, #356]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	4a58      	ldr	r2, [pc, #352]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003132:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f003 0308 	and.w	r3, r3, #8
 800313c:	2b00      	cmp	r3, #0
 800313e:	d005      	beq.n	800314c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003140:	4b53      	ldr	r3, [pc, #332]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	4a52      	ldr	r2, [pc, #328]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800314a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314c:	4b50      	ldr	r3, [pc, #320]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	494d      	ldr	r1, [pc, #308]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	2b00      	cmp	r3, #0
 8003168:	d044      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d107      	bne.n	8003182 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003172:	4b47      	ldr	r3, [pc, #284]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317a:	2b00      	cmp	r3, #0
 800317c:	d119      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e07f      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d003      	beq.n	8003192 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800318e:	2b03      	cmp	r3, #3
 8003190:	d107      	bne.n	80031a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003192:	4b3f      	ldr	r3, [pc, #252]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d109      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e06f      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a2:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0302 	and.w	r3, r3, #2
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d101      	bne.n	80031b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e067      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031b2:	4b37      	ldr	r3, [pc, #220]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f023 0203 	bic.w	r2, r3, #3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	4934      	ldr	r1, [pc, #208]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 80031c0:	4313      	orrs	r3, r2
 80031c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c4:	f7fd ff7c 	bl	80010c0 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ca:	e00a      	b.n	80031e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031cc:	f7fd ff78 	bl	80010c0 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80031da:	4293      	cmp	r3, r2
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e04f      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031e2:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	f003 020c 	and.w	r2, r3, #12
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d1eb      	bne.n	80031cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80031f4:	4b25      	ldr	r3, [pc, #148]	; (800328c <HAL_RCC_ClockConfig+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 030f 	and.w	r3, r3, #15
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d20c      	bcs.n	800321c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b22      	ldr	r3, [pc, #136]	; (800328c <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 030f 	and.w	r3, r3, #15
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e032      	b.n	8003282 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0304 	and.w	r3, r3, #4
 8003224:	2b00      	cmp	r3, #0
 8003226:	d008      	beq.n	800323a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003228:	4b19      	ldr	r3, [pc, #100]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 800322a:	689b      	ldr	r3, [r3, #8]
 800322c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4916      	ldr	r1, [pc, #88]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	4313      	orrs	r3, r2
 8003238:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b00      	cmp	r3, #0
 8003244:	d009      	beq.n	800325a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003246:	4b12      	ldr	r3, [pc, #72]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	490e      	ldr	r1, [pc, #56]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800325a:	f000 f821 	bl	80032a0 <HAL_RCC_GetSysClockFreq>
 800325e:	4601      	mov	r1, r0
 8003260:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCC_ClockConfig+0x1bc>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	091b      	lsrs	r3, r3, #4
 8003266:	f003 030f 	and.w	r3, r3, #15
 800326a:	4a0a      	ldr	r2, [pc, #40]	; (8003294 <HAL_RCC_ClockConfig+0x1c0>)
 800326c:	5cd3      	ldrb	r3, [r2, r3]
 800326e:	fa21 f303 	lsr.w	r3, r1, r3
 8003272:	4a09      	ldr	r2, [pc, #36]	; (8003298 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003276:	4b09      	ldr	r3, [pc, #36]	; (800329c <HAL_RCC_ClockConfig+0x1c8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd fedc 	bl	8001038 <HAL_InitTick>

  return HAL_OK;
 8003280:	2300      	movs	r3, #0
}
 8003282:	4618      	mov	r0, r3
 8003284:	3710      	adds	r7, #16
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}
 800328a:	bf00      	nop
 800328c:	40023c00 	.word	0x40023c00
 8003290:	40023800 	.word	0x40023800
 8003294:	08003d4c 	.word	0x08003d4c
 8003298:	20000000 	.word	0x20000000
 800329c:	20000004 	.word	0x20000004

080032a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80032a6:	2300      	movs	r3, #0
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	2300      	movs	r3, #0
 80032b0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032b6:	4b63      	ldr	r3, [pc, #396]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b04      	cmp	r3, #4
 80032c0:	d007      	beq.n	80032d2 <HAL_RCC_GetSysClockFreq+0x32>
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d008      	beq.n	80032d8 <HAL_RCC_GetSysClockFreq+0x38>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f040 80b4 	bne.w	8003434 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032cc:	4b5e      	ldr	r3, [pc, #376]	; (8003448 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80032ce:	60bb      	str	r3, [r7, #8]
       break;
 80032d0:	e0b3      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032d2:	4b5e      	ldr	r3, [pc, #376]	; (800344c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80032d4:	60bb      	str	r3, [r7, #8]
      break;
 80032d6:	e0b0      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032d8:	4b5a      	ldr	r3, [pc, #360]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032e2:	4b58      	ldr	r3, [pc, #352]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d04a      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032ee:	4b55      	ldr	r3, [pc, #340]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	099b      	lsrs	r3, r3, #6
 80032f4:	f04f 0400 	mov.w	r4, #0
 80032f8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032fc:	f04f 0200 	mov.w	r2, #0
 8003300:	ea03 0501 	and.w	r5, r3, r1
 8003304:	ea04 0602 	and.w	r6, r4, r2
 8003308:	4629      	mov	r1, r5
 800330a:	4632      	mov	r2, r6
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	f04f 0400 	mov.w	r4, #0
 8003314:	0154      	lsls	r4, r2, #5
 8003316:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800331a:	014b      	lsls	r3, r1, #5
 800331c:	4619      	mov	r1, r3
 800331e:	4622      	mov	r2, r4
 8003320:	1b49      	subs	r1, r1, r5
 8003322:	eb62 0206 	sbc.w	r2, r2, r6
 8003326:	f04f 0300 	mov.w	r3, #0
 800332a:	f04f 0400 	mov.w	r4, #0
 800332e:	0194      	lsls	r4, r2, #6
 8003330:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003334:	018b      	lsls	r3, r1, #6
 8003336:	1a5b      	subs	r3, r3, r1
 8003338:	eb64 0402 	sbc.w	r4, r4, r2
 800333c:	f04f 0100 	mov.w	r1, #0
 8003340:	f04f 0200 	mov.w	r2, #0
 8003344:	00e2      	lsls	r2, r4, #3
 8003346:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800334a:	00d9      	lsls	r1, r3, #3
 800334c:	460b      	mov	r3, r1
 800334e:	4614      	mov	r4, r2
 8003350:	195b      	adds	r3, r3, r5
 8003352:	eb44 0406 	adc.w	r4, r4, r6
 8003356:	f04f 0100 	mov.w	r1, #0
 800335a:	f04f 0200 	mov.w	r2, #0
 800335e:	0262      	lsls	r2, r4, #9
 8003360:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003364:	0259      	lsls	r1, r3, #9
 8003366:	460b      	mov	r3, r1
 8003368:	4614      	mov	r4, r2
 800336a:	4618      	mov	r0, r3
 800336c:	4621      	mov	r1, r4
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f04f 0400 	mov.w	r4, #0
 8003374:	461a      	mov	r2, r3
 8003376:	4623      	mov	r3, r4
 8003378:	f7fc ff7a 	bl	8000270 <__aeabi_uldivmod>
 800337c:	4603      	mov	r3, r0
 800337e:	460c      	mov	r4, r1
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	e049      	b.n	8003418 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003384:	4b2f      	ldr	r3, [pc, #188]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	099b      	lsrs	r3, r3, #6
 800338a:	f04f 0400 	mov.w	r4, #0
 800338e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	ea03 0501 	and.w	r5, r3, r1
 800339a:	ea04 0602 	and.w	r6, r4, r2
 800339e:	4629      	mov	r1, r5
 80033a0:	4632      	mov	r2, r6
 80033a2:	f04f 0300 	mov.w	r3, #0
 80033a6:	f04f 0400 	mov.w	r4, #0
 80033aa:	0154      	lsls	r4, r2, #5
 80033ac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033b0:	014b      	lsls	r3, r1, #5
 80033b2:	4619      	mov	r1, r3
 80033b4:	4622      	mov	r2, r4
 80033b6:	1b49      	subs	r1, r1, r5
 80033b8:	eb62 0206 	sbc.w	r2, r2, r6
 80033bc:	f04f 0300 	mov.w	r3, #0
 80033c0:	f04f 0400 	mov.w	r4, #0
 80033c4:	0194      	lsls	r4, r2, #6
 80033c6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033ca:	018b      	lsls	r3, r1, #6
 80033cc:	1a5b      	subs	r3, r3, r1
 80033ce:	eb64 0402 	sbc.w	r4, r4, r2
 80033d2:	f04f 0100 	mov.w	r1, #0
 80033d6:	f04f 0200 	mov.w	r2, #0
 80033da:	00e2      	lsls	r2, r4, #3
 80033dc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80033e0:	00d9      	lsls	r1, r3, #3
 80033e2:	460b      	mov	r3, r1
 80033e4:	4614      	mov	r4, r2
 80033e6:	195b      	adds	r3, r3, r5
 80033e8:	eb44 0406 	adc.w	r4, r4, r6
 80033ec:	f04f 0100 	mov.w	r1, #0
 80033f0:	f04f 0200 	mov.w	r2, #0
 80033f4:	02a2      	lsls	r2, r4, #10
 80033f6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80033fa:	0299      	lsls	r1, r3, #10
 80033fc:	460b      	mov	r3, r1
 80033fe:	4614      	mov	r4, r2
 8003400:	4618      	mov	r0, r3
 8003402:	4621      	mov	r1, r4
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f04f 0400 	mov.w	r4, #0
 800340a:	461a      	mov	r2, r3
 800340c:	4623      	mov	r3, r4
 800340e:	f7fc ff2f 	bl	8000270 <__aeabi_uldivmod>
 8003412:	4603      	mov	r3, r0
 8003414:	460c      	mov	r4, r1
 8003416:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003418:	4b0a      	ldr	r3, [pc, #40]	; (8003444 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	0c1b      	lsrs	r3, r3, #16
 800341e:	f003 0303 	and.w	r3, r3, #3
 8003422:	3301      	adds	r3, #1
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003428:	68fa      	ldr	r2, [r7, #12]
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003430:	60bb      	str	r3, [r7, #8]
      break;
 8003432:	e002      	b.n	800343a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003434:	4b04      	ldr	r3, [pc, #16]	; (8003448 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003436:	60bb      	str	r3, [r7, #8]
      break;
 8003438:	bf00      	nop
    }
  }
  return sysclockfreq;
 800343a:	68bb      	ldr	r3, [r7, #8]
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003444:	40023800 	.word	0x40023800
 8003448:	00f42400 	.word	0x00f42400
 800344c:	007a1200 	.word	0x007a1200

08003450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003450:	b480      	push	{r7}
 8003452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003454:	4b03      	ldr	r3, [pc, #12]	; (8003464 <HAL_RCC_GetHCLKFreq+0x14>)
 8003456:	681b      	ldr	r3, [r3, #0]
}
 8003458:	4618      	mov	r0, r3
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	20000000 	.word	0x20000000

08003468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800346c:	f7ff fff0 	bl	8003450 <HAL_RCC_GetHCLKFreq>
 8003470:	4601      	mov	r1, r0
 8003472:	4b05      	ldr	r3, [pc, #20]	; (8003488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	0a9b      	lsrs	r3, r3, #10
 8003478:	f003 0307 	and.w	r3, r3, #7
 800347c:	4a03      	ldr	r2, [pc, #12]	; (800348c <HAL_RCC_GetPCLK1Freq+0x24>)
 800347e:	5cd3      	ldrb	r3, [r2, r3]
 8003480:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003484:	4618      	mov	r0, r3
 8003486:	bd80      	pop	{r7, pc}
 8003488:	40023800 	.word	0x40023800
 800348c:	08003d5c 	.word	0x08003d5c

08003490 <__errno>:
 8003490:	4b01      	ldr	r3, [pc, #4]	; (8003498 <__errno+0x8>)
 8003492:	6818      	ldr	r0, [r3, #0]
 8003494:	4770      	bx	lr
 8003496:	bf00      	nop
 8003498:	2000000c 	.word	0x2000000c

0800349c <__libc_init_array>:
 800349c:	b570      	push	{r4, r5, r6, lr}
 800349e:	4e0d      	ldr	r6, [pc, #52]	; (80034d4 <__libc_init_array+0x38>)
 80034a0:	4c0d      	ldr	r4, [pc, #52]	; (80034d8 <__libc_init_array+0x3c>)
 80034a2:	1ba4      	subs	r4, r4, r6
 80034a4:	10a4      	asrs	r4, r4, #2
 80034a6:	2500      	movs	r5, #0
 80034a8:	42a5      	cmp	r5, r4
 80034aa:	d109      	bne.n	80034c0 <__libc_init_array+0x24>
 80034ac:	4e0b      	ldr	r6, [pc, #44]	; (80034dc <__libc_init_array+0x40>)
 80034ae:	4c0c      	ldr	r4, [pc, #48]	; (80034e0 <__libc_init_array+0x44>)
 80034b0:	f000 fc26 	bl	8003d00 <_init>
 80034b4:	1ba4      	subs	r4, r4, r6
 80034b6:	10a4      	asrs	r4, r4, #2
 80034b8:	2500      	movs	r5, #0
 80034ba:	42a5      	cmp	r5, r4
 80034bc:	d105      	bne.n	80034ca <__libc_init_array+0x2e>
 80034be:	bd70      	pop	{r4, r5, r6, pc}
 80034c0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034c4:	4798      	blx	r3
 80034c6:	3501      	adds	r5, #1
 80034c8:	e7ee      	b.n	80034a8 <__libc_init_array+0xc>
 80034ca:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ce:	4798      	blx	r3
 80034d0:	3501      	adds	r5, #1
 80034d2:	e7f2      	b.n	80034ba <__libc_init_array+0x1e>
 80034d4:	08003da0 	.word	0x08003da0
 80034d8:	08003da0 	.word	0x08003da0
 80034dc:	08003da0 	.word	0x08003da0
 80034e0:	08003da4 	.word	0x08003da4

080034e4 <memset>:
 80034e4:	4402      	add	r2, r0
 80034e6:	4603      	mov	r3, r0
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d100      	bne.n	80034ee <memset+0xa>
 80034ec:	4770      	bx	lr
 80034ee:	f803 1b01 	strb.w	r1, [r3], #1
 80034f2:	e7f9      	b.n	80034e8 <memset+0x4>

080034f4 <siprintf>:
 80034f4:	b40e      	push	{r1, r2, r3}
 80034f6:	b500      	push	{lr}
 80034f8:	b09c      	sub	sp, #112	; 0x70
 80034fa:	ab1d      	add	r3, sp, #116	; 0x74
 80034fc:	9002      	str	r0, [sp, #8]
 80034fe:	9006      	str	r0, [sp, #24]
 8003500:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003504:	4809      	ldr	r0, [pc, #36]	; (800352c <siprintf+0x38>)
 8003506:	9107      	str	r1, [sp, #28]
 8003508:	9104      	str	r1, [sp, #16]
 800350a:	4909      	ldr	r1, [pc, #36]	; (8003530 <siprintf+0x3c>)
 800350c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003510:	9105      	str	r1, [sp, #20]
 8003512:	6800      	ldr	r0, [r0, #0]
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	a902      	add	r1, sp, #8
 8003518:	f000 f866 	bl	80035e8 <_svfiprintf_r>
 800351c:	9b02      	ldr	r3, [sp, #8]
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
 8003522:	b01c      	add	sp, #112	; 0x70
 8003524:	f85d eb04 	ldr.w	lr, [sp], #4
 8003528:	b003      	add	sp, #12
 800352a:	4770      	bx	lr
 800352c:	2000000c 	.word	0x2000000c
 8003530:	ffff0208 	.word	0xffff0208

08003534 <__ssputs_r>:
 8003534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003538:	688e      	ldr	r6, [r1, #8]
 800353a:	429e      	cmp	r6, r3
 800353c:	4682      	mov	sl, r0
 800353e:	460c      	mov	r4, r1
 8003540:	4690      	mov	r8, r2
 8003542:	4699      	mov	r9, r3
 8003544:	d837      	bhi.n	80035b6 <__ssputs_r+0x82>
 8003546:	898a      	ldrh	r2, [r1, #12]
 8003548:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800354c:	d031      	beq.n	80035b2 <__ssputs_r+0x7e>
 800354e:	6825      	ldr	r5, [r4, #0]
 8003550:	6909      	ldr	r1, [r1, #16]
 8003552:	1a6f      	subs	r7, r5, r1
 8003554:	6965      	ldr	r5, [r4, #20]
 8003556:	2302      	movs	r3, #2
 8003558:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800355c:	fb95 f5f3 	sdiv	r5, r5, r3
 8003560:	f109 0301 	add.w	r3, r9, #1
 8003564:	443b      	add	r3, r7
 8003566:	429d      	cmp	r5, r3
 8003568:	bf38      	it	cc
 800356a:	461d      	movcc	r5, r3
 800356c:	0553      	lsls	r3, r2, #21
 800356e:	d530      	bpl.n	80035d2 <__ssputs_r+0x9e>
 8003570:	4629      	mov	r1, r5
 8003572:	f000 fb2b 	bl	8003bcc <_malloc_r>
 8003576:	4606      	mov	r6, r0
 8003578:	b950      	cbnz	r0, 8003590 <__ssputs_r+0x5c>
 800357a:	230c      	movs	r3, #12
 800357c:	f8ca 3000 	str.w	r3, [sl]
 8003580:	89a3      	ldrh	r3, [r4, #12]
 8003582:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003586:	81a3      	strh	r3, [r4, #12]
 8003588:	f04f 30ff 	mov.w	r0, #4294967295
 800358c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003590:	463a      	mov	r2, r7
 8003592:	6921      	ldr	r1, [r4, #16]
 8003594:	f000 faa8 	bl	8003ae8 <memcpy>
 8003598:	89a3      	ldrh	r3, [r4, #12]
 800359a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800359e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80035a2:	81a3      	strh	r3, [r4, #12]
 80035a4:	6126      	str	r6, [r4, #16]
 80035a6:	6165      	str	r5, [r4, #20]
 80035a8:	443e      	add	r6, r7
 80035aa:	1bed      	subs	r5, r5, r7
 80035ac:	6026      	str	r6, [r4, #0]
 80035ae:	60a5      	str	r5, [r4, #8]
 80035b0:	464e      	mov	r6, r9
 80035b2:	454e      	cmp	r6, r9
 80035b4:	d900      	bls.n	80035b8 <__ssputs_r+0x84>
 80035b6:	464e      	mov	r6, r9
 80035b8:	4632      	mov	r2, r6
 80035ba:	4641      	mov	r1, r8
 80035bc:	6820      	ldr	r0, [r4, #0]
 80035be:	f000 fa9e 	bl	8003afe <memmove>
 80035c2:	68a3      	ldr	r3, [r4, #8]
 80035c4:	1b9b      	subs	r3, r3, r6
 80035c6:	60a3      	str	r3, [r4, #8]
 80035c8:	6823      	ldr	r3, [r4, #0]
 80035ca:	441e      	add	r6, r3
 80035cc:	6026      	str	r6, [r4, #0]
 80035ce:	2000      	movs	r0, #0
 80035d0:	e7dc      	b.n	800358c <__ssputs_r+0x58>
 80035d2:	462a      	mov	r2, r5
 80035d4:	f000 fb54 	bl	8003c80 <_realloc_r>
 80035d8:	4606      	mov	r6, r0
 80035da:	2800      	cmp	r0, #0
 80035dc:	d1e2      	bne.n	80035a4 <__ssputs_r+0x70>
 80035de:	6921      	ldr	r1, [r4, #16]
 80035e0:	4650      	mov	r0, sl
 80035e2:	f000 faa5 	bl	8003b30 <_free_r>
 80035e6:	e7c8      	b.n	800357a <__ssputs_r+0x46>

080035e8 <_svfiprintf_r>:
 80035e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ec:	461d      	mov	r5, r3
 80035ee:	898b      	ldrh	r3, [r1, #12]
 80035f0:	061f      	lsls	r7, r3, #24
 80035f2:	b09d      	sub	sp, #116	; 0x74
 80035f4:	4680      	mov	r8, r0
 80035f6:	460c      	mov	r4, r1
 80035f8:	4616      	mov	r6, r2
 80035fa:	d50f      	bpl.n	800361c <_svfiprintf_r+0x34>
 80035fc:	690b      	ldr	r3, [r1, #16]
 80035fe:	b96b      	cbnz	r3, 800361c <_svfiprintf_r+0x34>
 8003600:	2140      	movs	r1, #64	; 0x40
 8003602:	f000 fae3 	bl	8003bcc <_malloc_r>
 8003606:	6020      	str	r0, [r4, #0]
 8003608:	6120      	str	r0, [r4, #16]
 800360a:	b928      	cbnz	r0, 8003618 <_svfiprintf_r+0x30>
 800360c:	230c      	movs	r3, #12
 800360e:	f8c8 3000 	str.w	r3, [r8]
 8003612:	f04f 30ff 	mov.w	r0, #4294967295
 8003616:	e0c8      	b.n	80037aa <_svfiprintf_r+0x1c2>
 8003618:	2340      	movs	r3, #64	; 0x40
 800361a:	6163      	str	r3, [r4, #20]
 800361c:	2300      	movs	r3, #0
 800361e:	9309      	str	r3, [sp, #36]	; 0x24
 8003620:	2320      	movs	r3, #32
 8003622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003626:	2330      	movs	r3, #48	; 0x30
 8003628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800362c:	9503      	str	r5, [sp, #12]
 800362e:	f04f 0b01 	mov.w	fp, #1
 8003632:	4637      	mov	r7, r6
 8003634:	463d      	mov	r5, r7
 8003636:	f815 3b01 	ldrb.w	r3, [r5], #1
 800363a:	b10b      	cbz	r3, 8003640 <_svfiprintf_r+0x58>
 800363c:	2b25      	cmp	r3, #37	; 0x25
 800363e:	d13e      	bne.n	80036be <_svfiprintf_r+0xd6>
 8003640:	ebb7 0a06 	subs.w	sl, r7, r6
 8003644:	d00b      	beq.n	800365e <_svfiprintf_r+0x76>
 8003646:	4653      	mov	r3, sl
 8003648:	4632      	mov	r2, r6
 800364a:	4621      	mov	r1, r4
 800364c:	4640      	mov	r0, r8
 800364e:	f7ff ff71 	bl	8003534 <__ssputs_r>
 8003652:	3001      	adds	r0, #1
 8003654:	f000 80a4 	beq.w	80037a0 <_svfiprintf_r+0x1b8>
 8003658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800365a:	4453      	add	r3, sl
 800365c:	9309      	str	r3, [sp, #36]	; 0x24
 800365e:	783b      	ldrb	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 809d 	beq.w	80037a0 <_svfiprintf_r+0x1b8>
 8003666:	2300      	movs	r3, #0
 8003668:	f04f 32ff 	mov.w	r2, #4294967295
 800366c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003670:	9304      	str	r3, [sp, #16]
 8003672:	9307      	str	r3, [sp, #28]
 8003674:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003678:	931a      	str	r3, [sp, #104]	; 0x68
 800367a:	462f      	mov	r7, r5
 800367c:	2205      	movs	r2, #5
 800367e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8003682:	4850      	ldr	r0, [pc, #320]	; (80037c4 <_svfiprintf_r+0x1dc>)
 8003684:	f7fc fda4 	bl	80001d0 <memchr>
 8003688:	9b04      	ldr	r3, [sp, #16]
 800368a:	b9d0      	cbnz	r0, 80036c2 <_svfiprintf_r+0xda>
 800368c:	06d9      	lsls	r1, r3, #27
 800368e:	bf44      	itt	mi
 8003690:	2220      	movmi	r2, #32
 8003692:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003696:	071a      	lsls	r2, r3, #28
 8003698:	bf44      	itt	mi
 800369a:	222b      	movmi	r2, #43	; 0x2b
 800369c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80036a0:	782a      	ldrb	r2, [r5, #0]
 80036a2:	2a2a      	cmp	r2, #42	; 0x2a
 80036a4:	d015      	beq.n	80036d2 <_svfiprintf_r+0xea>
 80036a6:	9a07      	ldr	r2, [sp, #28]
 80036a8:	462f      	mov	r7, r5
 80036aa:	2000      	movs	r0, #0
 80036ac:	250a      	movs	r5, #10
 80036ae:	4639      	mov	r1, r7
 80036b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80036b4:	3b30      	subs	r3, #48	; 0x30
 80036b6:	2b09      	cmp	r3, #9
 80036b8:	d94d      	bls.n	8003756 <_svfiprintf_r+0x16e>
 80036ba:	b1b8      	cbz	r0, 80036ec <_svfiprintf_r+0x104>
 80036bc:	e00f      	b.n	80036de <_svfiprintf_r+0xf6>
 80036be:	462f      	mov	r7, r5
 80036c0:	e7b8      	b.n	8003634 <_svfiprintf_r+0x4c>
 80036c2:	4a40      	ldr	r2, [pc, #256]	; (80037c4 <_svfiprintf_r+0x1dc>)
 80036c4:	1a80      	subs	r0, r0, r2
 80036c6:	fa0b f000 	lsl.w	r0, fp, r0
 80036ca:	4318      	orrs	r0, r3
 80036cc:	9004      	str	r0, [sp, #16]
 80036ce:	463d      	mov	r5, r7
 80036d0:	e7d3      	b.n	800367a <_svfiprintf_r+0x92>
 80036d2:	9a03      	ldr	r2, [sp, #12]
 80036d4:	1d11      	adds	r1, r2, #4
 80036d6:	6812      	ldr	r2, [r2, #0]
 80036d8:	9103      	str	r1, [sp, #12]
 80036da:	2a00      	cmp	r2, #0
 80036dc:	db01      	blt.n	80036e2 <_svfiprintf_r+0xfa>
 80036de:	9207      	str	r2, [sp, #28]
 80036e0:	e004      	b.n	80036ec <_svfiprintf_r+0x104>
 80036e2:	4252      	negs	r2, r2
 80036e4:	f043 0302 	orr.w	r3, r3, #2
 80036e8:	9207      	str	r2, [sp, #28]
 80036ea:	9304      	str	r3, [sp, #16]
 80036ec:	783b      	ldrb	r3, [r7, #0]
 80036ee:	2b2e      	cmp	r3, #46	; 0x2e
 80036f0:	d10c      	bne.n	800370c <_svfiprintf_r+0x124>
 80036f2:	787b      	ldrb	r3, [r7, #1]
 80036f4:	2b2a      	cmp	r3, #42	; 0x2a
 80036f6:	d133      	bne.n	8003760 <_svfiprintf_r+0x178>
 80036f8:	9b03      	ldr	r3, [sp, #12]
 80036fa:	1d1a      	adds	r2, r3, #4
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	9203      	str	r2, [sp, #12]
 8003700:	2b00      	cmp	r3, #0
 8003702:	bfb8      	it	lt
 8003704:	f04f 33ff 	movlt.w	r3, #4294967295
 8003708:	3702      	adds	r7, #2
 800370a:	9305      	str	r3, [sp, #20]
 800370c:	4d2e      	ldr	r5, [pc, #184]	; (80037c8 <_svfiprintf_r+0x1e0>)
 800370e:	7839      	ldrb	r1, [r7, #0]
 8003710:	2203      	movs	r2, #3
 8003712:	4628      	mov	r0, r5
 8003714:	f7fc fd5c 	bl	80001d0 <memchr>
 8003718:	b138      	cbz	r0, 800372a <_svfiprintf_r+0x142>
 800371a:	2340      	movs	r3, #64	; 0x40
 800371c:	1b40      	subs	r0, r0, r5
 800371e:	fa03 f000 	lsl.w	r0, r3, r0
 8003722:	9b04      	ldr	r3, [sp, #16]
 8003724:	4303      	orrs	r3, r0
 8003726:	3701      	adds	r7, #1
 8003728:	9304      	str	r3, [sp, #16]
 800372a:	7839      	ldrb	r1, [r7, #0]
 800372c:	4827      	ldr	r0, [pc, #156]	; (80037cc <_svfiprintf_r+0x1e4>)
 800372e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003732:	2206      	movs	r2, #6
 8003734:	1c7e      	adds	r6, r7, #1
 8003736:	f7fc fd4b 	bl	80001d0 <memchr>
 800373a:	2800      	cmp	r0, #0
 800373c:	d038      	beq.n	80037b0 <_svfiprintf_r+0x1c8>
 800373e:	4b24      	ldr	r3, [pc, #144]	; (80037d0 <_svfiprintf_r+0x1e8>)
 8003740:	bb13      	cbnz	r3, 8003788 <_svfiprintf_r+0x1a0>
 8003742:	9b03      	ldr	r3, [sp, #12]
 8003744:	3307      	adds	r3, #7
 8003746:	f023 0307 	bic.w	r3, r3, #7
 800374a:	3308      	adds	r3, #8
 800374c:	9303      	str	r3, [sp, #12]
 800374e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003750:	444b      	add	r3, r9
 8003752:	9309      	str	r3, [sp, #36]	; 0x24
 8003754:	e76d      	b.n	8003632 <_svfiprintf_r+0x4a>
 8003756:	fb05 3202 	mla	r2, r5, r2, r3
 800375a:	2001      	movs	r0, #1
 800375c:	460f      	mov	r7, r1
 800375e:	e7a6      	b.n	80036ae <_svfiprintf_r+0xc6>
 8003760:	2300      	movs	r3, #0
 8003762:	3701      	adds	r7, #1
 8003764:	9305      	str	r3, [sp, #20]
 8003766:	4619      	mov	r1, r3
 8003768:	250a      	movs	r5, #10
 800376a:	4638      	mov	r0, r7
 800376c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003770:	3a30      	subs	r2, #48	; 0x30
 8003772:	2a09      	cmp	r2, #9
 8003774:	d903      	bls.n	800377e <_svfiprintf_r+0x196>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d0c8      	beq.n	800370c <_svfiprintf_r+0x124>
 800377a:	9105      	str	r1, [sp, #20]
 800377c:	e7c6      	b.n	800370c <_svfiprintf_r+0x124>
 800377e:	fb05 2101 	mla	r1, r5, r1, r2
 8003782:	2301      	movs	r3, #1
 8003784:	4607      	mov	r7, r0
 8003786:	e7f0      	b.n	800376a <_svfiprintf_r+0x182>
 8003788:	ab03      	add	r3, sp, #12
 800378a:	9300      	str	r3, [sp, #0]
 800378c:	4622      	mov	r2, r4
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <_svfiprintf_r+0x1ec>)
 8003790:	a904      	add	r1, sp, #16
 8003792:	4640      	mov	r0, r8
 8003794:	f3af 8000 	nop.w
 8003798:	f1b0 3fff 	cmp.w	r0, #4294967295
 800379c:	4681      	mov	r9, r0
 800379e:	d1d6      	bne.n	800374e <_svfiprintf_r+0x166>
 80037a0:	89a3      	ldrh	r3, [r4, #12]
 80037a2:	065b      	lsls	r3, r3, #25
 80037a4:	f53f af35 	bmi.w	8003612 <_svfiprintf_r+0x2a>
 80037a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80037aa:	b01d      	add	sp, #116	; 0x74
 80037ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037b0:	ab03      	add	r3, sp, #12
 80037b2:	9300      	str	r3, [sp, #0]
 80037b4:	4622      	mov	r2, r4
 80037b6:	4b07      	ldr	r3, [pc, #28]	; (80037d4 <_svfiprintf_r+0x1ec>)
 80037b8:	a904      	add	r1, sp, #16
 80037ba:	4640      	mov	r0, r8
 80037bc:	f000 f882 	bl	80038c4 <_printf_i>
 80037c0:	e7ea      	b.n	8003798 <_svfiprintf_r+0x1b0>
 80037c2:	bf00      	nop
 80037c4:	08003d64 	.word	0x08003d64
 80037c8:	08003d6a 	.word	0x08003d6a
 80037cc:	08003d6e 	.word	0x08003d6e
 80037d0:	00000000 	.word	0x00000000
 80037d4:	08003535 	.word	0x08003535

080037d8 <_printf_common>:
 80037d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80037dc:	4691      	mov	r9, r2
 80037de:	461f      	mov	r7, r3
 80037e0:	688a      	ldr	r2, [r1, #8]
 80037e2:	690b      	ldr	r3, [r1, #16]
 80037e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80037e8:	4293      	cmp	r3, r2
 80037ea:	bfb8      	it	lt
 80037ec:	4613      	movlt	r3, r2
 80037ee:	f8c9 3000 	str.w	r3, [r9]
 80037f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80037f6:	4606      	mov	r6, r0
 80037f8:	460c      	mov	r4, r1
 80037fa:	b112      	cbz	r2, 8003802 <_printf_common+0x2a>
 80037fc:	3301      	adds	r3, #1
 80037fe:	f8c9 3000 	str.w	r3, [r9]
 8003802:	6823      	ldr	r3, [r4, #0]
 8003804:	0699      	lsls	r1, r3, #26
 8003806:	bf42      	ittt	mi
 8003808:	f8d9 3000 	ldrmi.w	r3, [r9]
 800380c:	3302      	addmi	r3, #2
 800380e:	f8c9 3000 	strmi.w	r3, [r9]
 8003812:	6825      	ldr	r5, [r4, #0]
 8003814:	f015 0506 	ands.w	r5, r5, #6
 8003818:	d107      	bne.n	800382a <_printf_common+0x52>
 800381a:	f104 0a19 	add.w	sl, r4, #25
 800381e:	68e3      	ldr	r3, [r4, #12]
 8003820:	f8d9 2000 	ldr.w	r2, [r9]
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	42ab      	cmp	r3, r5
 8003828:	dc28      	bgt.n	800387c <_printf_common+0xa4>
 800382a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800382e:	6822      	ldr	r2, [r4, #0]
 8003830:	3300      	adds	r3, #0
 8003832:	bf18      	it	ne
 8003834:	2301      	movne	r3, #1
 8003836:	0692      	lsls	r2, r2, #26
 8003838:	d42d      	bmi.n	8003896 <_printf_common+0xbe>
 800383a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800383e:	4639      	mov	r1, r7
 8003840:	4630      	mov	r0, r6
 8003842:	47c0      	blx	r8
 8003844:	3001      	adds	r0, #1
 8003846:	d020      	beq.n	800388a <_printf_common+0xb2>
 8003848:	6823      	ldr	r3, [r4, #0]
 800384a:	68e5      	ldr	r5, [r4, #12]
 800384c:	f8d9 2000 	ldr.w	r2, [r9]
 8003850:	f003 0306 	and.w	r3, r3, #6
 8003854:	2b04      	cmp	r3, #4
 8003856:	bf08      	it	eq
 8003858:	1aad      	subeq	r5, r5, r2
 800385a:	68a3      	ldr	r3, [r4, #8]
 800385c:	6922      	ldr	r2, [r4, #16]
 800385e:	bf0c      	ite	eq
 8003860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003864:	2500      	movne	r5, #0
 8003866:	4293      	cmp	r3, r2
 8003868:	bfc4      	itt	gt
 800386a:	1a9b      	subgt	r3, r3, r2
 800386c:	18ed      	addgt	r5, r5, r3
 800386e:	f04f 0900 	mov.w	r9, #0
 8003872:	341a      	adds	r4, #26
 8003874:	454d      	cmp	r5, r9
 8003876:	d11a      	bne.n	80038ae <_printf_common+0xd6>
 8003878:	2000      	movs	r0, #0
 800387a:	e008      	b.n	800388e <_printf_common+0xb6>
 800387c:	2301      	movs	r3, #1
 800387e:	4652      	mov	r2, sl
 8003880:	4639      	mov	r1, r7
 8003882:	4630      	mov	r0, r6
 8003884:	47c0      	blx	r8
 8003886:	3001      	adds	r0, #1
 8003888:	d103      	bne.n	8003892 <_printf_common+0xba>
 800388a:	f04f 30ff 	mov.w	r0, #4294967295
 800388e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003892:	3501      	adds	r5, #1
 8003894:	e7c3      	b.n	800381e <_printf_common+0x46>
 8003896:	18e1      	adds	r1, r4, r3
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	2030      	movs	r0, #48	; 0x30
 800389c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80038a0:	4422      	add	r2, r4
 80038a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80038a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80038aa:	3302      	adds	r3, #2
 80038ac:	e7c5      	b.n	800383a <_printf_common+0x62>
 80038ae:	2301      	movs	r3, #1
 80038b0:	4622      	mov	r2, r4
 80038b2:	4639      	mov	r1, r7
 80038b4:	4630      	mov	r0, r6
 80038b6:	47c0      	blx	r8
 80038b8:	3001      	adds	r0, #1
 80038ba:	d0e6      	beq.n	800388a <_printf_common+0xb2>
 80038bc:	f109 0901 	add.w	r9, r9, #1
 80038c0:	e7d8      	b.n	8003874 <_printf_common+0x9c>
	...

080038c4 <_printf_i>:
 80038c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80038c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80038cc:	460c      	mov	r4, r1
 80038ce:	7e09      	ldrb	r1, [r1, #24]
 80038d0:	b085      	sub	sp, #20
 80038d2:	296e      	cmp	r1, #110	; 0x6e
 80038d4:	4617      	mov	r7, r2
 80038d6:	4606      	mov	r6, r0
 80038d8:	4698      	mov	r8, r3
 80038da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80038dc:	f000 80b3 	beq.w	8003a46 <_printf_i+0x182>
 80038e0:	d822      	bhi.n	8003928 <_printf_i+0x64>
 80038e2:	2963      	cmp	r1, #99	; 0x63
 80038e4:	d036      	beq.n	8003954 <_printf_i+0x90>
 80038e6:	d80a      	bhi.n	80038fe <_printf_i+0x3a>
 80038e8:	2900      	cmp	r1, #0
 80038ea:	f000 80b9 	beq.w	8003a60 <_printf_i+0x19c>
 80038ee:	2958      	cmp	r1, #88	; 0x58
 80038f0:	f000 8083 	beq.w	80039fa <_printf_i+0x136>
 80038f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80038f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80038fc:	e032      	b.n	8003964 <_printf_i+0xa0>
 80038fe:	2964      	cmp	r1, #100	; 0x64
 8003900:	d001      	beq.n	8003906 <_printf_i+0x42>
 8003902:	2969      	cmp	r1, #105	; 0x69
 8003904:	d1f6      	bne.n	80038f4 <_printf_i+0x30>
 8003906:	6820      	ldr	r0, [r4, #0]
 8003908:	6813      	ldr	r3, [r2, #0]
 800390a:	0605      	lsls	r5, r0, #24
 800390c:	f103 0104 	add.w	r1, r3, #4
 8003910:	d52a      	bpl.n	8003968 <_printf_i+0xa4>
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6011      	str	r1, [r2, #0]
 8003916:	2b00      	cmp	r3, #0
 8003918:	da03      	bge.n	8003922 <_printf_i+0x5e>
 800391a:	222d      	movs	r2, #45	; 0x2d
 800391c:	425b      	negs	r3, r3
 800391e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003922:	486f      	ldr	r0, [pc, #444]	; (8003ae0 <_printf_i+0x21c>)
 8003924:	220a      	movs	r2, #10
 8003926:	e039      	b.n	800399c <_printf_i+0xd8>
 8003928:	2973      	cmp	r1, #115	; 0x73
 800392a:	f000 809d 	beq.w	8003a68 <_printf_i+0x1a4>
 800392e:	d808      	bhi.n	8003942 <_printf_i+0x7e>
 8003930:	296f      	cmp	r1, #111	; 0x6f
 8003932:	d020      	beq.n	8003976 <_printf_i+0xb2>
 8003934:	2970      	cmp	r1, #112	; 0x70
 8003936:	d1dd      	bne.n	80038f4 <_printf_i+0x30>
 8003938:	6823      	ldr	r3, [r4, #0]
 800393a:	f043 0320 	orr.w	r3, r3, #32
 800393e:	6023      	str	r3, [r4, #0]
 8003940:	e003      	b.n	800394a <_printf_i+0x86>
 8003942:	2975      	cmp	r1, #117	; 0x75
 8003944:	d017      	beq.n	8003976 <_printf_i+0xb2>
 8003946:	2978      	cmp	r1, #120	; 0x78
 8003948:	d1d4      	bne.n	80038f4 <_printf_i+0x30>
 800394a:	2378      	movs	r3, #120	; 0x78
 800394c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003950:	4864      	ldr	r0, [pc, #400]	; (8003ae4 <_printf_i+0x220>)
 8003952:	e055      	b.n	8003a00 <_printf_i+0x13c>
 8003954:	6813      	ldr	r3, [r2, #0]
 8003956:	1d19      	adds	r1, r3, #4
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	6011      	str	r1, [r2, #0]
 800395c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003964:	2301      	movs	r3, #1
 8003966:	e08c      	b.n	8003a82 <_printf_i+0x1be>
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	6011      	str	r1, [r2, #0]
 800396c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003970:	bf18      	it	ne
 8003972:	b21b      	sxthne	r3, r3
 8003974:	e7cf      	b.n	8003916 <_printf_i+0x52>
 8003976:	6813      	ldr	r3, [r2, #0]
 8003978:	6825      	ldr	r5, [r4, #0]
 800397a:	1d18      	adds	r0, r3, #4
 800397c:	6010      	str	r0, [r2, #0]
 800397e:	0628      	lsls	r0, r5, #24
 8003980:	d501      	bpl.n	8003986 <_printf_i+0xc2>
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	e002      	b.n	800398c <_printf_i+0xc8>
 8003986:	0668      	lsls	r0, r5, #25
 8003988:	d5fb      	bpl.n	8003982 <_printf_i+0xbe>
 800398a:	881b      	ldrh	r3, [r3, #0]
 800398c:	4854      	ldr	r0, [pc, #336]	; (8003ae0 <_printf_i+0x21c>)
 800398e:	296f      	cmp	r1, #111	; 0x6f
 8003990:	bf14      	ite	ne
 8003992:	220a      	movne	r2, #10
 8003994:	2208      	moveq	r2, #8
 8003996:	2100      	movs	r1, #0
 8003998:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800399c:	6865      	ldr	r5, [r4, #4]
 800399e:	60a5      	str	r5, [r4, #8]
 80039a0:	2d00      	cmp	r5, #0
 80039a2:	f2c0 8095 	blt.w	8003ad0 <_printf_i+0x20c>
 80039a6:	6821      	ldr	r1, [r4, #0]
 80039a8:	f021 0104 	bic.w	r1, r1, #4
 80039ac:	6021      	str	r1, [r4, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d13d      	bne.n	8003a2e <_printf_i+0x16a>
 80039b2:	2d00      	cmp	r5, #0
 80039b4:	f040 808e 	bne.w	8003ad4 <_printf_i+0x210>
 80039b8:	4665      	mov	r5, ip
 80039ba:	2a08      	cmp	r2, #8
 80039bc:	d10b      	bne.n	80039d6 <_printf_i+0x112>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	07db      	lsls	r3, r3, #31
 80039c2:	d508      	bpl.n	80039d6 <_printf_i+0x112>
 80039c4:	6923      	ldr	r3, [r4, #16]
 80039c6:	6862      	ldr	r2, [r4, #4]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	bfde      	ittt	le
 80039cc:	2330      	movle	r3, #48	; 0x30
 80039ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80039d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80039d6:	ebac 0305 	sub.w	r3, ip, r5
 80039da:	6123      	str	r3, [r4, #16]
 80039dc:	f8cd 8000 	str.w	r8, [sp]
 80039e0:	463b      	mov	r3, r7
 80039e2:	aa03      	add	r2, sp, #12
 80039e4:	4621      	mov	r1, r4
 80039e6:	4630      	mov	r0, r6
 80039e8:	f7ff fef6 	bl	80037d8 <_printf_common>
 80039ec:	3001      	adds	r0, #1
 80039ee:	d14d      	bne.n	8003a8c <_printf_i+0x1c8>
 80039f0:	f04f 30ff 	mov.w	r0, #4294967295
 80039f4:	b005      	add	sp, #20
 80039f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039fa:	4839      	ldr	r0, [pc, #228]	; (8003ae0 <_printf_i+0x21c>)
 80039fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003a00:	6813      	ldr	r3, [r2, #0]
 8003a02:	6821      	ldr	r1, [r4, #0]
 8003a04:	1d1d      	adds	r5, r3, #4
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6015      	str	r5, [r2, #0]
 8003a0a:	060a      	lsls	r2, r1, #24
 8003a0c:	d50b      	bpl.n	8003a26 <_printf_i+0x162>
 8003a0e:	07ca      	lsls	r2, r1, #31
 8003a10:	bf44      	itt	mi
 8003a12:	f041 0120 	orrmi.w	r1, r1, #32
 8003a16:	6021      	strmi	r1, [r4, #0]
 8003a18:	b91b      	cbnz	r3, 8003a22 <_printf_i+0x15e>
 8003a1a:	6822      	ldr	r2, [r4, #0]
 8003a1c:	f022 0220 	bic.w	r2, r2, #32
 8003a20:	6022      	str	r2, [r4, #0]
 8003a22:	2210      	movs	r2, #16
 8003a24:	e7b7      	b.n	8003996 <_printf_i+0xd2>
 8003a26:	064d      	lsls	r5, r1, #25
 8003a28:	bf48      	it	mi
 8003a2a:	b29b      	uxthmi	r3, r3
 8003a2c:	e7ef      	b.n	8003a0e <_printf_i+0x14a>
 8003a2e:	4665      	mov	r5, ip
 8003a30:	fbb3 f1f2 	udiv	r1, r3, r2
 8003a34:	fb02 3311 	mls	r3, r2, r1, r3
 8003a38:	5cc3      	ldrb	r3, [r0, r3]
 8003a3a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003a3e:	460b      	mov	r3, r1
 8003a40:	2900      	cmp	r1, #0
 8003a42:	d1f5      	bne.n	8003a30 <_printf_i+0x16c>
 8003a44:	e7b9      	b.n	80039ba <_printf_i+0xf6>
 8003a46:	6813      	ldr	r3, [r2, #0]
 8003a48:	6825      	ldr	r5, [r4, #0]
 8003a4a:	6961      	ldr	r1, [r4, #20]
 8003a4c:	1d18      	adds	r0, r3, #4
 8003a4e:	6010      	str	r0, [r2, #0]
 8003a50:	0628      	lsls	r0, r5, #24
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	d501      	bpl.n	8003a5a <_printf_i+0x196>
 8003a56:	6019      	str	r1, [r3, #0]
 8003a58:	e002      	b.n	8003a60 <_printf_i+0x19c>
 8003a5a:	066a      	lsls	r2, r5, #25
 8003a5c:	d5fb      	bpl.n	8003a56 <_printf_i+0x192>
 8003a5e:	8019      	strh	r1, [r3, #0]
 8003a60:	2300      	movs	r3, #0
 8003a62:	6123      	str	r3, [r4, #16]
 8003a64:	4665      	mov	r5, ip
 8003a66:	e7b9      	b.n	80039dc <_printf_i+0x118>
 8003a68:	6813      	ldr	r3, [r2, #0]
 8003a6a:	1d19      	adds	r1, r3, #4
 8003a6c:	6011      	str	r1, [r2, #0]
 8003a6e:	681d      	ldr	r5, [r3, #0]
 8003a70:	6862      	ldr	r2, [r4, #4]
 8003a72:	2100      	movs	r1, #0
 8003a74:	4628      	mov	r0, r5
 8003a76:	f7fc fbab 	bl	80001d0 <memchr>
 8003a7a:	b108      	cbz	r0, 8003a80 <_printf_i+0x1bc>
 8003a7c:	1b40      	subs	r0, r0, r5
 8003a7e:	6060      	str	r0, [r4, #4]
 8003a80:	6863      	ldr	r3, [r4, #4]
 8003a82:	6123      	str	r3, [r4, #16]
 8003a84:	2300      	movs	r3, #0
 8003a86:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003a8a:	e7a7      	b.n	80039dc <_printf_i+0x118>
 8003a8c:	6923      	ldr	r3, [r4, #16]
 8003a8e:	462a      	mov	r2, r5
 8003a90:	4639      	mov	r1, r7
 8003a92:	4630      	mov	r0, r6
 8003a94:	47c0      	blx	r8
 8003a96:	3001      	adds	r0, #1
 8003a98:	d0aa      	beq.n	80039f0 <_printf_i+0x12c>
 8003a9a:	6823      	ldr	r3, [r4, #0]
 8003a9c:	079b      	lsls	r3, r3, #30
 8003a9e:	d413      	bmi.n	8003ac8 <_printf_i+0x204>
 8003aa0:	68e0      	ldr	r0, [r4, #12]
 8003aa2:	9b03      	ldr	r3, [sp, #12]
 8003aa4:	4298      	cmp	r0, r3
 8003aa6:	bfb8      	it	lt
 8003aa8:	4618      	movlt	r0, r3
 8003aaa:	e7a3      	b.n	80039f4 <_printf_i+0x130>
 8003aac:	2301      	movs	r3, #1
 8003aae:	464a      	mov	r2, r9
 8003ab0:	4639      	mov	r1, r7
 8003ab2:	4630      	mov	r0, r6
 8003ab4:	47c0      	blx	r8
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	d09a      	beq.n	80039f0 <_printf_i+0x12c>
 8003aba:	3501      	adds	r5, #1
 8003abc:	68e3      	ldr	r3, [r4, #12]
 8003abe:	9a03      	ldr	r2, [sp, #12]
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	42ab      	cmp	r3, r5
 8003ac4:	dcf2      	bgt.n	8003aac <_printf_i+0x1e8>
 8003ac6:	e7eb      	b.n	8003aa0 <_printf_i+0x1dc>
 8003ac8:	2500      	movs	r5, #0
 8003aca:	f104 0919 	add.w	r9, r4, #25
 8003ace:	e7f5      	b.n	8003abc <_printf_i+0x1f8>
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1ac      	bne.n	8003a2e <_printf_i+0x16a>
 8003ad4:	7803      	ldrb	r3, [r0, #0]
 8003ad6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ada:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ade:	e76c      	b.n	80039ba <_printf_i+0xf6>
 8003ae0:	08003d75 	.word	0x08003d75
 8003ae4:	08003d86 	.word	0x08003d86

08003ae8 <memcpy>:
 8003ae8:	b510      	push	{r4, lr}
 8003aea:	1e43      	subs	r3, r0, #1
 8003aec:	440a      	add	r2, r1
 8003aee:	4291      	cmp	r1, r2
 8003af0:	d100      	bne.n	8003af4 <memcpy+0xc>
 8003af2:	bd10      	pop	{r4, pc}
 8003af4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003af8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003afc:	e7f7      	b.n	8003aee <memcpy+0x6>

08003afe <memmove>:
 8003afe:	4288      	cmp	r0, r1
 8003b00:	b510      	push	{r4, lr}
 8003b02:	eb01 0302 	add.w	r3, r1, r2
 8003b06:	d807      	bhi.n	8003b18 <memmove+0x1a>
 8003b08:	1e42      	subs	r2, r0, #1
 8003b0a:	4299      	cmp	r1, r3
 8003b0c:	d00a      	beq.n	8003b24 <memmove+0x26>
 8003b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003b12:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003b16:	e7f8      	b.n	8003b0a <memmove+0xc>
 8003b18:	4283      	cmp	r3, r0
 8003b1a:	d9f5      	bls.n	8003b08 <memmove+0xa>
 8003b1c:	1881      	adds	r1, r0, r2
 8003b1e:	1ad2      	subs	r2, r2, r3
 8003b20:	42d3      	cmn	r3, r2
 8003b22:	d100      	bne.n	8003b26 <memmove+0x28>
 8003b24:	bd10      	pop	{r4, pc}
 8003b26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8003b2a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003b2e:	e7f7      	b.n	8003b20 <memmove+0x22>

08003b30 <_free_r>:
 8003b30:	b538      	push	{r3, r4, r5, lr}
 8003b32:	4605      	mov	r5, r0
 8003b34:	2900      	cmp	r1, #0
 8003b36:	d045      	beq.n	8003bc4 <_free_r+0x94>
 8003b38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b3c:	1f0c      	subs	r4, r1, #4
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	bfb8      	it	lt
 8003b42:	18e4      	addlt	r4, r4, r3
 8003b44:	f000 f8d2 	bl	8003cec <__malloc_lock>
 8003b48:	4a1f      	ldr	r2, [pc, #124]	; (8003bc8 <_free_r+0x98>)
 8003b4a:	6813      	ldr	r3, [r2, #0]
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	b933      	cbnz	r3, 8003b5e <_free_r+0x2e>
 8003b50:	6063      	str	r3, [r4, #4]
 8003b52:	6014      	str	r4, [r2, #0]
 8003b54:	4628      	mov	r0, r5
 8003b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b5a:	f000 b8c8 	b.w	8003cee <__malloc_unlock>
 8003b5e:	42a3      	cmp	r3, r4
 8003b60:	d90c      	bls.n	8003b7c <_free_r+0x4c>
 8003b62:	6821      	ldr	r1, [r4, #0]
 8003b64:	1862      	adds	r2, r4, r1
 8003b66:	4293      	cmp	r3, r2
 8003b68:	bf04      	itt	eq
 8003b6a:	681a      	ldreq	r2, [r3, #0]
 8003b6c:	685b      	ldreq	r3, [r3, #4]
 8003b6e:	6063      	str	r3, [r4, #4]
 8003b70:	bf04      	itt	eq
 8003b72:	1852      	addeq	r2, r2, r1
 8003b74:	6022      	streq	r2, [r4, #0]
 8003b76:	6004      	str	r4, [r0, #0]
 8003b78:	e7ec      	b.n	8003b54 <_free_r+0x24>
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	685a      	ldr	r2, [r3, #4]
 8003b7e:	b10a      	cbz	r2, 8003b84 <_free_r+0x54>
 8003b80:	42a2      	cmp	r2, r4
 8003b82:	d9fa      	bls.n	8003b7a <_free_r+0x4a>
 8003b84:	6819      	ldr	r1, [r3, #0]
 8003b86:	1858      	adds	r0, r3, r1
 8003b88:	42a0      	cmp	r0, r4
 8003b8a:	d10b      	bne.n	8003ba4 <_free_r+0x74>
 8003b8c:	6820      	ldr	r0, [r4, #0]
 8003b8e:	4401      	add	r1, r0
 8003b90:	1858      	adds	r0, r3, r1
 8003b92:	4282      	cmp	r2, r0
 8003b94:	6019      	str	r1, [r3, #0]
 8003b96:	d1dd      	bne.n	8003b54 <_free_r+0x24>
 8003b98:	6810      	ldr	r0, [r2, #0]
 8003b9a:	6852      	ldr	r2, [r2, #4]
 8003b9c:	605a      	str	r2, [r3, #4]
 8003b9e:	4401      	add	r1, r0
 8003ba0:	6019      	str	r1, [r3, #0]
 8003ba2:	e7d7      	b.n	8003b54 <_free_r+0x24>
 8003ba4:	d902      	bls.n	8003bac <_free_r+0x7c>
 8003ba6:	230c      	movs	r3, #12
 8003ba8:	602b      	str	r3, [r5, #0]
 8003baa:	e7d3      	b.n	8003b54 <_free_r+0x24>
 8003bac:	6820      	ldr	r0, [r4, #0]
 8003bae:	1821      	adds	r1, r4, r0
 8003bb0:	428a      	cmp	r2, r1
 8003bb2:	bf04      	itt	eq
 8003bb4:	6811      	ldreq	r1, [r2, #0]
 8003bb6:	6852      	ldreq	r2, [r2, #4]
 8003bb8:	6062      	str	r2, [r4, #4]
 8003bba:	bf04      	itt	eq
 8003bbc:	1809      	addeq	r1, r1, r0
 8003bbe:	6021      	streq	r1, [r4, #0]
 8003bc0:	605c      	str	r4, [r3, #4]
 8003bc2:	e7c7      	b.n	8003b54 <_free_r+0x24>
 8003bc4:	bd38      	pop	{r3, r4, r5, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000090 	.word	0x20000090

08003bcc <_malloc_r>:
 8003bcc:	b570      	push	{r4, r5, r6, lr}
 8003bce:	1ccd      	adds	r5, r1, #3
 8003bd0:	f025 0503 	bic.w	r5, r5, #3
 8003bd4:	3508      	adds	r5, #8
 8003bd6:	2d0c      	cmp	r5, #12
 8003bd8:	bf38      	it	cc
 8003bda:	250c      	movcc	r5, #12
 8003bdc:	2d00      	cmp	r5, #0
 8003bde:	4606      	mov	r6, r0
 8003be0:	db01      	blt.n	8003be6 <_malloc_r+0x1a>
 8003be2:	42a9      	cmp	r1, r5
 8003be4:	d903      	bls.n	8003bee <_malloc_r+0x22>
 8003be6:	230c      	movs	r3, #12
 8003be8:	6033      	str	r3, [r6, #0]
 8003bea:	2000      	movs	r0, #0
 8003bec:	bd70      	pop	{r4, r5, r6, pc}
 8003bee:	f000 f87d 	bl	8003cec <__malloc_lock>
 8003bf2:	4a21      	ldr	r2, [pc, #132]	; (8003c78 <_malloc_r+0xac>)
 8003bf4:	6814      	ldr	r4, [r2, #0]
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	b991      	cbnz	r1, 8003c20 <_malloc_r+0x54>
 8003bfa:	4c20      	ldr	r4, [pc, #128]	; (8003c7c <_malloc_r+0xb0>)
 8003bfc:	6823      	ldr	r3, [r4, #0]
 8003bfe:	b91b      	cbnz	r3, 8003c08 <_malloc_r+0x3c>
 8003c00:	4630      	mov	r0, r6
 8003c02:	f000 f863 	bl	8003ccc <_sbrk_r>
 8003c06:	6020      	str	r0, [r4, #0]
 8003c08:	4629      	mov	r1, r5
 8003c0a:	4630      	mov	r0, r6
 8003c0c:	f000 f85e 	bl	8003ccc <_sbrk_r>
 8003c10:	1c43      	adds	r3, r0, #1
 8003c12:	d124      	bne.n	8003c5e <_malloc_r+0x92>
 8003c14:	230c      	movs	r3, #12
 8003c16:	6033      	str	r3, [r6, #0]
 8003c18:	4630      	mov	r0, r6
 8003c1a:	f000 f868 	bl	8003cee <__malloc_unlock>
 8003c1e:	e7e4      	b.n	8003bea <_malloc_r+0x1e>
 8003c20:	680b      	ldr	r3, [r1, #0]
 8003c22:	1b5b      	subs	r3, r3, r5
 8003c24:	d418      	bmi.n	8003c58 <_malloc_r+0x8c>
 8003c26:	2b0b      	cmp	r3, #11
 8003c28:	d90f      	bls.n	8003c4a <_malloc_r+0x7e>
 8003c2a:	600b      	str	r3, [r1, #0]
 8003c2c:	50cd      	str	r5, [r1, r3]
 8003c2e:	18cc      	adds	r4, r1, r3
 8003c30:	4630      	mov	r0, r6
 8003c32:	f000 f85c 	bl	8003cee <__malloc_unlock>
 8003c36:	f104 000b 	add.w	r0, r4, #11
 8003c3a:	1d23      	adds	r3, r4, #4
 8003c3c:	f020 0007 	bic.w	r0, r0, #7
 8003c40:	1ac3      	subs	r3, r0, r3
 8003c42:	d0d3      	beq.n	8003bec <_malloc_r+0x20>
 8003c44:	425a      	negs	r2, r3
 8003c46:	50e2      	str	r2, [r4, r3]
 8003c48:	e7d0      	b.n	8003bec <_malloc_r+0x20>
 8003c4a:	428c      	cmp	r4, r1
 8003c4c:	684b      	ldr	r3, [r1, #4]
 8003c4e:	bf16      	itet	ne
 8003c50:	6063      	strne	r3, [r4, #4]
 8003c52:	6013      	streq	r3, [r2, #0]
 8003c54:	460c      	movne	r4, r1
 8003c56:	e7eb      	b.n	8003c30 <_malloc_r+0x64>
 8003c58:	460c      	mov	r4, r1
 8003c5a:	6849      	ldr	r1, [r1, #4]
 8003c5c:	e7cc      	b.n	8003bf8 <_malloc_r+0x2c>
 8003c5e:	1cc4      	adds	r4, r0, #3
 8003c60:	f024 0403 	bic.w	r4, r4, #3
 8003c64:	42a0      	cmp	r0, r4
 8003c66:	d005      	beq.n	8003c74 <_malloc_r+0xa8>
 8003c68:	1a21      	subs	r1, r4, r0
 8003c6a:	4630      	mov	r0, r6
 8003c6c:	f000 f82e 	bl	8003ccc <_sbrk_r>
 8003c70:	3001      	adds	r0, #1
 8003c72:	d0cf      	beq.n	8003c14 <_malloc_r+0x48>
 8003c74:	6025      	str	r5, [r4, #0]
 8003c76:	e7db      	b.n	8003c30 <_malloc_r+0x64>
 8003c78:	20000090 	.word	0x20000090
 8003c7c:	20000094 	.word	0x20000094

08003c80 <_realloc_r>:
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	4607      	mov	r7, r0
 8003c84:	4614      	mov	r4, r2
 8003c86:	460e      	mov	r6, r1
 8003c88:	b921      	cbnz	r1, 8003c94 <_realloc_r+0x14>
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8003c90:	f7ff bf9c 	b.w	8003bcc <_malloc_r>
 8003c94:	b922      	cbnz	r2, 8003ca0 <_realloc_r+0x20>
 8003c96:	f7ff ff4b 	bl	8003b30 <_free_r>
 8003c9a:	4625      	mov	r5, r4
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ca0:	f000 f826 	bl	8003cf0 <_malloc_usable_size_r>
 8003ca4:	42a0      	cmp	r0, r4
 8003ca6:	d20f      	bcs.n	8003cc8 <_realloc_r+0x48>
 8003ca8:	4621      	mov	r1, r4
 8003caa:	4638      	mov	r0, r7
 8003cac:	f7ff ff8e 	bl	8003bcc <_malloc_r>
 8003cb0:	4605      	mov	r5, r0
 8003cb2:	2800      	cmp	r0, #0
 8003cb4:	d0f2      	beq.n	8003c9c <_realloc_r+0x1c>
 8003cb6:	4631      	mov	r1, r6
 8003cb8:	4622      	mov	r2, r4
 8003cba:	f7ff ff15 	bl	8003ae8 <memcpy>
 8003cbe:	4631      	mov	r1, r6
 8003cc0:	4638      	mov	r0, r7
 8003cc2:	f7ff ff35 	bl	8003b30 <_free_r>
 8003cc6:	e7e9      	b.n	8003c9c <_realloc_r+0x1c>
 8003cc8:	4635      	mov	r5, r6
 8003cca:	e7e7      	b.n	8003c9c <_realloc_r+0x1c>

08003ccc <_sbrk_r>:
 8003ccc:	b538      	push	{r3, r4, r5, lr}
 8003cce:	4c06      	ldr	r4, [pc, #24]	; (8003ce8 <_sbrk_r+0x1c>)
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	4605      	mov	r5, r0
 8003cd4:	4608      	mov	r0, r1
 8003cd6:	6023      	str	r3, [r4, #0]
 8003cd8:	f7fd f920 	bl	8000f1c <_sbrk>
 8003cdc:	1c43      	adds	r3, r0, #1
 8003cde:	d102      	bne.n	8003ce6 <_sbrk_r+0x1a>
 8003ce0:	6823      	ldr	r3, [r4, #0]
 8003ce2:	b103      	cbz	r3, 8003ce6 <_sbrk_r+0x1a>
 8003ce4:	602b      	str	r3, [r5, #0]
 8003ce6:	bd38      	pop	{r3, r4, r5, pc}
 8003ce8:	20000204 	.word	0x20000204

08003cec <__malloc_lock>:
 8003cec:	4770      	bx	lr

08003cee <__malloc_unlock>:
 8003cee:	4770      	bx	lr

08003cf0 <_malloc_usable_size_r>:
 8003cf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003cf4:	1f18      	subs	r0, r3, #4
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bfbc      	itt	lt
 8003cfa:	580b      	ldrlt	r3, [r1, r0]
 8003cfc:	18c0      	addlt	r0, r0, r3
 8003cfe:	4770      	bx	lr

08003d00 <_init>:
 8003d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d02:	bf00      	nop
 8003d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d06:	bc08      	pop	{r3}
 8003d08:	469e      	mov	lr, r3
 8003d0a:	4770      	bx	lr

08003d0c <_fini>:
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	bf00      	nop
 8003d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d12:	bc08      	pop	{r3}
 8003d14:	469e      	mov	lr, r3
 8003d16:	4770      	bx	lr
